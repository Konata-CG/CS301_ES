
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca44  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c7c  0800cc30  0800cc30  0001cc30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8ac  0800e8ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e8ac  0800e8ac  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e8ac  0800e8ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8ac  0800e8ac  0001e8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8b0  0800e8b0  0001e8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e8b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001e0  0800ea94  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  0800ea94  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b98  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e0  00000000  00000000  00030da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00033588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00034510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba6f  00000000  00000000  000353b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011be0  00000000  00000000  00050e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a04ca  00000000  00000000  00062a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102ed1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000528c  00000000  00000000  00102f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800cc14 	.word	0x0800cc14

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	0800cc14 	.word	0x0800cc14

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb0:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb8:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LCD_WR_REG+0x44>)
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd2:	611a      	str	r2, [r3, #16]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40010c00 	.word	0x40010c00

08000be8 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf8:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c00:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <LCD_WR_DATAX+0x44>)
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1a:	611a      	str	r2, [r3, #16]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40011000 	.word	0x40011000
 8000c2c:	40010c00 	.word	0x40010c00

08000c30 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c38:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000c3c:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c40:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000c44:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c52:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5a:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c5e:	2240      	movs	r2, #64	; 0x40
 8000c60:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <LCD_RD_DATA+0x84>)
 8000c64:	889b      	ldrh	r3, [r3, #4]
 8000c66:	f648 1289 	movw	r2, #35209	; 0x8989
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d102      	bne.n	8000c74 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f006 f8c0 	bl	8006df4 <HAL_Delay>
	t = DATAIN
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c7c:	2240      	movs	r2, #64	; 0x40
 8000c7e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c86:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c8a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c8e:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c92:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c96:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9e:	60da      	str	r2, [r3, #12]
	return t;
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40010c00 	.word	0x40010c00
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	2000020c 	.word	0x2000020c

08000cb8 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	460a      	mov	r2, r1
 8000cc2:	80fb      	strh	r3, [r7, #6]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff68 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <LCD_WriteReg+0x50>)
 8000ce2:	88bb      	ldrh	r3, [r7, #4]
 8000ce4:	60d3      	str	r3, [r2, #12]
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	615a      	str	r2, [r3, #20]
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000cee:	2280      	movs	r2, #128	; 0x80
 8000cf0:	611a      	str	r2, [r3, #16]
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf8:	611a      	str	r2, [r3, #16]
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40011000 	.word	0x40011000
 8000d08:	40010c00 	.word	0x40010c00

08000d0c <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff41 	bl	8000ba0 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000d1e:	f7ff ff87 	bl	8000c30 <LCD_RD_DATA>
 8000d22:	4603      	mov	r3, r0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <LCD_WriteRAM_Prepare+0x14>)
 8000d32:	891b      	ldrh	r3, [r3, #8]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff33 	bl	8000ba0 <LCD_WR_REG>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000020c 	.word	0x2000020c

08000d44 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	80fb      	strh	r3, [r7, #6]
 8000d50:	4613      	mov	r3, r2
 8000d52:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000d54:	4b73      	ldr	r3, [pc, #460]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000d56:	889b      	ldrh	r3, [r3, #4]
 8000d58:	f249 3241 	movw	r2, #37697	; 0x9341
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d005      	beq.n	8000d6c <LCD_SetCursor+0x28>
 8000d60:	4b70      	ldr	r3, [pc, #448]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000d62:	889b      	ldrh	r3, [r3, #4]
 8000d64:	f245 3210 	movw	r2, #21264	; 0x5310
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d164      	bne.n	8000e36 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000d6c:	4b6d      	ldr	r3, [pc, #436]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000d6e:	895b      	ldrh	r3, [r3, #10]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff15 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000d76:	4b6c      	ldr	r3, [pc, #432]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7c:	611a      	str	r2, [r3, #16]
 8000d7e:	4b6a      	ldr	r3, [pc, #424]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b67      	ldr	r3, [pc, #412]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	4b65      	ldr	r3, [pc, #404]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	4b64      	ldr	r3, [pc, #400]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	4b62      	ldr	r3, [pc, #392]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000da4:	4b60      	ldr	r3, [pc, #384]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	4b5e      	ldr	r3, [pc, #376]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	4a5d      	ldr	r2, [pc, #372]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	60d3      	str	r3, [r2, #12]
 8000dbc:	4b5a      	ldr	r3, [pc, #360]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	615a      	str	r2, [r3, #20]
 8000dc2:	4b59      	ldr	r3, [pc, #356]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	4b57      	ldr	r3, [pc, #348]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dce:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000dd0:	4b54      	ldr	r3, [pc, #336]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000dd2:	899b      	ldrh	r3, [r3, #12]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fee3 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de0:	611a      	str	r2, [r3, #16]
 8000de2:	4b51      	ldr	r3, [pc, #324]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b4e      	ldr	r3, [pc, #312]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	4b4c      	ldr	r3, [pc, #304]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	4b4b      	ldr	r3, [pc, #300]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	4b49      	ldr	r3, [pc, #292]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e06:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000e08:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	4a44      	ldr	r2, [pc, #272]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	60d3      	str	r3, [r2, #12]
 8000e20:	4b41      	ldr	r3, [pc, #260]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	615a      	str	r2, [r3, #20]
 8000e26:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	611a      	str	r2, [r3, #16]
 8000e2c:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e32:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000e34:	e248      	b.n	80012c8 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000e36:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000e38:	889b      	ldrh	r3, [r3, #4]
 8000e3a:	f646 0204 	movw	r2, #26628	; 0x6804
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d176      	bne.n	8000f30 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000e44:	799b      	ldrb	r3, [r3, #6]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d106      	bne.n	8000e58 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000e4a:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000e4c:	881a      	ldrh	r2, [r3, #0]
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	3b01      	subs	r3, #1
 8000e56:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000e58:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000e5a:	895b      	ldrh	r3, [r3, #10]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fe9f 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e70:	615a      	str	r2, [r3, #20]
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000e90:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e96:	611a      	str	r2, [r3, #16]
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	4a22      	ldr	r2, [pc, #136]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	60d3      	str	r3, [r2, #12]
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	615a      	str	r2, [r3, #20]
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eba:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000ebe:	899b      	ldrh	r3, [r3, #12]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fe6d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed4:	615a      	str	r2, [r3, #20]
 8000ed6:	88bb      	ldrh	r3, [r7, #4]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	615a      	str	r2, [r3, #20]
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	88bb      	ldrh	r3, [r7, #4]
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	60d3      	str	r3, [r2, #12]
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1e:	611a      	str	r2, [r3, #16]
}
 8000f20:	e1d2      	b.n	80012c8 <LCD_SetCursor+0x584>
 8000f22:	bf00      	nop
 8000f24:	2000020c 	.word	0x2000020c
 8000f28:	40011000 	.word	0x40011000
 8000f2c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000f30:	4b99      	ldr	r3, [pc, #612]	; (8001198 <LCD_SetCursor+0x454>)
 8000f32:	889b      	ldrh	r3, [r3, #4]
 8000f34:	f641 1263 	movw	r2, #6499	; 0x1963
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	f040 8133 	bne.w	80011a4 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000f3e:	4b96      	ldr	r3, [pc, #600]	; (8001198 <LCD_SetCursor+0x454>)
 8000f40:	799b      	ldrb	r3, [r3, #6]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d163      	bne.n	800100e <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000f46:	4b94      	ldr	r3, [pc, #592]	; (8001198 <LCD_SetCursor+0x454>)
 8000f48:	881a      	ldrh	r2, [r3, #0]
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	3b01      	subs	r3, #1
 8000f52:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000f54:	4b90      	ldr	r3, [pc, #576]	; (8001198 <LCD_SetCursor+0x454>)
 8000f56:	895b      	ldrh	r3, [r3, #10]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe21 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000f5e:	4b8f      	ldr	r3, [pc, #572]	; (800119c <LCD_SetCursor+0x458>)
 8000f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	4b8d      	ldr	r3, [pc, #564]	; (800119c <LCD_SetCursor+0x458>)
 8000f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	4b8c      	ldr	r3, [pc, #560]	; (80011a0 <LCD_SetCursor+0x45c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	4b89      	ldr	r3, [pc, #548]	; (800119c <LCD_SetCursor+0x458>)
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	4b88      	ldr	r3, [pc, #544]	; (800119c <LCD_SetCursor+0x458>)
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	4b86      	ldr	r3, [pc, #536]	; (800119c <LCD_SetCursor+0x458>)
 8000f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f86:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000f88:	4b84      	ldr	r3, [pc, #528]	; (800119c <LCD_SetCursor+0x458>)
 8000f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	4b82      	ldr	r3, [pc, #520]	; (800119c <LCD_SetCursor+0x458>)
 8000f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f96:	615a      	str	r2, [r3, #20]
 8000f98:	4b81      	ldr	r3, [pc, #516]	; (80011a0 <LCD_SetCursor+0x45c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	4b7f      	ldr	r3, [pc, #508]	; (800119c <LCD_SetCursor+0x458>)
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	4b7d      	ldr	r3, [pc, #500]	; (800119c <LCD_SetCursor+0x458>)
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	4b7c      	ldr	r3, [pc, #496]	; (800119c <LCD_SetCursor+0x458>)
 8000fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000fb2:	4b7a      	ldr	r3, [pc, #488]	; (800119c <LCD_SetCursor+0x458>)
 8000fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb8:	611a      	str	r2, [r3, #16]
 8000fba:	4b78      	ldr	r3, [pc, #480]	; (800119c <LCD_SetCursor+0x458>)
 8000fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b75      	ldr	r3, [pc, #468]	; (80011a0 <LCD_SetCursor+0x45c>)
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	4b73      	ldr	r3, [pc, #460]	; (800119c <LCD_SetCursor+0x458>)
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	4b72      	ldr	r3, [pc, #456]	; (800119c <LCD_SetCursor+0x458>)
 8000fd4:	2280      	movs	r2, #128	; 0x80
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	4b70      	ldr	r3, [pc, #448]	; (800119c <LCD_SetCursor+0x458>)
 8000fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fde:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000fe0:	4b6e      	ldr	r3, [pc, #440]	; (800119c <LCD_SetCursor+0x458>)
 8000fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	4b6c      	ldr	r3, [pc, #432]	; (800119c <LCD_SetCursor+0x458>)
 8000fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	4a6b      	ldr	r2, [pc, #428]	; (80011a0 <LCD_SetCursor+0x45c>)
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	60d3      	str	r3, [r2, #12]
 8000ff8:	4b68      	ldr	r3, [pc, #416]	; (800119c <LCD_SetCursor+0x458>)
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	4b67      	ldr	r3, [pc, #412]	; (800119c <LCD_SetCursor+0x458>)
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	4b65      	ldr	r3, [pc, #404]	; (800119c <LCD_SetCursor+0x458>)
 8001006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	e061      	b.n	80010d2 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 800100e:	4b62      	ldr	r3, [pc, #392]	; (8001198 <LCD_SetCursor+0x454>)
 8001010:	895b      	ldrh	r3, [r3, #10]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fdc4 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8001018:	4b60      	ldr	r3, [pc, #384]	; (800119c <LCD_SetCursor+0x458>)
 800101a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	4b5e      	ldr	r3, [pc, #376]	; (800119c <LCD_SetCursor+0x458>)
 8001022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b5c      	ldr	r3, [pc, #368]	; (80011a0 <LCD_SetCursor+0x45c>)
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	4b5a      	ldr	r3, [pc, #360]	; (800119c <LCD_SetCursor+0x458>)
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	615a      	str	r2, [r3, #20]
 8001038:	4b58      	ldr	r3, [pc, #352]	; (800119c <LCD_SetCursor+0x458>)
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	611a      	str	r2, [r3, #16]
 800103e:	4b57      	ldr	r3, [pc, #348]	; (800119c <LCD_SetCursor+0x458>)
 8001040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001044:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8001046:	4b55      	ldr	r3, [pc, #340]	; (800119c <LCD_SetCursor+0x458>)
 8001048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104c:	611a      	str	r2, [r3, #16]
 800104e:	4b53      	ldr	r3, [pc, #332]	; (800119c <LCD_SetCursor+0x458>)
 8001050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001054:	615a      	str	r2, [r3, #20]
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	4a51      	ldr	r2, [pc, #324]	; (80011a0 <LCD_SetCursor+0x45c>)
 800105a:	b2db      	uxtb	r3, r3
 800105c:	60d3      	str	r3, [r2, #12]
 800105e:	4b4f      	ldr	r3, [pc, #316]	; (800119c <LCD_SetCursor+0x458>)
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	4b4d      	ldr	r3, [pc, #308]	; (800119c <LCD_SetCursor+0x458>)
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	611a      	str	r2, [r3, #16]
 800106a:	4b4c      	ldr	r3, [pc, #304]	; (800119c <LCD_SetCursor+0x458>)
 800106c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001070:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001072:	4b4a      	ldr	r3, [pc, #296]	; (800119c <LCD_SetCursor+0x458>)
 8001074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001078:	611a      	str	r2, [r3, #16]
 800107a:	4b48      	ldr	r3, [pc, #288]	; (800119c <LCD_SetCursor+0x458>)
 800107c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	4b45      	ldr	r3, [pc, #276]	; (8001198 <LCD_SetCursor+0x454>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	3b01      	subs	r3, #1
 8001088:	121a      	asrs	r2, r3, #8
 800108a:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <LCD_SetCursor+0x45c>)
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	4b43      	ldr	r3, [pc, #268]	; (800119c <LCD_SetCursor+0x458>)
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	4b41      	ldr	r3, [pc, #260]	; (800119c <LCD_SetCursor+0x458>)
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	4b40      	ldr	r3, [pc, #256]	; (800119c <LCD_SetCursor+0x458>)
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80010a2:	4b3e      	ldr	r3, [pc, #248]	; (800119c <LCD_SetCursor+0x458>)
 80010a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	4b3c      	ldr	r3, [pc, #240]	; (800119c <LCD_SetCursor+0x458>)
 80010ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	4b39      	ldr	r3, [pc, #228]	; (8001198 <LCD_SetCursor+0x454>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	4a39      	ldr	r2, [pc, #228]	; (80011a0 <LCD_SetCursor+0x45c>)
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	60d3      	str	r3, [r2, #12]
 80010be:	4b37      	ldr	r3, [pc, #220]	; (800119c <LCD_SetCursor+0x458>)
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	615a      	str	r2, [r3, #20]
 80010c4:	4b35      	ldr	r3, [pc, #212]	; (800119c <LCD_SetCursor+0x458>)
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <LCD_SetCursor+0x458>)
 80010cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <LCD_SetCursor+0x454>)
 80010d4:	899b      	ldrh	r3, [r3, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fd62 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <LCD_SetCursor+0x458>)
 80010de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <LCD_SetCursor+0x458>)
 80010e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	88bb      	ldrh	r3, [r7, #4]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <LCD_SetCursor+0x45c>)
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	4b29      	ldr	r3, [pc, #164]	; (800119c <LCD_SetCursor+0x458>)
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <LCD_SetCursor+0x458>)
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <LCD_SetCursor+0x458>)
 8001104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001108:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <LCD_SetCursor+0x458>)
 800110c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	4b22      	ldr	r3, [pc, #136]	; (800119c <LCD_SetCursor+0x458>)
 8001114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001118:	615a      	str	r2, [r3, #20]
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <LCD_SetCursor+0x45c>)
 800111e:	b2db      	uxtb	r3, r3
 8001120:	60d3      	str	r3, [r2, #12]
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <LCD_SetCursor+0x458>)
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	615a      	str	r2, [r3, #20]
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <LCD_SetCursor+0x458>)
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <LCD_SetCursor+0x458>)
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <LCD_SetCursor+0x458>)
 8001138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <LCD_SetCursor+0x458>)
 8001140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <LCD_SetCursor+0x454>)
 8001148:	885b      	ldrh	r3, [r3, #2]
 800114a:	3b01      	subs	r3, #1
 800114c:	121a      	asrs	r2, r3, #8
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <LCD_SetCursor+0x45c>)
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <LCD_SetCursor+0x458>)
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	615a      	str	r2, [r3, #20]
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <LCD_SetCursor+0x458>)
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	611a      	str	r2, [r3, #16]
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <LCD_SetCursor+0x458>)
 8001160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001164:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <LCD_SetCursor+0x458>)
 8001168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116c:	611a      	str	r2, [r3, #16]
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <LCD_SetCursor+0x458>)
 8001170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <LCD_SetCursor+0x454>)
 8001178:	885b      	ldrh	r3, [r3, #2]
 800117a:	3b01      	subs	r3, #1
 800117c:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <LCD_SetCursor+0x45c>)
 800117e:	b2db      	uxtb	r3, r3
 8001180:	60d3      	str	r3, [r2, #12]
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <LCD_SetCursor+0x458>)
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <LCD_SetCursor+0x458>)
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	4b03      	ldr	r3, [pc, #12]	; (800119c <LCD_SetCursor+0x458>)
 8001190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001194:	611a      	str	r2, [r3, #16]
}
 8001196:	e097      	b.n	80012c8 <LCD_SetCursor+0x584>
 8001198:	2000020c 	.word	0x2000020c
 800119c:	40011000 	.word	0x40011000
 80011a0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 80011a4:	4b4a      	ldr	r3, [pc, #296]	; (80012d0 <LCD_SetCursor+0x58c>)
 80011a6:	889b      	ldrh	r3, [r3, #4]
 80011a8:	f245 5210 	movw	r2, #21776	; 0x5510
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d172      	bne.n	8001296 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 80011b0:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <LCD_SetCursor+0x58c>)
 80011b2:	895b      	ldrh	r3, [r3, #10]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fcf3 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 80011ba:	4b46      	ldr	r3, [pc, #280]	; (80012d4 <LCD_SetCursor+0x590>)
 80011bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <LCD_SetCursor+0x590>)
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <LCD_SetCursor+0x594>)
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <LCD_SetCursor+0x590>)
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	4b3e      	ldr	r3, [pc, #248]	; (80012d4 <LCD_SetCursor+0x590>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <LCD_SetCursor+0x590>)
 80011e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80011e8:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <LCD_SetCursor+0x58c>)
 80011ea:	895b      	ldrh	r3, [r3, #10]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fcd5 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <LCD_SetCursor+0x590>)
 80011f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fc:	611a      	str	r2, [r3, #16]
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <LCD_SetCursor+0x590>)
 8001200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4a33      	ldr	r2, [pc, #204]	; (80012d8 <LCD_SetCursor+0x594>)
 800120a:	b2db      	uxtb	r3, r3
 800120c:	60d3      	str	r3, [r2, #12]
 800120e:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <LCD_SetCursor+0x590>)
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <LCD_SetCursor+0x590>)
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <LCD_SetCursor+0x590>)
 800121c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001220:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <LCD_SetCursor+0x58c>)
 8001224:	899b      	ldrh	r3, [r3, #12]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fcba 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800122c:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <LCD_SetCursor+0x590>)
 800122e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <LCD_SetCursor+0x590>)
 8001236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <LCD_SetCursor+0x594>)
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <LCD_SetCursor+0x590>)
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	615a      	str	r2, [r3, #20]
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <LCD_SetCursor+0x590>)
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <LCD_SetCursor+0x590>)
 8001254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001258:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <LCD_SetCursor+0x58c>)
 800125c:	899b      	ldrh	r3, [r3, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fc9c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <LCD_SetCursor+0x590>)
 800126a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <LCD_SetCursor+0x590>)
 8001272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <LCD_SetCursor+0x594>)
 800127c:	b2db      	uxtb	r3, r3
 800127e:	60d3      	str	r3, [r2, #12]
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <LCD_SetCursor+0x590>)
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	615a      	str	r2, [r3, #20]
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <LCD_SetCursor+0x590>)
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <LCD_SetCursor+0x590>)
 800128e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001292:	611a      	str	r2, [r3, #16]
}
 8001294:	e018      	b.n	80012c8 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <LCD_SetCursor+0x58c>)
 8001298:	799b      	ldrb	r3, [r3, #6]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d106      	bne.n	80012ac <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <LCD_SetCursor+0x58c>)
 80012a0:	881a      	ldrh	r2, [r3, #0]
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	3b01      	subs	r3, #1
 80012aa:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <LCD_SetCursor+0x58c>)
 80012ae:	895b      	ldrh	r3, [r3, #10]
 80012b0:	88fa      	ldrh	r2, [r7, #6]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fcff 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <LCD_SetCursor+0x58c>)
 80012bc:	899b      	ldrh	r3, [r3, #12]
 80012be:	88ba      	ldrh	r2, [r7, #4]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fcf8 	bl	8000cb8 <LCD_WriteReg>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000020c 	.word	0x2000020c
 80012d4:	40011000 	.word	0x40011000
 80012d8:	40010c00 	.word	0x40010c00

080012dc <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80012ee:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80012f0:	799b      	ldrb	r3, [r3, #6]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10b      	bne.n	800130e <LCD_Scan_Dir+0x32>
 80012f6:	4b76      	ldr	r3, [pc, #472]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80012f8:	889b      	ldrh	r3, [r3, #4]
 80012fa:	f646 0204 	movw	r2, #26628	; 0x6804
 80012fe:	4293      	cmp	r3, r2
 8001300:	d005      	beq.n	800130e <LCD_Scan_Dir+0x32>
 8001302:	4b73      	ldr	r3, [pc, #460]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001304:	889b      	ldrh	r3, [r3, #4]
 8001306:	f641 1263 	movw	r2, #6499	; 0x1963
 800130a:	4293      	cmp	r3, r2
 800130c:	d109      	bne.n	8001322 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 800130e:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001310:	799b      	ldrb	r3, [r3, #6]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d134      	bne.n	8001380 <LCD_Scan_Dir+0xa4>
 8001316:	4b6e      	ldr	r3, [pc, #440]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001318:	889b      	ldrh	r3, [r3, #4]
 800131a:	f641 1263 	movw	r2, #6499	; 0x1963
 800131e:	4293      	cmp	r3, r2
 8001320:	d12e      	bne.n	8001380 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b07      	cmp	r3, #7
 8001326:	d82c      	bhi.n	8001382 <LCD_Scan_Dir+0xa6>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <LCD_Scan_Dir+0x54>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	08001351 	.word	0x08001351
 8001334:	08001357 	.word	0x08001357
 8001338:	0800135d 	.word	0x0800135d
 800133c:	08001363 	.word	0x08001363
 8001340:	08001369 	.word	0x08001369
 8001344:	0800136f 	.word	0x0800136f
 8001348:	08001375 	.word	0x08001375
 800134c:	0800137b 	.word	0x0800137b
		{
		case 0:
			dir = 6;
 8001350:	2306      	movs	r3, #6
 8001352:	71fb      	strb	r3, [r7, #7]
			break;
 8001354:	e015      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 1:
			dir = 7;
 8001356:	2307      	movs	r3, #7
 8001358:	71fb      	strb	r3, [r7, #7]
			break;
 800135a:	e012      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 2:
			dir = 4;
 800135c:	2304      	movs	r3, #4
 800135e:	71fb      	strb	r3, [r7, #7]
			break;
 8001360:	e00f      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 3:
			dir = 5;
 8001362:	2305      	movs	r3, #5
 8001364:	71fb      	strb	r3, [r7, #7]
			break;
 8001366:	e00c      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 4:
			dir = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	71fb      	strb	r3, [r7, #7]
			break;
 800136c:	e009      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 5:
			dir = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	71fb      	strb	r3, [r7, #7]
			break;
 8001372:	e006      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 6:
			dir = 3;
 8001374:	2303      	movs	r3, #3
 8001376:	71fb      	strb	r3, [r7, #7]
			break;
 8001378:	e003      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 7:
			dir = 2;
 800137a:	2302      	movs	r3, #2
 800137c:	71fb      	strb	r3, [r7, #7]
			break;
 800137e:	e000      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		}
	}
 8001380:	bf00      	nop
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8001382:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001384:	889b      	ldrh	r3, [r3, #4]
 8001386:	f249 3241 	movw	r2, #37697	; 0x9341
 800138a:	4293      	cmp	r3, r2
 800138c:	d018      	beq.n	80013c0 <LCD_Scan_Dir+0xe4>
 800138e:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001390:	889b      	ldrh	r3, [r3, #4]
 8001392:	f646 0204 	movw	r2, #26628	; 0x6804
 8001396:	4293      	cmp	r3, r2
 8001398:	d012      	beq.n	80013c0 <LCD_Scan_Dir+0xe4>
 800139a:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 800139c:	889b      	ldrh	r3, [r3, #4]
 800139e:	f245 3210 	movw	r2, #21264	; 0x5310
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00c      	beq.n	80013c0 <LCD_Scan_Dir+0xe4>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 80013a6:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80013a8:	889b      	ldrh	r3, [r3, #4]
 80013aa:	f245 5210 	movw	r2, #21776	; 0x5510
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d006      	beq.n	80013c0 <LCD_Scan_Dir+0xe4>
 80013b2:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80013b4:	889b      	ldrh	r3, [r3, #4]
 80013b6:	f641 1263 	movw	r2, #6499	; 0x1963
 80013ba:	4293      	cmp	r3, r2
 80013bc:	f040 824f 	bne.w	800185e <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	d835      	bhi.n	8001432 <LCD_Scan_Dir+0x156>
 80013c6:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <LCD_Scan_Dir+0xf0>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	08001433 	.word	0x08001433
 80013d0:	080013ed 	.word	0x080013ed
 80013d4:	080013f7 	.word	0x080013f7
 80013d8:	08001401 	.word	0x08001401
 80013dc:	0800140b 	.word	0x0800140b
 80013e0:	08001415 	.word	0x08001415
 80013e4:	0800141f 	.word	0x0800141f
 80013e8:	08001429 	.word	0x08001429
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f2:	81fb      	strh	r3, [r7, #14]
			break;
 80013f4:	e01d      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013fc:	81fb      	strh	r3, [r7, #14]
			break;
 80013fe:	e018      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001406:	81fb      	strh	r3, [r7, #14]
			break;
 8001408:	e013      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800140a:	89fb      	ldrh	r3, [r7, #14]
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	81fb      	strh	r3, [r7, #14]
			break;
 8001412:	e00e      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800141a:	81fb      	strh	r3, [r7, #14]
			break;
 800141c:	e009      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001424:	81fb      	strh	r3, [r7, #14]
			break;
 8001426:	e004      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800142e:	81fb      	strh	r3, [r7, #14]
			break;
 8001430:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 8001432:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001434:	889b      	ldrh	r3, [r3, #4]
 8001436:	f245 5210 	movw	r2, #21776	; 0x5510
 800143a:	4293      	cmp	r3, r2
 800143c:	d103      	bne.n	8001446 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800143e:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001442:	81bb      	strh	r3, [r7, #12]
 8001444:	e001      	b.n	800144a <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001446:	2336      	movs	r3, #54	; 0x36
 8001448:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 800144c:	889b      	ldrh	r3, [r3, #4]
 800144e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001452:	4293      	cmp	r3, r2
 8001454:	d00f      	beq.n	8001476 <LCD_Scan_Dir+0x19a>
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001458:	889b      	ldrh	r3, [r3, #4]
 800145a:	f245 5210 	movw	r2, #21776	; 0x5510
 800145e:	4293      	cmp	r3, r2
 8001460:	d009      	beq.n	8001476 <LCD_Scan_Dir+0x19a>
 8001462:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001464:	889b      	ldrh	r3, [r3, #4]
 8001466:	f641 1263 	movw	r2, #6499	; 0x1963
 800146a:	4293      	cmp	r3, r2
 800146c:	d003      	beq.n	8001476 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001478:	889b      	ldrh	r3, [r3, #4]
 800147a:	f646 0204 	movw	r2, #26628	; 0x6804
 800147e:	4293      	cmp	r3, r2
 8001480:	d103      	bne.n	800148a <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 8001482:	89fb      	ldrh	r3, [r7, #14]
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800148a:	89fa      	ldrh	r2, [r7, #14]
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fc11 	bl	8000cb8 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001498:	889b      	ldrh	r3, [r3, #4]
 800149a:	f641 1263 	movw	r2, #6499	; 0x1963
 800149e:	4293      	cmp	r3, r2
 80014a0:	d028      	beq.n	80014f4 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 80014a2:	89fb      	ldrh	r3, [r7, #14]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014ae:	881a      	ldrh	r2, [r3, #0]
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014b2:	885b      	ldrh	r3, [r3, #2]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d21d      	bcs.n	80014f4 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014c0:	885a      	ldrh	r2, [r3, #2]
 80014c2:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014c4:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80014c6:	4a02      	ldr	r2, [pc, #8]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014c8:	897b      	ldrh	r3, [r7, #10]
 80014ca:	8053      	strh	r3, [r2, #2]
 80014cc:	e012      	b.n	80014f4 <LCD_Scan_Dir+0x218>
 80014ce:	bf00      	nop
 80014d0:	2000020c 	.word	0x2000020c
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80014d4:	4b7f      	ldr	r3, [pc, #508]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014d6:	881a      	ldrh	r2, [r3, #0]
 80014d8:	4b7e      	ldr	r3, [pc, #504]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014da:	885b      	ldrh	r3, [r3, #2]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d909      	bls.n	80014f4 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80014e0:	4b7c      	ldr	r3, [pc, #496]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80014e6:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014e8:	885a      	ldrh	r2, [r3, #2]
 80014ea:	4b7a      	ldr	r3, [pc, #488]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014ec:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80014ee:	4a79      	ldr	r2, [pc, #484]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014f0:	897b      	ldrh	r3, [r7, #10]
 80014f2:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80014f4:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014f6:	889b      	ldrh	r3, [r3, #4]
 80014f8:	f245 5210 	movw	r2, #21776	; 0x5510
 80014fc:	4293      	cmp	r3, r2
 80014fe:	f040 80ef 	bne.w	80016e0 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001502:	4b74      	ldr	r3, [pc, #464]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001504:	895b      	ldrh	r3, [r3, #10]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fb4a 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800150c:	4b72      	ldr	r3, [pc, #456]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800150e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	4b70      	ldr	r3, [pc, #448]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	4b6f      	ldr	r3, [pc, #444]	; (80016dc <LCD_Scan_Dir+0x400>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	4b6d      	ldr	r3, [pc, #436]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	615a      	str	r2, [r3, #20]
 8001528:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001534:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001538:	895b      	ldrh	r3, [r3, #10]
 800153a:	3301      	adds	r3, #1
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fb2e 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001544:	4b64      	ldr	r3, [pc, #400]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154a:	611a      	str	r2, [r3, #16]
 800154c:	4b62      	ldr	r3, [pc, #392]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800154e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	4b61      	ldr	r3, [pc, #388]	; (80016dc <LCD_Scan_Dir+0x400>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	4b5f      	ldr	r3, [pc, #380]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800156e:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001570:	895b      	ldrh	r3, [r3, #10]
 8001572:	3302      	adds	r3, #2
 8001574:	b29b      	uxth	r3, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fb12 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800157c:	4b56      	ldr	r3, [pc, #344]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800157e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	4b54      	ldr	r3, [pc, #336]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800158a:	615a      	str	r2, [r3, #20]
 800158c:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	121a      	asrs	r2, r3, #8
 8001594:	4b51      	ldr	r3, [pc, #324]	; (80016dc <LCD_Scan_Dir+0x400>)
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	4b4f      	ldr	r3, [pc, #316]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	615a      	str	r2, [r3, #20]
 800159e:	4b4e      	ldr	r3, [pc, #312]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015aa:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 80015ac:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80015ae:	895b      	ldrh	r3, [r3, #10]
 80015b0:	3303      	adds	r3, #3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff faf3 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80015ba:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c0:	611a      	str	r2, [r3, #16]
 80015c2:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c8:	615a      	str	r2, [r3, #20]
 80015ca:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	4a42      	ldr	r2, [pc, #264]	; (80016dc <LCD_Scan_Dir+0x400>)
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	60d3      	str	r3, [r2, #12]
 80015d6:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	4b3e      	ldr	r3, [pc, #248]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80015ea:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80015ec:	899b      	ldrh	r3, [r3, #12]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fad6 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fa:	611a      	str	r2, [r3, #16]
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	4b35      	ldr	r3, [pc, #212]	; (80016dc <LCD_Scan_Dir+0x400>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001620:	899b      	ldrh	r3, [r3, #12]
 8001622:	3301      	adds	r3, #1
 8001624:	b29b      	uxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff faba 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800162e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163a:	615a      	str	r2, [r3, #20]
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <LCD_Scan_Dir+0x400>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	615a      	str	r2, [r3, #20]
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001654:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001658:	899b      	ldrh	r3, [r3, #12]
 800165a:	3302      	adds	r3, #2
 800165c:	b29b      	uxth	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fa9e 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800166e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001676:	885b      	ldrh	r3, [r3, #2]
 8001678:	3b01      	subs	r3, #1
 800167a:	121a      	asrs	r2, r3, #8
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <LCD_Scan_Dir+0x400>)
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001688:	2280      	movs	r2, #128	; 0x80
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800168e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001692:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001696:	899b      	ldrh	r3, [r3, #12]
 8001698:	3303      	adds	r3, #3
 800169a:	b29b      	uxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fa7f 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80016b4:	885b      	ldrh	r3, [r3, #2]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	4a08      	ldr	r2, [pc, #32]	; (80016dc <LCD_Scan_Dir+0x400>)
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	60d3      	str	r3, [r2, #12]
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d0:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80016d2:	e10b      	b.n	80018ec <LCD_Scan_Dir+0x610>
 80016d4:	2000020c 	.word	0x2000020c
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80016e0:	4b84      	ldr	r3, [pc, #528]	; (80018f4 <LCD_Scan_Dir+0x618>)
 80016e2:	895b      	ldrh	r3, [r3, #10]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fa5b 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80016ea:	4b83      	ldr	r3, [pc, #524]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80016ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80016f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	4b80      	ldr	r3, [pc, #512]	; (80018fc <LCD_Scan_Dir+0x620>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	4b7d      	ldr	r3, [pc, #500]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	615a      	str	r2, [r3, #20]
 8001706:	4b7c      	ldr	r3, [pc, #496]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800170e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001712:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001714:	4b78      	ldr	r3, [pc, #480]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	4b76      	ldr	r3, [pc, #472]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800171e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	4b75      	ldr	r3, [pc, #468]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	4b73      	ldr	r3, [pc, #460]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	4b71      	ldr	r3, [pc, #452]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800173c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800173e:	4b6e      	ldr	r3, [pc, #440]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	4b6c      	ldr	r3, [pc, #432]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	4b69      	ldr	r3, [pc, #420]	; (80018f4 <LCD_Scan_Dir+0x618>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	3b01      	subs	r3, #1
 8001754:	121a      	asrs	r2, r3, #8
 8001756:	4b69      	ldr	r3, [pc, #420]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	4b64      	ldr	r3, [pc, #400]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800176e:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001774:	611a      	str	r2, [r3, #16]
 8001776:	4b60      	ldr	r3, [pc, #384]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177c:	615a      	str	r2, [r3, #20]
 800177e:	4b5d      	ldr	r3, [pc, #372]	; (80018f4 <LCD_Scan_Dir+0x618>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	3b01      	subs	r3, #1
 8001784:	4a5d      	ldr	r2, [pc, #372]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001786:	b2db      	uxtb	r3, r3
 8001788:	60d3      	str	r3, [r2, #12]
 800178a:	4b5b      	ldr	r3, [pc, #364]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	611a      	str	r2, [r3, #16]
 8001796:	4b58      	ldr	r3, [pc, #352]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800179e:	4b55      	ldr	r3, [pc, #340]	; (80018f4 <LCD_Scan_Dir+0x618>)
 80017a0:	899b      	ldrh	r3, [r3, #12]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f9fc 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80017a8:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	4b51      	ldr	r3, [pc, #324]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <LCD_Scan_Dir+0x620>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	4b4e      	ldr	r3, [pc, #312]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d8:	611a      	str	r2, [r3, #16]
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e0:	615a      	str	r2, [r3, #20]
 80017e2:	4b46      	ldr	r3, [pc, #280]	; (80018fc <LCD_Scan_Dir+0x620>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	611a      	str	r2, [r3, #16]
 80017f4:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fa:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80017fc:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <LCD_Scan_Dir+0x618>)
 800180e:	885b      	ldrh	r3, [r3, #2]
 8001810:	3b01      	subs	r3, #1
 8001812:	121a      	asrs	r2, r3, #8
 8001814:	4b39      	ldr	r3, [pc, #228]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	611a      	str	r2, [r3, #16]
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800182a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800182e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800183a:	615a      	str	r2, [r3, #20]
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <LCD_Scan_Dir+0x618>)
 800183e:	885b      	ldrh	r3, [r3, #2]
 8001840:	3b01      	subs	r3, #1
 8001842:	4a2e      	ldr	r2, [pc, #184]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001844:	b2db      	uxtb	r3, r3
 8001846:	60d3      	str	r3, [r2, #12]
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	615a      	str	r2, [r3, #20]
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	611a      	str	r2, [r3, #16]
 8001854:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185a:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800185c:	e046      	b.n	80018ec <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b07      	cmp	r3, #7
 8001862:	d836      	bhi.n	80018d2 <LCD_Scan_Dir+0x5f6>
 8001864:	a201      	add	r2, pc, #4	; (adr r2, 800186c <LCD_Scan_Dir+0x590>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	0800188d 	.word	0x0800188d
 8001870:	08001897 	.word	0x08001897
 8001874:	080018a1 	.word	0x080018a1
 8001878:	080018d3 	.word	0x080018d3
 800187c:	080018ab 	.word	0x080018ab
 8001880:	080018b5 	.word	0x080018b5
 8001884:	080018bf 	.word	0x080018bf
 8001888:	080018c9 	.word	0x080018c9
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 800188c:	89fb      	ldrh	r3, [r7, #14]
 800188e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001892:	81fb      	strh	r3, [r7, #14]
			break;
 8001894:	e01d      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	f043 0310 	orr.w	r3, r3, #16
 800189c:	81fb      	strh	r3, [r7, #14]
			break;
 800189e:	e018      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 80018a0:	89fb      	ldrh	r3, [r7, #14]
 80018a2:	f043 0320 	orr.w	r3, r3, #32
 80018a6:	81fb      	strh	r3, [r7, #14]
			break;
 80018a8:	e013      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 80018aa:	89fb      	ldrh	r3, [r7, #14]
 80018ac:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80018b0:	81fb      	strh	r3, [r7, #14]
			break;
 80018b2:	e00e      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 80018b4:	89fb      	ldrh	r3, [r7, #14]
 80018b6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80018ba:	81fb      	strh	r3, [r7, #14]
			break;
 80018bc:	e009      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	f043 0318 	orr.w	r3, r3, #24
 80018c4:	81fb      	strh	r3, [r7, #14]
			break;
 80018c6:	e004      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80018c8:	89fb      	ldrh	r3, [r7, #14]
 80018ca:	f043 0308 	orr.w	r3, r3, #8
 80018ce:	81fb      	strh	r3, [r7, #14]
			break;
 80018d0:	bf00      	nop
		}
		dirreg = 0X03;
 80018d2:	2303      	movs	r3, #3
 80018d4:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80018d6:	89fb      	ldrh	r3, [r7, #14]
 80018d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018dc:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80018de:	89fa      	ldrh	r2, [r7, #14]
 80018e0:	89bb      	ldrh	r3, [r7, #12]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff f9e7 	bl	8000cb8 <LCD_WriteReg>
	}
}
 80018ea:	bf00      	nop
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2000020c 	.word	0x2000020c
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40010c00 	.word	0x40010c00

08001900 <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	460b      	mov	r3, r1
 800190c:	80bb      	strh	r3, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001912:	4b75      	ldr	r3, [pc, #468]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001914:	889b      	ldrh	r3, [r3, #4]
 8001916:	f249 3241 	movw	r2, #37697	; 0x9341
 800191a:	4293      	cmp	r3, r2
 800191c:	d005      	beq.n	800192a <LCD_Fast_DrawPoint+0x2a>
 800191e:	4b72      	ldr	r3, [pc, #456]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001920:	889b      	ldrh	r3, [r3, #4]
 8001922:	f245 3210 	movw	r2, #21264	; 0x5310
 8001926:	4293      	cmp	r3, r2
 8001928:	d164      	bne.n	80019f4 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 800192a:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 800192c:	895b      	ldrh	r3, [r3, #10]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f936 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001934:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	4b6b      	ldr	r3, [pc, #428]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 800193e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b69      	ldr	r3, [pc, #420]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	4b67      	ldr	r3, [pc, #412]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	615a      	str	r2, [r3, #20]
 8001954:	4b65      	ldr	r3, [pc, #404]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	611a      	str	r2, [r3, #16]
 800195a:	4b64      	ldr	r3, [pc, #400]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 800195c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001960:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001962:	4b62      	ldr	r3, [pc, #392]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001968:	611a      	str	r2, [r3, #16]
 800196a:	4b60      	ldr	r3, [pc, #384]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 800196c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001970:	615a      	str	r2, [r3, #20]
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	4a5e      	ldr	r2, [pc, #376]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 8001976:	b2db      	uxtb	r3, r3
 8001978:	60d3      	str	r3, [r2, #12]
 800197a:	4b5c      	ldr	r3, [pc, #368]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001982:	2280      	movs	r2, #128	; 0x80
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	4b59      	ldr	r3, [pc, #356]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800198e:	4b56      	ldr	r3, [pc, #344]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001990:	899b      	ldrh	r3, [r3, #12]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f904 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001998:	4b54      	ldr	r3, [pc, #336]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 800199a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	4b52      	ldr	r3, [pc, #328]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a6:	615a      	str	r2, [r3, #20]
 80019a8:	88bb      	ldrh	r3, [r7, #4]
 80019aa:	0a1b      	lsrs	r3, r3, #8
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	4b4e      	ldr	r3, [pc, #312]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019ba:	2280      	movs	r2, #128	; 0x80
 80019bc:	611a      	str	r2, [r3, #16]
 80019be:	4b4b      	ldr	r3, [pc, #300]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80019c6:	4b49      	ldr	r3, [pc, #292]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d4:	615a      	str	r2, [r3, #20]
 80019d6:	88bb      	ldrh	r3, [r7, #4]
 80019d8:	4a45      	ldr	r2, [pc, #276]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	60d3      	str	r3, [r2, #12]
 80019de:	4b43      	ldr	r3, [pc, #268]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	615a      	str	r2, [r3, #20]
 80019e4:	4b41      	ldr	r3, [pc, #260]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	611a      	str	r2, [r3, #16]
 80019ea:	4b40      	ldr	r3, [pc, #256]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	e1e6      	b.n	8001dc2 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 80019f4:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 80019f6:	889b      	ldrh	r3, [r3, #4]
 80019f8:	f245 5210 	movw	r2, #21776	; 0x5510
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d179      	bne.n	8001af4 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001a02:	895b      	ldrh	r3, [r3, #10]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff f8cb 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a10:	611a      	str	r2, [r3, #16]
 8001a12:	4b36      	ldr	r3, [pc, #216]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a18:	615a      	str	r2, [r3, #20]
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	4b31      	ldr	r3, [pc, #196]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	615a      	str	r2, [r3, #20]
 8001a2a:	4b30      	ldr	r3, [pc, #192]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	611a      	str	r2, [r3, #16]
 8001a30:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a36:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001a3a:	895b      	ldrh	r3, [r3, #10]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f8ad 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4c:	611a      	str	r2, [r3, #16]
 8001a4e:	4b27      	ldr	r3, [pc, #156]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a54:	615a      	str	r2, [r3, #20]
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	4a25      	ldr	r2, [pc, #148]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	60d3      	str	r3, [r2, #12]
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	615a      	str	r2, [r3, #20]
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	611a      	str	r2, [r3, #16]
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a70:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001a74:	899b      	ldrh	r3, [r3, #12]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f892 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a82:	611a      	str	r2, [r3, #16]
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8a:	615a      	str	r2, [r3, #20]
 8001a8c:	88bb      	ldrh	r3, [r7, #4]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	615a      	str	r2, [r3, #20]
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	611a      	str	r2, [r3, #16]
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001aac:	899b      	ldrh	r3, [r3, #12]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f874 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001abe:	611a      	str	r2, [r3, #16]
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac6:	615a      	str	r2, [r3, #20]
 8001ac8:	88bb      	ldrh	r3, [r7, #4]
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	60d3      	str	r3, [r2, #12]
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	615a      	str	r2, [r3, #20]
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	611a      	str	r2, [r3, #16]
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	e16d      	b.n	8001dc2 <LCD_Fast_DrawPoint+0x4c2>
 8001ae6:	bf00      	nop
 8001ae8:	2000020c 	.word	0x2000020c
 8001aec:	40011000 	.word	0x40011000
 8001af0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001af4:	4b68      	ldr	r3, [pc, #416]	; (8001c98 <LCD_Fast_DrawPoint+0x398>)
 8001af6:	889b      	ldrh	r3, [r3, #4]
 8001af8:	f641 1263 	movw	r2, #6499	; 0x1963
 8001afc:	4293      	cmp	r3, r2
 8001afe:	f040 80d1 	bne.w	8001ca4 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8001b02:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <LCD_Fast_DrawPoint+0x398>)
 8001b04:	799b      	ldrb	r3, [r3, #6]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <LCD_Fast_DrawPoint+0x398>)
 8001b0c:	881a      	ldrh	r2, [r3, #0]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001b18:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <LCD_Fast_DrawPoint+0x398>)
 8001b1a:	895b      	ldrh	r3, [r3, #10]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff f83f 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001b22:	4b5e      	ldr	r3, [pc, #376]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b28:	611a      	str	r2, [r3, #16]
 8001b2a:	4b5c      	ldr	r3, [pc, #368]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b30:	615a      	str	r2, [r3, #20]
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b3e:	2280      	movs	r2, #128	; 0x80
 8001b40:	615a      	str	r2, [r3, #20]
 8001b42:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	4b54      	ldr	r3, [pc, #336]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001b50:	4b52      	ldr	r3, [pc, #328]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b56:	611a      	str	r2, [r3, #16]
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5e:	615a      	str	r2, [r3, #20]
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	4a4f      	ldr	r2, [pc, #316]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	60d3      	str	r3, [r2, #12]
 8001b68:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	615a      	str	r2, [r3, #20]
 8001b6e:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	611a      	str	r2, [r3, #16]
 8001b74:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001b7c:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b82:	611a      	str	r2, [r3, #16]
 8001b84:	4b45      	ldr	r3, [pc, #276]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8a:	615a      	str	r2, [r3, #20]
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001baa:	4b3c      	ldr	r3, [pc, #240]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb8:	615a      	str	r2, [r3, #20]
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	4a38      	ldr	r2, [pc, #224]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	60d3      	str	r3, [r2, #12]
 8001bc2:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	611a      	str	r2, [r3, #16]
 8001bce:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001bd6:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <LCD_Fast_DrawPoint+0x398>)
 8001bd8:	899b      	ldrh	r3, [r3, #12]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe ffe0 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001be0:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bee:	615a      	str	r2, [r3, #20]
 8001bf0:	88bb      	ldrh	r3, [r7, #4]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	615a      	str	r2, [r3, #20]
 8001c00:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	611a      	str	r2, [r3, #16]
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c14:	611a      	str	r2, [r3, #16]
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	88bb      	ldrh	r3, [r7, #4]
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	60d3      	str	r3, [r2, #12]
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	615a      	str	r2, [r3, #20]
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	611a      	str	r2, [r3, #16]
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001c3a:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c40:	611a      	str	r2, [r3, #16]
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c48:	615a      	str	r2, [r3, #20]
 8001c4a:	88bb      	ldrh	r3, [r7, #4]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	615a      	str	r2, [r3, #20]
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c5c:	2280      	movs	r2, #128	; 0x80
 8001c5e:	611a      	str	r2, [r3, #16]
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c6e:	611a      	str	r2, [r3, #16]
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c76:	615a      	str	r2, [r3, #20]
 8001c78:	88bb      	ldrh	r3, [r7, #4]
 8001c7a:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	60d3      	str	r3, [r2, #12]
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c82:	2280      	movs	r2, #128	; 0x80
 8001c84:	615a      	str	r2, [r3, #20]
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	611a      	str	r2, [r3, #16]
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c92:	611a      	str	r2, [r3, #16]
 8001c94:	e095      	b.n	8001dc2 <LCD_Fast_DrawPoint+0x4c2>
 8001c96:	bf00      	nop
 8001c98:	2000020c 	.word	0x2000020c
 8001c9c:	40011000 	.word	0x40011000
 8001ca0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001ca4:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001ca6:	889b      	ldrh	r3, [r3, #4]
 8001ca8:	f646 0204 	movw	r2, #26628	; 0x6804
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d16f      	bne.n	8001d90 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001cb0:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001cb2:	799b      	ldrb	r3, [r3, #6]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001cb8:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001cba:	881a      	ldrh	r2, [r3, #0]
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001cc6:	4b56      	ldr	r3, [pc, #344]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001cc8:	895b      	ldrh	r3, [r3, #10]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe ff68 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001cd0:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd6:	611a      	str	r2, [r3, #16]
 8001cd8:	4b52      	ldr	r3, [pc, #328]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cde:	615a      	str	r2, [r3, #20]
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <LCD_Fast_DrawPoint+0x528>)
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	4b4e      	ldr	r3, [pc, #312]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	615a      	str	r2, [r3, #20]
 8001cf0:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001cf2:	2280      	movs	r2, #128	; 0x80
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001cfe:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d04:	611a      	str	r2, [r3, #16]
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0c:	615a      	str	r2, [r3, #20]
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	4a45      	ldr	r2, [pc, #276]	; (8001e28 <LCD_Fast_DrawPoint+0x528>)
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	60d3      	str	r3, [r2, #12]
 8001d16:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	615a      	str	r2, [r3, #20]
 8001d1c:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	611a      	str	r2, [r3, #16]
 8001d22:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d28:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001d2c:	899b      	ldrh	r3, [r3, #12]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe ff36 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001d34:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3a:	611a      	str	r2, [r3, #16]
 8001d3c:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d42:	615a      	str	r2, [r3, #20]
 8001d44:	88bb      	ldrh	r3, [r7, #4]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <LCD_Fast_DrawPoint+0x528>)
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d50:	2280      	movs	r2, #128	; 0x80
 8001d52:	615a      	str	r2, [r3, #20]
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	611a      	str	r2, [r3, #16]
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d60:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001d62:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d70:	615a      	str	r2, [r3, #20]
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	4a2c      	ldr	r2, [pc, #176]	; (8001e28 <LCD_Fast_DrawPoint+0x528>)
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	60d3      	str	r3, [r2, #12]
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	615a      	str	r2, [r3, #20]
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	611a      	str	r2, [r3, #16]
 8001d86:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8c:	611a      	str	r2, [r3, #16]
 8001d8e:	e018      	b.n	8001dc2 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001d92:	799b      	ldrb	r3, [r3, #6]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001d9a:	881a      	ldrh	r2, [r3, #0]
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	3b01      	subs	r3, #1
 8001da4:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001da8:	895b      	ldrh	r3, [r3, #10]
 8001daa:	88fa      	ldrh	r2, [r7, #6]
 8001dac:	4611      	mov	r1, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe ff82 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001db6:	899b      	ldrh	r3, [r3, #12]
 8001db8:	88ba      	ldrh	r2, [r7, #4]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe ff7b 	bl	8000cb8 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001dc2:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc8:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001dd4:	891a      	ldrh	r2, [r3, #8]
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <LCD_Fast_DrawPoint+0x528>)
 8001dd8:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001ddc:	2280      	movs	r2, #128	; 0x80
 8001dde:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001de2:	2280      	movs	r2, #128	; 0x80
 8001de4:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dec:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001df4:	611a      	str	r2, [r3, #16]
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dfc:	615a      	str	r2, [r3, #20]
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <LCD_Fast_DrawPoint+0x528>)
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	60d3      	str	r3, [r2, #12]
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	615a      	str	r2, [r3, #20]
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e16:	611a      	str	r2, [r3, #16]
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000020c 	.word	0x2000020c
 8001e24:	40011000 	.word	0x40011000
 8001e28:	40010c00 	.word	0x40010c00
 8001e2c:	00000000 	.word	0x00000000

08001e30 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001e3a:	20be      	movs	r0, #190	; 0xbe
 8001e3c:	f7fe feb0 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001e40:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e46:	611a      	str	r2, [r3, #16]
 8001e48:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e4e:	615a      	str	r2, [r3, #20]
 8001e50:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <LCD_SSD_BackLightSet+0x144>)
 8001e52:	2205      	movs	r2, #5
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	615a      	str	r2, [r3, #20]
 8001e5c:	4b44      	ldr	r3, [pc, #272]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e5e:	2280      	movs	r2, #128	; 0x80
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e68:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001e6a:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e70:	611a      	str	r2, [r3, #16]
 8001e72:	4b3f      	ldr	r3, [pc, #252]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e78:	615a      	str	r2, [r3, #20]
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb2d 	bl	80004dc <__aeabi_i2d>
 8001e82:	a339      	add	r3, pc, #228	; (adr r3, 8001f68 <LCD_SSD_BackLightSet+0x138>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fb92 	bl	80005b0 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4c38      	ldr	r4, [pc, #224]	; (8001f74 <LCD_SSD_BackLightSet+0x144>)
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f7fe fe63 	bl	8000b60 <__aeabi_d2uiz>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	60e3      	str	r3, [r4, #12]
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ea0:	2280      	movs	r2, #128	; 0x80
 8001ea2:	615a      	str	r2, [r3, #20]
 8001ea4:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ea6:	2280      	movs	r2, #128	; 0x80
 8001ea8:	611a      	str	r2, [r3, #16]
 8001eaa:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001eb2:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb8:	611a      	str	r2, [r3, #16]
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec0:	615a      	str	r2, [r3, #20]
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <LCD_SSD_BackLightSet+0x144>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	615a      	str	r2, [r3, #20]
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ed0:	2280      	movs	r2, #128	; 0x80
 8001ed2:	611a      	str	r2, [r3, #16]
 8001ed4:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eda:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee2:	611a      	str	r2, [r3, #16]
 8001ee4:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eea:	615a      	str	r2, [r3, #20]
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <LCD_SSD_BackLightSet+0x144>)
 8001eee:	22ff      	movs	r2, #255	; 0xff
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	615a      	str	r2, [r3, #20]
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f04:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f0c:	611a      	str	r2, [r3, #16]
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	615a      	str	r2, [r3, #20]
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <LCD_SSD_BackLightSet+0x144>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f1e:	2280      	movs	r2, #128	; 0x80
 8001f20:	615a      	str	r2, [r3, #20]
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	611a      	str	r2, [r3, #16]
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f2e:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f36:	611a      	str	r2, [r3, #16]
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f3e:	615a      	str	r2, [r3, #20]
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <LCD_SSD_BackLightSet+0x144>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	615a      	str	r2, [r3, #20]
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f4e:	2280      	movs	r2, #128	; 0x80
 8001f50:	611a      	str	r2, [r3, #16]
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f58:	611a      	str	r2, [r3, #16]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd90      	pop	{r4, r7, pc}
 8001f62:	bf00      	nop
 8001f64:	f3af 8000 	nop.w
 8001f68:	66666666 	.word	0x66666666
 8001f6c:	40046666 	.word	0x40046666
 8001f70:	40011000 	.word	0x40011000
 8001f74:	40010c00 	.word	0x40010c00

08001f78 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d177      	bne.n	8002078 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001f88:	4b80      	ldr	r3, [pc, #512]	; (800218c <LCD_Display_Dir+0x214>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001f8e:	4b7f      	ldr	r3, [pc, #508]	; (800218c <LCD_Display_Dir+0x214>)
 8001f90:	22f0      	movs	r2, #240	; 0xf0
 8001f92:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001f94:	4b7d      	ldr	r3, [pc, #500]	; (800218c <LCD_Display_Dir+0x214>)
 8001f96:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f9a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f9c:	4b7b      	ldr	r3, [pc, #492]	; (800218c <LCD_Display_Dir+0x214>)
 8001f9e:	889b      	ldrh	r3, [r3, #4]
 8001fa0:	f249 3241 	movw	r2, #37697	; 0x9341
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00b      	beq.n	8001fc0 <LCD_Display_Dir+0x48>
 8001fa8:	4b78      	ldr	r3, [pc, #480]	; (800218c <LCD_Display_Dir+0x214>)
 8001faa:	889b      	ldrh	r3, [r3, #4]
 8001fac:	f646 0204 	movw	r2, #26628	; 0x6804
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d005      	beq.n	8001fc0 <LCD_Display_Dir+0x48>
 8001fb4:	4b75      	ldr	r3, [pc, #468]	; (800218c <LCD_Display_Dir+0x214>)
 8001fb6:	889b      	ldrh	r3, [r3, #4]
 8001fb8:	f245 3210 	movw	r2, #21264	; 0x5310
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d11e      	bne.n	8001ffe <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001fc0:	4b72      	ldr	r3, [pc, #456]	; (800218c <LCD_Display_Dir+0x214>)
 8001fc2:	222c      	movs	r2, #44	; 0x2c
 8001fc4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001fc6:	4b71      	ldr	r3, [pc, #452]	; (800218c <LCD_Display_Dir+0x214>)
 8001fc8:	222a      	movs	r2, #42	; 0x2a
 8001fca:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001fcc:	4b6f      	ldr	r3, [pc, #444]	; (800218c <LCD_Display_Dir+0x214>)
 8001fce:	222b      	movs	r2, #43	; 0x2b
 8001fd0:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001fd2:	4b6e      	ldr	r3, [pc, #440]	; (800218c <LCD_Display_Dir+0x214>)
 8001fd4:	889b      	ldrh	r3, [r3, #4]
 8001fd6:	f646 0204 	movw	r2, #26628	; 0x6804
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d006      	beq.n	8001fec <LCD_Display_Dir+0x74>
 8001fde:	4b6b      	ldr	r3, [pc, #428]	; (800218c <LCD_Display_Dir+0x214>)
 8001fe0:	889b      	ldrh	r3, [r3, #4]
 8001fe2:	f245 3210 	movw	r2, #21264	; 0x5310
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	f040 80c7 	bne.w	800217a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001fec:	4b67      	ldr	r3, [pc, #412]	; (800218c <LCD_Display_Dir+0x214>)
 8001fee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ff2:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001ff4:	4b65      	ldr	r3, [pc, #404]	; (800218c <LCD_Display_Dir+0x214>)
 8001ff6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ffa:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001ffc:	e0bd      	b.n	800217a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <LCD_Display_Dir+0x214>)
 8002000:	889b      	ldrh	r3, [r3, #4]
 8002002:	f245 5210 	movw	r2, #21776	; 0x5510
 8002006:	4293      	cmp	r3, r2
 8002008:	d114      	bne.n	8002034 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 800200a:	4b60      	ldr	r3, [pc, #384]	; (800218c <LCD_Display_Dir+0x214>)
 800200c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002010:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8002012:	4b5e      	ldr	r3, [pc, #376]	; (800218c <LCD_Display_Dir+0x214>)
 8002014:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002018:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 800201a:	4b5c      	ldr	r3, [pc, #368]	; (800218c <LCD_Display_Dir+0x214>)
 800201c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002020:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8002022:	4b5a      	ldr	r3, [pc, #360]	; (800218c <LCD_Display_Dir+0x214>)
 8002024:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002028:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 800202a:	4b58      	ldr	r3, [pc, #352]	; (800218c <LCD_Display_Dir+0x214>)
 800202c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002030:	805a      	strh	r2, [r3, #2]
 8002032:	e0a3      	b.n	800217c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8002034:	4b55      	ldr	r3, [pc, #340]	; (800218c <LCD_Display_Dir+0x214>)
 8002036:	889b      	ldrh	r3, [r3, #4]
 8002038:	f641 1263 	movw	r2, #6499	; 0x1963
 800203c:	4293      	cmp	r3, r2
 800203e:	d111      	bne.n	8002064 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8002040:	4b52      	ldr	r3, [pc, #328]	; (800218c <LCD_Display_Dir+0x214>)
 8002042:	222c      	movs	r2, #44	; 0x2c
 8002044:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8002046:	4b51      	ldr	r3, [pc, #324]	; (800218c <LCD_Display_Dir+0x214>)
 8002048:	222b      	movs	r2, #43	; 0x2b
 800204a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 800204c:	4b4f      	ldr	r3, [pc, #316]	; (800218c <LCD_Display_Dir+0x214>)
 800204e:	222a      	movs	r2, #42	; 0x2a
 8002050:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8002052:	4b4e      	ldr	r3, [pc, #312]	; (800218c <LCD_Display_Dir+0x214>)
 8002054:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002058:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 800205a:	4b4c      	ldr	r3, [pc, #304]	; (800218c <LCD_Display_Dir+0x214>)
 800205c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002060:	805a      	strh	r2, [r3, #2]
 8002062:	e08b      	b.n	800217c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8002064:	4b49      	ldr	r3, [pc, #292]	; (800218c <LCD_Display_Dir+0x214>)
 8002066:	2222      	movs	r2, #34	; 0x22
 8002068:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 800206a:	4b48      	ldr	r3, [pc, #288]	; (800218c <LCD_Display_Dir+0x214>)
 800206c:	2220      	movs	r2, #32
 800206e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8002070:	4b46      	ldr	r3, [pc, #280]	; (800218c <LCD_Display_Dir+0x214>)
 8002072:	2221      	movs	r2, #33	; 0x21
 8002074:	819a      	strh	r2, [r3, #12]
 8002076:	e081      	b.n	800217c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8002078:	4b44      	ldr	r3, [pc, #272]	; (800218c <LCD_Display_Dir+0x214>)
 800207a:	2201      	movs	r2, #1
 800207c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 800207e:	4b43      	ldr	r3, [pc, #268]	; (800218c <LCD_Display_Dir+0x214>)
 8002080:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002084:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8002086:	4b41      	ldr	r3, [pc, #260]	; (800218c <LCD_Display_Dir+0x214>)
 8002088:	22f0      	movs	r2, #240	; 0xf0
 800208a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800208c:	4b3f      	ldr	r3, [pc, #252]	; (800218c <LCD_Display_Dir+0x214>)
 800208e:	889b      	ldrh	r3, [r3, #4]
 8002090:	f249 3241 	movw	r2, #37697	; 0x9341
 8002094:	4293      	cmp	r3, r2
 8002096:	d005      	beq.n	80020a4 <LCD_Display_Dir+0x12c>
 8002098:	4b3c      	ldr	r3, [pc, #240]	; (800218c <LCD_Display_Dir+0x214>)
 800209a:	889b      	ldrh	r3, [r3, #4]
 800209c:	f245 3210 	movw	r2, #21264	; 0x5310
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d109      	bne.n	80020b8 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 80020a4:	4b39      	ldr	r3, [pc, #228]	; (800218c <LCD_Display_Dir+0x214>)
 80020a6:	222c      	movs	r2, #44	; 0x2c
 80020a8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 80020aa:	4b38      	ldr	r3, [pc, #224]	; (800218c <LCD_Display_Dir+0x214>)
 80020ac:	222a      	movs	r2, #42	; 0x2a
 80020ae:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <LCD_Display_Dir+0x214>)
 80020b2:	222b      	movs	r2, #43	; 0x2b
 80020b4:	819a      	strh	r2, [r3, #12]
 80020b6:	e04b      	b.n	8002150 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 80020b8:	4b34      	ldr	r3, [pc, #208]	; (800218c <LCD_Display_Dir+0x214>)
 80020ba:	889b      	ldrh	r3, [r3, #4]
 80020bc:	f646 0204 	movw	r2, #26628	; 0x6804
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d109      	bne.n	80020d8 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 80020c4:	4b31      	ldr	r3, [pc, #196]	; (800218c <LCD_Display_Dir+0x214>)
 80020c6:	222c      	movs	r2, #44	; 0x2c
 80020c8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 80020ca:	4b30      	ldr	r3, [pc, #192]	; (800218c <LCD_Display_Dir+0x214>)
 80020cc:	222b      	movs	r2, #43	; 0x2b
 80020ce:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 80020d0:	4b2e      	ldr	r3, [pc, #184]	; (800218c <LCD_Display_Dir+0x214>)
 80020d2:	222a      	movs	r2, #42	; 0x2a
 80020d4:	819a      	strh	r2, [r3, #12]
 80020d6:	e03b      	b.n	8002150 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 80020d8:	4b2c      	ldr	r3, [pc, #176]	; (800218c <LCD_Display_Dir+0x214>)
 80020da:	889b      	ldrh	r3, [r3, #4]
 80020dc:	f245 5210 	movw	r2, #21776	; 0x5510
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d114      	bne.n	800210e <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 80020e4:	4b29      	ldr	r3, [pc, #164]	; (800218c <LCD_Display_Dir+0x214>)
 80020e6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80020ea:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <LCD_Display_Dir+0x214>)
 80020ee:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80020f2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <LCD_Display_Dir+0x214>)
 80020f6:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80020fa:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <LCD_Display_Dir+0x214>)
 80020fe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002102:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <LCD_Display_Dir+0x214>)
 8002106:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800210a:	805a      	strh	r2, [r3, #2]
 800210c:	e020      	b.n	8002150 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 800210e:	4b1f      	ldr	r3, [pc, #124]	; (800218c <LCD_Display_Dir+0x214>)
 8002110:	889b      	ldrh	r3, [r3, #4]
 8002112:	f641 1263 	movw	r2, #6499	; 0x1963
 8002116:	4293      	cmp	r3, r2
 8002118:	d111      	bne.n	800213e <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <LCD_Display_Dir+0x214>)
 800211c:	222c      	movs	r2, #44	; 0x2c
 800211e:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <LCD_Display_Dir+0x214>)
 8002122:	222a      	movs	r2, #42	; 0x2a
 8002124:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <LCD_Display_Dir+0x214>)
 8002128:	222b      	movs	r2, #43	; 0x2b
 800212a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 800212c:	4b17      	ldr	r3, [pc, #92]	; (800218c <LCD_Display_Dir+0x214>)
 800212e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002132:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <LCD_Display_Dir+0x214>)
 8002136:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800213a:	805a      	strh	r2, [r3, #2]
 800213c:	e008      	b.n	8002150 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <LCD_Display_Dir+0x214>)
 8002140:	2222      	movs	r2, #34	; 0x22
 8002142:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <LCD_Display_Dir+0x214>)
 8002146:	2221      	movs	r2, #33	; 0x21
 8002148:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <LCD_Display_Dir+0x214>)
 800214c:	2220      	movs	r2, #32
 800214e:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <LCD_Display_Dir+0x214>)
 8002152:	889b      	ldrh	r3, [r3, #4]
 8002154:	f646 0204 	movw	r2, #26628	; 0x6804
 8002158:	4293      	cmp	r3, r2
 800215a:	d005      	beq.n	8002168 <LCD_Display_Dir+0x1f0>
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <LCD_Display_Dir+0x214>)
 800215e:	889b      	ldrh	r3, [r3, #4]
 8002160:	f245 3210 	movw	r2, #21264	; 0x5310
 8002164:	4293      	cmp	r3, r2
 8002166:	d109      	bne.n	800217c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <LCD_Display_Dir+0x214>)
 800216a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800216e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <LCD_Display_Dir+0x214>)
 8002172:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002176:	805a      	strh	r2, [r3, #2]
 8002178:	e000      	b.n	800217c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800217a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 800217c:	2000      	movs	r0, #0
 800217e:	f7ff f8ad 	bl	80012dc <LCD_Scan_Dir>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2000020c 	.word	0x2000020c

08002190 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8002196:	4b90      	ldr	r3, [pc, #576]	; (80023d8 <LCD_Init+0x248>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	4a8f      	ldr	r2, [pc, #572]	; (80023d8 <LCD_Init+0x248>)
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	6193      	str	r3, [r2, #24]
 80021a2:	4b8d      	ldr	r3, [pc, #564]	; (80023d8 <LCD_Init+0x248>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 80021ae:	4b8a      	ldr	r3, [pc, #552]	; (80023d8 <LCD_Init+0x248>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	4a89      	ldr	r2, [pc, #548]	; (80023d8 <LCD_Init+0x248>)
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	6193      	str	r3, [r2, #24]
 80021ba:	4b87      	ldr	r3, [pc, #540]	; (80023d8 <LCD_Init+0x248>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 80021c6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80021ca:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 80021cc:	2301      	movs	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 80021d0:	2301      	movs	r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 80021d4:	2303      	movs	r3, #3
 80021d6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	4619      	mov	r1, r3
 80021de:	487f      	ldr	r0, [pc, #508]	; (80023dc <LCD_Init+0x24c>)
 80021e0:	f005 fde4 	bl	8007dac <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 80021e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	4619      	mov	r1, r3
 80021f0:	487b      	ldr	r0, [pc, #492]	; (80023e0 <LCD_Init+0x250>)
 80021f2:	f005 fddb 	bl	8007dac <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 80021f6:	2032      	movs	r0, #50	; 0x32
 80021f8:	f004 fdfc 	bl	8006df4 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 80021fc:	2101      	movs	r1, #1
 80021fe:	2000      	movs	r0, #0
 8002200:	f7fe fd5a 	bl	8000cb8 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8002204:	2032      	movs	r0, #50	; 0x32
 8002206:	f004 fdf5 	bl	8006df4 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 800220a:	2000      	movs	r0, #0
 800220c:	f7fe fd7e 	bl	8000d0c <LCD_ReadReg>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	4b73      	ldr	r3, [pc, #460]	; (80023e4 <LCD_Init+0x254>)
 8002216:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002218:	4b72      	ldr	r3, [pc, #456]	; (80023e4 <LCD_Init+0x254>)
 800221a:	889b      	ldrh	r3, [r3, #4]
 800221c:	2bfe      	cmp	r3, #254	; 0xfe
 800221e:	d90b      	bls.n	8002238 <LCD_Init+0xa8>
 8002220:	4b70      	ldr	r3, [pc, #448]	; (80023e4 <LCD_Init+0x254>)
 8002222:	889b      	ldrh	r3, [r3, #4]
 8002224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002228:	4293      	cmp	r3, r2
 800222a:	d005      	beq.n	8002238 <LCD_Init+0xa8>
 800222c:	4b6d      	ldr	r3, [pc, #436]	; (80023e4 <LCD_Init+0x254>)
 800222e:	889b      	ldrh	r3, [r3, #4]
 8002230:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8002234:	f040 80c8 	bne.w	80023c8 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002238:	20d3      	movs	r0, #211	; 0xd3
 800223a:	f7fe fcb1 	bl	8000ba0 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 800223e:	f7fe fcf7 	bl	8000c30 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8002242:	f7fe fcf5 	bl	8000c30 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8002246:	f7fe fcf3 	bl	8000c30 <LCD_RD_DATA>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <LCD_Init+0x254>)
 8002250:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8002252:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <LCD_Init+0x254>)
 8002254:	889b      	ldrh	r3, [r3, #4]
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	b29a      	uxth	r2, r3
 800225a:	4b62      	ldr	r3, [pc, #392]	; (80023e4 <LCD_Init+0x254>)
 800225c:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 800225e:	f7fe fce7 	bl	8000c30 <LCD_RD_DATA>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	4b5f      	ldr	r3, [pc, #380]	; (80023e4 <LCD_Init+0x254>)
 8002268:	889b      	ldrh	r3, [r3, #4]
 800226a:	4313      	orrs	r3, r2
 800226c:	b29a      	uxth	r2, r3
 800226e:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <LCD_Init+0x254>)
 8002270:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8002272:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <LCD_Init+0x254>)
 8002274:	889b      	ldrh	r3, [r3, #4]
 8002276:	f249 3241 	movw	r2, #37697	; 0x9341
 800227a:	4293      	cmp	r3, r2
 800227c:	f000 80a4 	beq.w	80023c8 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002280:	20bf      	movs	r0, #191	; 0xbf
 8002282:	f7fe fc8d 	bl	8000ba0 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8002286:	f7fe fcd3 	bl	8000c30 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 800228a:	f7fe fcd1 	bl	8000c30 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 800228e:	f7fe fccf 	bl	8000c30 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8002292:	f7fe fccd 	bl	8000c30 <LCD_RD_DATA>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	4b52      	ldr	r3, [pc, #328]	; (80023e4 <LCD_Init+0x254>)
 800229c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 800229e:	4b51      	ldr	r3, [pc, #324]	; (80023e4 <LCD_Init+0x254>)
 80022a0:	889b      	ldrh	r3, [r3, #4]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	4b4f      	ldr	r3, [pc, #316]	; (80023e4 <LCD_Init+0x254>)
 80022a8:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 80022aa:	f7fe fcc1 	bl	8000c30 <LCD_RD_DATA>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <LCD_Init+0x254>)
 80022b4:	889b      	ldrh	r3, [r3, #4]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <LCD_Init+0x254>)
 80022bc:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 80022be:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <LCD_Init+0x254>)
 80022c0:	889b      	ldrh	r3, [r3, #4]
 80022c2:	f646 0204 	movw	r2, #26628	; 0x6804
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d07e      	beq.n	80023c8 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80022ca:	20d4      	movs	r0, #212	; 0xd4
 80022cc:	f7fe fc68 	bl	8000ba0 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80022d0:	f7fe fcae 	bl	8000c30 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80022d4:	f7fe fcac 	bl	8000c30 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80022d8:	f7fe fcaa 	bl	8000c30 <LCD_RD_DATA>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <LCD_Init+0x254>)
 80022e2:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80022e4:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <LCD_Init+0x254>)
 80022e6:	889b      	ldrh	r3, [r3, #4]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <LCD_Init+0x254>)
 80022ee:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80022f0:	f7fe fc9e 	bl	8000c30 <LCD_RD_DATA>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <LCD_Init+0x254>)
 80022fa:	889b      	ldrh	r3, [r3, #4]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <LCD_Init+0x254>)
 8002302:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8002304:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <LCD_Init+0x254>)
 8002306:	889b      	ldrh	r3, [r3, #4]
 8002308:	f245 3210 	movw	r2, #21264	; 0x5310
 800230c:	4293      	cmp	r3, r2
 800230e:	d05b      	beq.n	80023c8 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8002310:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8002314:	f7fe fc44 	bl	8000ba0 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002318:	f7fe fc8a 	bl	8000c30 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 800231c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002320:	f7fe fc3e 	bl	8000ba0 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8002324:	f7fe fc84 	bl	8000c30 <LCD_RD_DATA>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <LCD_Init+0x254>)
 800232e:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002330:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <LCD_Init+0x254>)
 8002332:	889b      	ldrh	r3, [r3, #4]
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	b29a      	uxth	r2, r3
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <LCD_Init+0x254>)
 800233a:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 800233c:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002340:	f7fe fc2e 	bl	8000ba0 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8002344:	f7fe fc74 	bl	8000c30 <LCD_RD_DATA>
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <LCD_Init+0x254>)
 800234e:	889b      	ldrh	r3, [r3, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	b29a      	uxth	r2, r3
 8002354:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <LCD_Init+0x254>)
 8002356:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <LCD_Init+0x254>)
 800235a:	889b      	ldrh	r3, [r3, #4]
 800235c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002360:	d103      	bne.n	800236a <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <LCD_Init+0x254>)
 8002364:	f245 5210 	movw	r2, #21776	; 0x5510
 8002368:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <LCD_Init+0x254>)
 800236c:	889b      	ldrh	r3, [r3, #4]
 800236e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002372:	4293      	cmp	r3, r2
 8002374:	d028      	beq.n	80023c8 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8002376:	20a1      	movs	r0, #161	; 0xa1
 8002378:	f7fe fc12 	bl	8000ba0 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 800237c:	f7fe fc58 	bl	8000c30 <LCD_RD_DATA>
 8002380:	4603      	mov	r3, r0
 8002382:	461a      	mov	r2, r3
 8002384:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <LCD_Init+0x254>)
 8002386:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002388:	f7fe fc52 	bl	8000c30 <LCD_RD_DATA>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <LCD_Init+0x254>)
 8002392:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <LCD_Init+0x254>)
 8002396:	889b      	ldrh	r3, [r3, #4]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	b29a      	uxth	r2, r3
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <LCD_Init+0x254>)
 800239e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 80023a0:	f7fe fc46 	bl	8000c30 <LCD_RD_DATA>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <LCD_Init+0x254>)
 80023aa:	889b      	ldrh	r3, [r3, #4]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <LCD_Init+0x254>)
 80023b2:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <LCD_Init+0x254>)
 80023b6:	889b      	ldrh	r3, [r3, #4]
 80023b8:	f245 7261 	movw	r2, #22369	; 0x5761
 80023bc:	4293      	cmp	r3, r2
 80023be:	d103      	bne.n	80023c8 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <LCD_Init+0x254>)
 80023c2:	f641 1263 	movw	r2, #6499	; 0x1963
 80023c6:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <LCD_Init+0x254>)
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	f249 3241 	movw	r2, #37697	; 0x9341
 80023d0:	4293      	cmp	r3, r2
 80023d2:	f040 811f 	bne.w	8002614 <LCD_Init+0x484>
 80023d6:	e007      	b.n	80023e8 <LCD_Init+0x258>
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40011000 	.word	0x40011000
 80023e0:	40010c00 	.word	0x40010c00
 80023e4:	2000020c 	.word	0x2000020c
			{
		LCD_WR_REG(0xCF);
 80023e8:	20cf      	movs	r0, #207	; 0xcf
 80023ea:	f7fe fbd9 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fbfa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80023f4:	20c1      	movs	r0, #193	; 0xc1
 80023f6:	f7fe fbf7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80023fa:	2030      	movs	r0, #48	; 0x30
 80023fc:	f7fe fbf4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8002400:	20ed      	movs	r0, #237	; 0xed
 8002402:	f7fe fbcd 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8002406:	2064      	movs	r0, #100	; 0x64
 8002408:	f7fe fbee 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800240c:	2003      	movs	r0, #3
 800240e:	f7fe fbeb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8002412:	2012      	movs	r0, #18
 8002414:	f7fe fbe8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002418:	2081      	movs	r0, #129	; 0x81
 800241a:	f7fe fbe5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 800241e:	20e8      	movs	r0, #232	; 0xe8
 8002420:	f7fe fbbe 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8002424:	2085      	movs	r0, #133	; 0x85
 8002426:	f7fe fbdf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800242a:	2010      	movs	r0, #16
 800242c:	f7fe fbdc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002430:	207a      	movs	r0, #122	; 0x7a
 8002432:	f7fe fbd9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8002436:	20cb      	movs	r0, #203	; 0xcb
 8002438:	f7fe fbb2 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 800243c:	2039      	movs	r0, #57	; 0x39
 800243e:	f7fe fbd3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002442:	202c      	movs	r0, #44	; 0x2c
 8002444:	f7fe fbd0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fbcd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800244e:	2034      	movs	r0, #52	; 0x34
 8002450:	f7fe fbca 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002454:	2002      	movs	r0, #2
 8002456:	f7fe fbc7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 800245a:	20f7      	movs	r0, #247	; 0xf7
 800245c:	f7fe fba0 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002460:	2020      	movs	r0, #32
 8002462:	f7fe fbc1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8002466:	20ea      	movs	r0, #234	; 0xea
 8002468:	f7fe fb9a 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800246c:	2000      	movs	r0, #0
 800246e:	f7fe fbbb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002472:	2000      	movs	r0, #0
 8002474:	f7fe fbb8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002478:	20c0      	movs	r0, #192	; 0xc0
 800247a:	f7fe fb91 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 800247e:	201b      	movs	r0, #27
 8002480:	f7fe fbb2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8002484:	20c1      	movs	r0, #193	; 0xc1
 8002486:	f7fe fb8b 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 800248a:	2001      	movs	r0, #1
 800248c:	f7fe fbac 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002490:	20c5      	movs	r0, #197	; 0xc5
 8002492:	f7fe fb85 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8002496:	2030      	movs	r0, #48	; 0x30
 8002498:	f7fe fba6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 800249c:	2030      	movs	r0, #48	; 0x30
 800249e:	f7fe fba3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 80024a2:	20c7      	movs	r0, #199	; 0xc7
 80024a4:	f7fe fb7c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 80024a8:	20b7      	movs	r0, #183	; 0xb7
 80024aa:	f7fe fb9d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 80024ae:	2036      	movs	r0, #54	; 0x36
 80024b0:	f7fe fb76 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 80024b4:	2048      	movs	r0, #72	; 0x48
 80024b6:	f7fe fb97 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 80024ba:	203a      	movs	r0, #58	; 0x3a
 80024bc:	f7fe fb70 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 80024c0:	2055      	movs	r0, #85	; 0x55
 80024c2:	f7fe fb91 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 80024c6:	20b1      	movs	r0, #177	; 0xb1
 80024c8:	f7fe fb6a 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7fe fb8b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80024d2:	201a      	movs	r0, #26
 80024d4:	f7fe fb88 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80024d8:	20b6      	movs	r0, #182	; 0xb6
 80024da:	f7fe fb61 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80024de:	200a      	movs	r0, #10
 80024e0:	f7fe fb82 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80024e4:	20a2      	movs	r0, #162	; 0xa2
 80024e6:	f7fe fb7f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80024ea:	20f2      	movs	r0, #242	; 0xf2
 80024ec:	f7fe fb58 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7fe fb79 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80024f6:	2026      	movs	r0, #38	; 0x26
 80024f8:	f7fe fb52 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7fe fb73 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8002502:	20e0      	movs	r0, #224	; 0xe0
 8002504:	f7fe fb4c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002508:	200f      	movs	r0, #15
 800250a:	f7fe fb6d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800250e:	202a      	movs	r0, #42	; 0x2a
 8002510:	f7fe fb6a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8002514:	2028      	movs	r0, #40	; 0x28
 8002516:	f7fe fb67 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800251a:	2008      	movs	r0, #8
 800251c:	f7fe fb64 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002520:	200e      	movs	r0, #14
 8002522:	f7fe fb61 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002526:	2008      	movs	r0, #8
 8002528:	f7fe fb5e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800252c:	2054      	movs	r0, #84	; 0x54
 800252e:	f7fe fb5b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8002532:	20a9      	movs	r0, #169	; 0xa9
 8002534:	f7fe fb58 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002538:	2043      	movs	r0, #67	; 0x43
 800253a:	f7fe fb55 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 800253e:	200a      	movs	r0, #10
 8002540:	f7fe fb52 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002544:	200f      	movs	r0, #15
 8002546:	f7fe fb4f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800254a:	2000      	movs	r0, #0
 800254c:	f7fe fb4c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe fb49 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002556:	2000      	movs	r0, #0
 8002558:	f7fe fb46 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800255c:	2000      	movs	r0, #0
 800255e:	f7fe fb43 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8002562:	20e1      	movs	r0, #225	; 0xe1
 8002564:	f7fe fb1c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002568:	2000      	movs	r0, #0
 800256a:	f7fe fb3d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 800256e:	2015      	movs	r0, #21
 8002570:	f7fe fb3a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002574:	2017      	movs	r0, #23
 8002576:	f7fe fb37 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 800257a:	2007      	movs	r0, #7
 800257c:	f7fe fb34 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002580:	2011      	movs	r0, #17
 8002582:	f7fe fb31 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8002586:	2006      	movs	r0, #6
 8002588:	f7fe fb2e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 800258c:	202b      	movs	r0, #43	; 0x2b
 800258e:	f7fe fb2b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002592:	2056      	movs	r0, #86	; 0x56
 8002594:	f7fe fb28 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002598:	203c      	movs	r0, #60	; 0x3c
 800259a:	f7fe fb25 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800259e:	2005      	movs	r0, #5
 80025a0:	f7fe fb22 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80025a4:	2010      	movs	r0, #16
 80025a6:	f7fe fb1f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80025aa:	200f      	movs	r0, #15
 80025ac:	f7fe fb1c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80025b0:	203f      	movs	r0, #63	; 0x3f
 80025b2:	f7fe fb19 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80025b6:	203f      	movs	r0, #63	; 0x3f
 80025b8:	f7fe fb16 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80025bc:	200f      	movs	r0, #15
 80025be:	f7fe fb13 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 80025c2:	202b      	movs	r0, #43	; 0x2b
 80025c4:	f7fe faec 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7fe fb0d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe fb0a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7fe fb07 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80025da:	203f      	movs	r0, #63	; 0x3f
 80025dc:	f7fe fb04 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80025e0:	202a      	movs	r0, #42	; 0x2a
 80025e2:	f7fe fadd 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe fafe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7fe fafb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7fe faf8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80025f8:	20ef      	movs	r0, #239	; 0xef
 80025fa:	f7fe faf5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80025fe:	2011      	movs	r0, #17
 8002600:	f7fe face 	bl	8000ba0 <LCD_WR_REG>
		HAL_Delay(120);
 8002604:	2078      	movs	r0, #120	; 0x78
 8002606:	f004 fbf5 	bl	8006df4 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 800260a:	2029      	movs	r0, #41	; 0x29
 800260c:	f7fe fac8 	bl	8000ba0 <LCD_WR_REG>
 8002610:	f003 bcd8 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8002614:	4b58      	ldr	r3, [pc, #352]	; (8002778 <LCD_Init+0x5e8>)
 8002616:	889b      	ldrh	r3, [r3, #4]
 8002618:	f646 0204 	movw	r2, #26628	; 0x6804
 800261c:	4293      	cmp	r3, r2
 800261e:	f040 80ad 	bne.w	800277c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8002622:	2011      	movs	r0, #17
 8002624:	f7fe fabc 	bl	8000ba0 <LCD_WR_REG>
		HAL_Delay(20);
 8002628:	2014      	movs	r0, #20
 800262a:	f004 fbe3 	bl	8006df4 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 800262e:	20d0      	movs	r0, #208	; 0xd0
 8002630:	f7fe fab6 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8002634:	2007      	movs	r0, #7
 8002636:	f7fe fad7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 800263a:	2042      	movs	r0, #66	; 0x42
 800263c:	f7fe fad4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002640:	201d      	movs	r0, #29
 8002642:	f7fe fad1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8002646:	20d1      	movs	r0, #209	; 0xd1
 8002648:	f7fe faaa 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe facb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8002652:	201a      	movs	r0, #26
 8002654:	f7fe fac8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002658:	2009      	movs	r0, #9
 800265a:	f7fe fac5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 800265e:	20d2      	movs	r0, #210	; 0xd2
 8002660:	f7fe fa9e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002664:	2001      	movs	r0, #1
 8002666:	f7fe fabf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 800266a:	2022      	movs	r0, #34	; 0x22
 800266c:	f7fe fabc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002670:	20c0      	movs	r0, #192	; 0xc0
 8002672:	f7fe fa95 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8002676:	2010      	movs	r0, #16
 8002678:	f7fe fab6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 800267c:	203b      	movs	r0, #59	; 0x3b
 800267e:	f7fe fab3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002682:	2000      	movs	r0, #0
 8002684:	f7fe fab0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002688:	2002      	movs	r0, #2
 800268a:	f7fe faad 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 800268e:	2011      	movs	r0, #17
 8002690:	f7fe faaa 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8002694:	20c5      	movs	r0, #197	; 0xc5
 8002696:	f7fe fa83 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 800269a:	2003      	movs	r0, #3
 800269c:	f7fe faa4 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 80026a0:	20c8      	movs	r0, #200	; 0xc8
 80026a2:	f7fe fa7d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7fe fa9e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80026ac:	2025      	movs	r0, #37	; 0x25
 80026ae:	f7fe fa9b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 80026b2:	2021      	movs	r0, #33	; 0x21
 80026b4:	f7fe fa98 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80026b8:	2005      	movs	r0, #5
 80026ba:	f7fe fa95 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80026be:	2000      	movs	r0, #0
 80026c0:	f7fe fa92 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80026c4:	200a      	movs	r0, #10
 80026c6:	f7fe fa8f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80026ca:	2065      	movs	r0, #101	; 0x65
 80026cc:	f7fe fa8c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80026d0:	2025      	movs	r0, #37	; 0x25
 80026d2:	f7fe fa89 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80026d6:	2077      	movs	r0, #119	; 0x77
 80026d8:	f7fe fa86 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80026dc:	2050      	movs	r0, #80	; 0x50
 80026de:	f7fe fa83 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80026e2:	200f      	movs	r0, #15
 80026e4:	f7fe fa80 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe fa7d 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80026ee:	20f8      	movs	r0, #248	; 0xf8
 80026f0:	f7fe fa56 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7fe fa77 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80026fa:	20fe      	movs	r0, #254	; 0xfe
 80026fc:	f7fe fa50 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002700:	2000      	movs	r0, #0
 8002702:	f7fe fa71 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002706:	2002      	movs	r0, #2
 8002708:	f7fe fa6e 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 800270c:	2020      	movs	r0, #32
 800270e:	f7fe fa47 	bl	8000ba0 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002712:	2036      	movs	r0, #54	; 0x36
 8002714:	f7fe fa44 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002718:	2008      	movs	r0, #8
 800271a:	f7fe fa65 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 800271e:	203a      	movs	r0, #58	; 0x3a
 8002720:	f7fe fa3e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8002724:	2055      	movs	r0, #85	; 0x55
 8002726:	f7fe fa5f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 800272a:	202b      	movs	r0, #43	; 0x2b
 800272c:	f7fe fa38 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002730:	2000      	movs	r0, #0
 8002732:	f7fe fa59 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002736:	2000      	movs	r0, #0
 8002738:	f7fe fa56 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800273c:	2001      	movs	r0, #1
 800273e:	f7fe fa53 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8002742:	203f      	movs	r0, #63	; 0x3f
 8002744:	f7fe fa50 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002748:	202a      	movs	r0, #42	; 0x2a
 800274a:	f7fe fa29 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800274e:	2000      	movs	r0, #0
 8002750:	f7fe fa4a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002754:	2000      	movs	r0, #0
 8002756:	f7fe fa47 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800275a:	2001      	movs	r0, #1
 800275c:	f7fe fa44 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002760:	20df      	movs	r0, #223	; 0xdf
 8002762:	f7fe fa41 	bl	8000be8 <LCD_WR_DATAX>
		HAL_Delay(120);
 8002766:	2078      	movs	r0, #120	; 0x78
 8002768:	f004 fb44 	bl	8006df4 <HAL_Delay>
		LCD_WR_REG(0X29);
 800276c:	2029      	movs	r0, #41	; 0x29
 800276e:	f7fe fa17 	bl	8000ba0 <LCD_WR_REG>
 8002772:	f003 bc27 	b.w	8005fc4 <LCD_Init+0x3e34>
 8002776:	bf00      	nop
 8002778:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0x5310) {
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <LCD_Init+0x5fc>)
 800277e:	889b      	ldrh	r3, [r3, #4]
 8002780:	f245 3210 	movw	r2, #21264	; 0x5310
 8002784:	4293      	cmp	r3, r2
 8002786:	f040 877c 	bne.w	8003682 <LCD_Init+0x14f2>
 800278a:	e001      	b.n	8002790 <LCD_Init+0x600>
 800278c:	2000020c 	.word	0x2000020c
		LCD_WR_REG(0xED);
 8002790:	20ed      	movs	r0, #237	; 0xed
 8002792:	f7fe fa05 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002796:	2001      	movs	r0, #1
 8002798:	f7fe fa26 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 800279c:	20fe      	movs	r0, #254	; 0xfe
 800279e:	f7fe fa23 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 80027a2:	20ee      	movs	r0, #238	; 0xee
 80027a4:	f7fe f9fc 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 80027a8:	20de      	movs	r0, #222	; 0xde
 80027aa:	f7fe fa1d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80027ae:	2021      	movs	r0, #33	; 0x21
 80027b0:	f7fe fa1a 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 80027b4:	20f1      	movs	r0, #241	; 0xf1
 80027b6:	f7fe f9f3 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f7fe fa14 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80027c0:	20df      	movs	r0, #223	; 0xdf
 80027c2:	f7fe f9ed 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80027c6:	2010      	movs	r0, #16
 80027c8:	f7fe fa0e 	bl	8000be8 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80027cc:	20c4      	movs	r0, #196	; 0xc4
 80027ce:	f7fe f9e7 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80027d2:	208f      	movs	r0, #143	; 0x8f
 80027d4:	f7fe fa08 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80027d8:	20c6      	movs	r0, #198	; 0xc6
 80027da:	f7fe f9e1 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe fa02 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80027e4:	20e2      	movs	r0, #226	; 0xe2
 80027e6:	f7fe f9ff 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80027ea:	20e2      	movs	r0, #226	; 0xe2
 80027ec:	f7fe f9fc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80027f0:	20e2      	movs	r0, #226	; 0xe2
 80027f2:	f7fe f9f9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80027f6:	20bf      	movs	r0, #191	; 0xbf
 80027f8:	f7fe f9d2 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80027fc:	20aa      	movs	r0, #170	; 0xaa
 80027fe:	f7fe f9f3 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8002802:	20b0      	movs	r0, #176	; 0xb0
 8002804:	f7fe f9cc 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002808:	200d      	movs	r0, #13
 800280a:	f7fe f9ed 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280e:	2000      	movs	r0, #0
 8002810:	f7fe f9ea 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8002814:	200d      	movs	r0, #13
 8002816:	f7fe f9e7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe f9e4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002820:	2011      	movs	r0, #17
 8002822:	f7fe f9e1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002826:	2000      	movs	r0, #0
 8002828:	f7fe f9de 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 800282c:	2019      	movs	r0, #25
 800282e:	f7fe f9db 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002832:	2000      	movs	r0, #0
 8002834:	f7fe f9d8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002838:	2021      	movs	r0, #33	; 0x21
 800283a:	f7fe f9d5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283e:	2000      	movs	r0, #0
 8002840:	f7fe f9d2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8002844:	202d      	movs	r0, #45	; 0x2d
 8002846:	f7fe f9cf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800284a:	2000      	movs	r0, #0
 800284c:	f7fe f9cc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002850:	203d      	movs	r0, #61	; 0x3d
 8002852:	f7fe f9c9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe f9c6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800285c:	205d      	movs	r0, #93	; 0x5d
 800285e:	f7fe f9c3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002862:	2000      	movs	r0, #0
 8002864:	f7fe f9c0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002868:	205d      	movs	r0, #93	; 0x5d
 800286a:	f7fe f9bd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe f9ba 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8002874:	20b1      	movs	r0, #177	; 0xb1
 8002876:	f7fe f993 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 800287a:	2080      	movs	r0, #128	; 0x80
 800287c:	f7fe f9b4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002880:	2000      	movs	r0, #0
 8002882:	f7fe f9b1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002886:	208b      	movs	r0, #139	; 0x8b
 8002888:	f7fe f9ae 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288c:	2000      	movs	r0, #0
 800288e:	f7fe f9ab 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002892:	2096      	movs	r0, #150	; 0x96
 8002894:	f7fe f9a8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002898:	2000      	movs	r0, #0
 800289a:	f7fe f9a5 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 800289e:	20b2      	movs	r0, #178	; 0xb2
 80028a0:	f7fe f97e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7fe f99f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7fe f99c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80028b0:	2002      	movs	r0, #2
 80028b2:	f7fe f999 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7fe f996 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80028bc:	2003      	movs	r0, #3
 80028be:	f7fe f993 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7fe f990 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80028c8:	20b3      	movs	r0, #179	; 0xb3
 80028ca:	f7fe f969 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe f98a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7fe f987 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fe f984 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe f981 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fe f97e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7fe f97b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7fe f978 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7fe f975 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028fe:	2000      	movs	r0, #0
 8002900:	f7fe f972 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002904:	2000      	movs	r0, #0
 8002906:	f7fe f96f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290a:	2000      	movs	r0, #0
 800290c:	f7fe f96c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002910:	2000      	movs	r0, #0
 8002912:	f7fe f969 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002916:	2000      	movs	r0, #0
 8002918:	f7fe f966 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291c:	2000      	movs	r0, #0
 800291e:	f7fe f963 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002922:	2000      	movs	r0, #0
 8002924:	f7fe f960 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002928:	2000      	movs	r0, #0
 800292a:	f7fe f95d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292e:	2000      	movs	r0, #0
 8002930:	f7fe f95a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002934:	2000      	movs	r0, #0
 8002936:	f7fe f957 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293a:	2000      	movs	r0, #0
 800293c:	f7fe f954 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002940:	2000      	movs	r0, #0
 8002942:	f7fe f951 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe f94e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294c:	2000      	movs	r0, #0
 800294e:	f7fe f94b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002952:	2000      	movs	r0, #0
 8002954:	f7fe f948 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002958:	2000      	movs	r0, #0
 800295a:	f7fe f945 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 800295e:	20b4      	movs	r0, #180	; 0xb4
 8002960:	f7fe f91e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8002964:	208b      	movs	r0, #139	; 0x8b
 8002966:	f7fe f93f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe f93c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002970:	2096      	movs	r0, #150	; 0x96
 8002972:	f7fe f939 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002976:	2000      	movs	r0, #0
 8002978:	f7fe f936 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 800297c:	20a1      	movs	r0, #161	; 0xa1
 800297e:	f7fe f933 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002982:	2000      	movs	r0, #0
 8002984:	f7fe f930 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002988:	20b5      	movs	r0, #181	; 0xb5
 800298a:	f7fe f909 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 800298e:	2002      	movs	r0, #2
 8002990:	f7fe f92a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002994:	2000      	movs	r0, #0
 8002996:	f7fe f927 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800299a:	2003      	movs	r0, #3
 800299c:	f7fe f924 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7fe f921 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80029a6:	2004      	movs	r0, #4
 80029a8:	f7fe f91e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7fe f91b 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 80029b2:	20b6      	movs	r0, #182	; 0xb6
 80029b4:	f7fe f8f4 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7fe f915 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fe f912 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80029c4:	20b7      	movs	r0, #183	; 0xb7
 80029c6:	f7fe f8eb 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fe f90c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7fe f909 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80029d6:	203f      	movs	r0, #63	; 0x3f
 80029d8:	f7fe f906 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029dc:	2000      	movs	r0, #0
 80029de:	f7fe f903 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80029e2:	205e      	movs	r0, #94	; 0x5e
 80029e4:	f7fe f900 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7fe f8fd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80029ee:	2064      	movs	r0, #100	; 0x64
 80029f0:	f7fe f8fa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7fe f8f7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80029fa:	208c      	movs	r0, #140	; 0x8c
 80029fc:	f7fe f8f4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7fe f8f1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8002a06:	20ac      	movs	r0, #172	; 0xac
 8002a08:	f7fe f8ee 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7fe f8eb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002a12:	20dc      	movs	r0, #220	; 0xdc
 8002a14:	f7fe f8e8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7fe f8e5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002a1e:	2070      	movs	r0, #112	; 0x70
 8002a20:	f7fe f8e2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fe f8df 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002a2a:	2090      	movs	r0, #144	; 0x90
 8002a2c:	f7fe f8dc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7fe f8d9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8002a36:	20eb      	movs	r0, #235	; 0xeb
 8002a38:	f7fe f8d6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fe f8d3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002a42:	20dc      	movs	r0, #220	; 0xdc
 8002a44:	f7fe f8d0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fe f8cd 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002a4e:	20b8      	movs	r0, #184	; 0xb8
 8002a50:	f7fe f8a6 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fe f8c7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7fe f8c4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7fe f8c1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7fe f8be 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7fe f8bb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7fe f8b8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7fe f8b5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7fe f8b2 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002a84:	20ba      	movs	r0, #186	; 0xba
 8002a86:	f7fe f88b 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002a8a:	2024      	movs	r0, #36	; 0x24
 8002a8c:	f7fe f8ac 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7fe f8a9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fe f8a6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fe f8a3 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002aa2:	20c1      	movs	r0, #193	; 0xc1
 8002aa4:	f7fe f87c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002aa8:	2020      	movs	r0, #32
 8002aaa:	f7fe f89d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fe f89a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002ab4:	2054      	movs	r0, #84	; 0x54
 8002ab6:	f7fe f897 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f7fe f894 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002ac0:	20ff      	movs	r0, #255	; 0xff
 8002ac2:	f7fe f891 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7fe f88e 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002acc:	20c2      	movs	r0, #194	; 0xc2
 8002ace:	f7fe f867 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f7fe f888 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fe f885 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002ade:	2004      	movs	r0, #4
 8002ae0:	f7fe f882 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7fe f87f 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002aea:	20c3      	movs	r0, #195	; 0xc3
 8002aec:	f7fe f858 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002af0:	203c      	movs	r0, #60	; 0x3c
 8002af2:	f7fe f879 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f7fe f876 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002afc:	203a      	movs	r0, #58	; 0x3a
 8002afe:	f7fe f873 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7fe f870 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002b08:	2039      	movs	r0, #57	; 0x39
 8002b0a:	f7fe f86d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fe f86a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8002b14:	2037      	movs	r0, #55	; 0x37
 8002b16:	f7fe f867 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7fe f864 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002b20:	203c      	movs	r0, #60	; 0x3c
 8002b22:	f7fe f861 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fe f85e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b2c:	2036      	movs	r0, #54	; 0x36
 8002b2e:	f7fe f85b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fe f858 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002b38:	2032      	movs	r0, #50	; 0x32
 8002b3a:	f7fe f855 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7fe f852 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002b44:	202f      	movs	r0, #47	; 0x2f
 8002b46:	f7fe f84f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fe f84c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002b50:	202c      	movs	r0, #44	; 0x2c
 8002b52:	f7fe f849 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7fe f846 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002b5c:	2029      	movs	r0, #41	; 0x29
 8002b5e:	f7fe f843 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fe f840 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002b68:	2026      	movs	r0, #38	; 0x26
 8002b6a:	f7fe f83d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fe f83a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002b74:	2024      	movs	r0, #36	; 0x24
 8002b76:	f7fe f837 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fe f834 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002b80:	2024      	movs	r0, #36	; 0x24
 8002b82:	f7fe f831 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7fe f82e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002b8c:	2023      	movs	r0, #35	; 0x23
 8002b8e:	f7fe f82b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7fe f828 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002b98:	203c      	movs	r0, #60	; 0x3c
 8002b9a:	f7fe f825 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7fe f822 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002ba4:	2036      	movs	r0, #54	; 0x36
 8002ba6:	f7fe f81f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fe f81c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002bb0:	2032      	movs	r0, #50	; 0x32
 8002bb2:	f7fe f819 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7fe f816 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002bbc:	202f      	movs	r0, #47	; 0x2f
 8002bbe:	f7fe f813 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7fe f810 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002bc8:	202c      	movs	r0, #44	; 0x2c
 8002bca:	f7fe f80d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fe f80a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002bd4:	2029      	movs	r0, #41	; 0x29
 8002bd6:	f7fe f807 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7fe f804 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002be0:	2026      	movs	r0, #38	; 0x26
 8002be2:	f7fe f801 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7fd fffe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002bec:	2024      	movs	r0, #36	; 0x24
 8002bee:	f7fd fffb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7fd fff8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002bf8:	2024      	movs	r0, #36	; 0x24
 8002bfa:	f7fd fff5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7fd fff2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002c04:	2023      	movs	r0, #35	; 0x23
 8002c06:	f7fd ffef 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7fd ffec 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002c10:	20c4      	movs	r0, #196	; 0xc4
 8002c12:	f7fd ffc5 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002c16:	2062      	movs	r0, #98	; 0x62
 8002c18:	f7fd ffe6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7fd ffe3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002c22:	2005      	movs	r0, #5
 8002c24:	f7fd ffe0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7fd ffdd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002c2e:	2084      	movs	r0, #132	; 0x84
 8002c30:	f7fd ffda 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7fd ffd7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002c3a:	20f0      	movs	r0, #240	; 0xf0
 8002c3c:	f7fd ffd4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fd ffd1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002c46:	2018      	movs	r0, #24
 8002c48:	f7fd ffce 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fd ffcb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002c52:	20a4      	movs	r0, #164	; 0xa4
 8002c54:	f7fd ffc8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fd ffc5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002c5e:	2018      	movs	r0, #24
 8002c60:	f7fd ffc2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7fd ffbf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002c6a:	2050      	movs	r0, #80	; 0x50
 8002c6c:	f7fd ffbc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7fd ffb9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002c76:	200c      	movs	r0, #12
 8002c78:	f7fd ffb6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fd ffb3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002c82:	2017      	movs	r0, #23
 8002c84:	f7fd ffb0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fd ffad 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002c8e:	2095      	movs	r0, #149	; 0x95
 8002c90:	f7fd ffaa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fd ffa7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c9a:	20f3      	movs	r0, #243	; 0xf3
 8002c9c:	f7fd ffa4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7fd ffa1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002ca6:	20e6      	movs	r0, #230	; 0xe6
 8002ca8:	f7fd ff9e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fd ff9b 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002cb2:	20c5      	movs	r0, #197	; 0xc5
 8002cb4:	f7fd ff74 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002cb8:	2032      	movs	r0, #50	; 0x32
 8002cba:	f7fd ff95 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f7fd ff92 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002cc4:	2044      	movs	r0, #68	; 0x44
 8002cc6:	f7fd ff8f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7fd ff8c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002cd0:	2065      	movs	r0, #101	; 0x65
 8002cd2:	f7fd ff89 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7fd ff86 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002cdc:	2076      	movs	r0, #118	; 0x76
 8002cde:	f7fd ff83 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7fd ff80 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002ce8:	2088      	movs	r0, #136	; 0x88
 8002cea:	f7fd ff7d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7fd ff7a 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002cf4:	20c6      	movs	r0, #198	; 0xc6
 8002cf6:	f7fd ff53 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002cfa:	2020      	movs	r0, #32
 8002cfc:	f7fd ff74 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7fd ff71 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002d06:	2017      	movs	r0, #23
 8002d08:	f7fd ff6e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fd ff6b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002d12:	2001      	movs	r0, #1
 8002d14:	f7fd ff68 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f7fd ff65 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002d1e:	20c7      	movs	r0, #199	; 0xc7
 8002d20:	f7fd ff3e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7fd ff5f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7fd ff5c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7fd ff59 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fd ff56 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002d3c:	20c8      	movs	r0, #200	; 0xc8
 8002d3e:	f7fd ff2f 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d42:	2000      	movs	r0, #0
 8002d44:	f7fd ff50 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7fd ff4d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7fd ff4a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7fd ff47 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002d5a:	20c9      	movs	r0, #201	; 0xc9
 8002d5c:	f7fd ff20 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7fd ff41 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7fd ff3e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7fd ff3b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f7fd ff38 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7fd ff35 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fd ff32 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7fd ff2f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7fd ff2c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7fd ff29 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fd ff26 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7fd ff23 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fd ff20 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7fd ff1d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fd ff1a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7fd ff17 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f7fd ff14 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002dc0:	20e0      	movs	r0, #224	; 0xe0
 8002dc2:	f7fd feed 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002dc6:	2016      	movs	r0, #22
 8002dc8:	f7fd ff0e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7fd ff0b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002dd2:	201c      	movs	r0, #28
 8002dd4:	f7fd ff08 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fd ff05 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002dde:	2021      	movs	r0, #33	; 0x21
 8002de0:	f7fd ff02 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7fd feff 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002dea:	2036      	movs	r0, #54	; 0x36
 8002dec:	f7fd fefc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7fd fef9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002df6:	2046      	movs	r0, #70	; 0x46
 8002df8:	f7fd fef6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fd fef3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002e02:	2052      	movs	r0, #82	; 0x52
 8002e04:	f7fd fef0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd feed 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002e0e:	2064      	movs	r0, #100	; 0x64
 8002e10:	f7fd feea 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd fee7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002e1a:	207a      	movs	r0, #122	; 0x7a
 8002e1c:	f7fd fee4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7fd fee1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002e26:	208b      	movs	r0, #139	; 0x8b
 8002e28:	f7fd fede 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fd fedb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e32:	2099      	movs	r0, #153	; 0x99
 8002e34:	f7fd fed8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fd fed5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002e3e:	20a8      	movs	r0, #168	; 0xa8
 8002e40:	f7fd fed2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fd fecf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002e4a:	20b9      	movs	r0, #185	; 0xb9
 8002e4c:	f7fd fecc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7fd fec9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002e56:	20c4      	movs	r0, #196	; 0xc4
 8002e58:	f7fd fec6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd fec3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002e62:	20ca      	movs	r0, #202	; 0xca
 8002e64:	f7fd fec0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd febd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002e6e:	20d2      	movs	r0, #210	; 0xd2
 8002e70:	f7fd feba 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fd feb7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002e7a:	20d9      	movs	r0, #217	; 0xd9
 8002e7c:	f7fd feb4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fd feb1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002e86:	20e0      	movs	r0, #224	; 0xe0
 8002e88:	f7fd feae 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7fd feab 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e92:	20f3      	movs	r0, #243	; 0xf3
 8002e94:	f7fd fea8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fd fea5 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002e9e:	20e1      	movs	r0, #225	; 0xe1
 8002ea0:	f7fd fe7e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002ea4:	2016      	movs	r0, #22
 8002ea6:	f7fd fe9f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f7fd fe9c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002eb0:	201c      	movs	r0, #28
 8002eb2:	f7fd fe99 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7fd fe96 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002ebc:	2022      	movs	r0, #34	; 0x22
 8002ebe:	f7fd fe93 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7fd fe90 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002ec8:	2036      	movs	r0, #54	; 0x36
 8002eca:	f7fd fe8d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7fd fe8a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002ed4:	2045      	movs	r0, #69	; 0x45
 8002ed6:	f7fd fe87 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7fd fe84 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002ee0:	2052      	movs	r0, #82	; 0x52
 8002ee2:	f7fd fe81 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fd fe7e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002eec:	2064      	movs	r0, #100	; 0x64
 8002eee:	f7fd fe7b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fd fe78 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002ef8:	207a      	movs	r0, #122	; 0x7a
 8002efa:	f7fd fe75 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd fe72 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002f04:	208b      	movs	r0, #139	; 0x8b
 8002f06:	f7fd fe6f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fd fe6c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002f10:	2099      	movs	r0, #153	; 0x99
 8002f12:	f7fd fe69 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7fd fe66 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002f1c:	20a8      	movs	r0, #168	; 0xa8
 8002f1e:	f7fd fe63 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7fd fe60 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002f28:	20b9      	movs	r0, #185	; 0xb9
 8002f2a:	f7fd fe5d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7fd fe5a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002f34:	20c4      	movs	r0, #196	; 0xc4
 8002f36:	f7fd fe57 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7fd fe54 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002f40:	20ca      	movs	r0, #202	; 0xca
 8002f42:	f7fd fe51 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f7fd fe4e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002f4c:	20d2      	movs	r0, #210	; 0xd2
 8002f4e:	f7fd fe4b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7fd fe48 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002f58:	20d8      	movs	r0, #216	; 0xd8
 8002f5a:	f7fd fe45 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fd fe42 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002f64:	20e0      	movs	r0, #224	; 0xe0
 8002f66:	f7fd fe3f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f7fd fe3c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f70:	20f3      	movs	r0, #243	; 0xf3
 8002f72:	f7fd fe39 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7fd fe36 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002f7c:	20e2      	movs	r0, #226	; 0xe2
 8002f7e:	f7fd fe0f 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002f82:	2005      	movs	r0, #5
 8002f84:	f7fd fe30 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7fd fe2d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002f8e:	200b      	movs	r0, #11
 8002f90:	f7fd fe2a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f94:	2000      	movs	r0, #0
 8002f96:	f7fd fe27 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002f9a:	201b      	movs	r0, #27
 8002f9c:	f7fd fe24 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7fd fe21 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002fa6:	2034      	movs	r0, #52	; 0x34
 8002fa8:	f7fd fe1e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7fd fe1b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002fb2:	2044      	movs	r0, #68	; 0x44
 8002fb4:	f7fd fe18 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7fd fe15 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002fbe:	204f      	movs	r0, #79	; 0x4f
 8002fc0:	f7fd fe12 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7fd fe0f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002fca:	2061      	movs	r0, #97	; 0x61
 8002fcc:	f7fd fe0c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7fd fe09 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002fd6:	2079      	movs	r0, #121	; 0x79
 8002fd8:	f7fd fe06 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fd fe03 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002fe2:	2088      	movs	r0, #136	; 0x88
 8002fe4:	f7fd fe00 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fd fdfd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002fee:	2097      	movs	r0, #151	; 0x97
 8002ff0:	f7fd fdfa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fd fdf7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002ffa:	20a6      	movs	r0, #166	; 0xa6
 8002ffc:	f7fd fdf4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003000:	2000      	movs	r0, #0
 8003002:	f7fd fdf1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8003006:	20b7      	movs	r0, #183	; 0xb7
 8003008:	f7fd fdee 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300c:	2000      	movs	r0, #0
 800300e:	f7fd fdeb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8003012:	20c2      	movs	r0, #194	; 0xc2
 8003014:	f7fd fde8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003018:	2000      	movs	r0, #0
 800301a:	f7fd fde5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 800301e:	20c7      	movs	r0, #199	; 0xc7
 8003020:	f7fd fde2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003024:	2000      	movs	r0, #0
 8003026:	f7fd fddf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 800302a:	20d1      	movs	r0, #209	; 0xd1
 800302c:	f7fd fddc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003030:	2000      	movs	r0, #0
 8003032:	f7fd fdd9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8003036:	20d6      	movs	r0, #214	; 0xd6
 8003038:	f7fd fdd6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303c:	2000      	movs	r0, #0
 800303e:	f7fd fdd3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003042:	20dd      	movs	r0, #221	; 0xdd
 8003044:	f7fd fdd0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003048:	2000      	movs	r0, #0
 800304a:	f7fd fdcd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800304e:	20f3      	movs	r0, #243	; 0xf3
 8003050:	f7fd fdca 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003054:	2000      	movs	r0, #0
 8003056:	f7fd fdc7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 800305a:	20e3      	movs	r0, #227	; 0xe3
 800305c:	f7fd fda0 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8003060:	2005      	movs	r0, #5
 8003062:	f7fd fdc1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003066:	2000      	movs	r0, #0
 8003068:	f7fd fdbe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 800306c:	200a      	movs	r0, #10
 800306e:	f7fd fdbb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003072:	2000      	movs	r0, #0
 8003074:	f7fd fdb8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8003078:	201c      	movs	r0, #28
 800307a:	f7fd fdb5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800307e:	2000      	movs	r0, #0
 8003080:	f7fd fdb2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003084:	2033      	movs	r0, #51	; 0x33
 8003086:	f7fd fdaf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f7fd fdac 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003090:	2044      	movs	r0, #68	; 0x44
 8003092:	f7fd fda9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003096:	2000      	movs	r0, #0
 8003098:	f7fd fda6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 800309c:	2050      	movs	r0, #80	; 0x50
 800309e:	f7fd fda3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fd fda0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 80030a8:	2062      	movs	r0, #98	; 0x62
 80030aa:	f7fd fd9d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fd fd9a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 80030b4:	2078      	movs	r0, #120	; 0x78
 80030b6:	f7fd fd97 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7fd fd94 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80030c0:	2088      	movs	r0, #136	; 0x88
 80030c2:	f7fd fd91 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fd fd8e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80030cc:	2097      	movs	r0, #151	; 0x97
 80030ce:	f7fd fd8b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fd fd88 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80030d8:	20a6      	movs	r0, #166	; 0xa6
 80030da:	f7fd fd85 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030de:	2000      	movs	r0, #0
 80030e0:	f7fd fd82 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80030e4:	20b7      	movs	r0, #183	; 0xb7
 80030e6:	f7fd fd7f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fd fd7c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80030f0:	20c2      	movs	r0, #194	; 0xc2
 80030f2:	f7fd fd79 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fd fd76 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80030fc:	20c7      	movs	r0, #199	; 0xc7
 80030fe:	f7fd fd73 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fd fd70 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003108:	20d1      	movs	r0, #209	; 0xd1
 800310a:	f7fd fd6d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310e:	2000      	movs	r0, #0
 8003110:	f7fd fd6a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8003114:	20d5      	movs	r0, #213	; 0xd5
 8003116:	f7fd fd67 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800311a:	2000      	movs	r0, #0
 800311c:	f7fd fd64 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003120:	20dd      	movs	r0, #221	; 0xdd
 8003122:	f7fd fd61 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003126:	2000      	movs	r0, #0
 8003128:	f7fd fd5e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800312c:	20f3      	movs	r0, #243	; 0xf3
 800312e:	f7fd fd5b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003132:	2000      	movs	r0, #0
 8003134:	f7fd fd58 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8003138:	20e4      	movs	r0, #228	; 0xe4
 800313a:	f7fd fd31 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800313e:	2001      	movs	r0, #1
 8003140:	f7fd fd52 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003144:	2000      	movs	r0, #0
 8003146:	f7fd fd4f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800314a:	2001      	movs	r0, #1
 800314c:	f7fd fd4c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003150:	2000      	movs	r0, #0
 8003152:	f7fd fd49 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003156:	2002      	movs	r0, #2
 8003158:	f7fd fd46 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315c:	2000      	movs	r0, #0
 800315e:	f7fd fd43 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8003162:	202a      	movs	r0, #42	; 0x2a
 8003164:	f7fd fd40 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003168:	2000      	movs	r0, #0
 800316a:	f7fd fd3d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800316e:	203c      	movs	r0, #60	; 0x3c
 8003170:	f7fd fd3a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003174:	2000      	movs	r0, #0
 8003176:	f7fd fd37 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 800317a:	204b      	movs	r0, #75	; 0x4b
 800317c:	f7fd fd34 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003180:	2000      	movs	r0, #0
 8003182:	f7fd fd31 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003186:	205d      	movs	r0, #93	; 0x5d
 8003188:	f7fd fd2e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318c:	2000      	movs	r0, #0
 800318e:	f7fd fd2b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003192:	2074      	movs	r0, #116	; 0x74
 8003194:	f7fd fd28 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003198:	2000      	movs	r0, #0
 800319a:	f7fd fd25 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800319e:	2084      	movs	r0, #132	; 0x84
 80031a0:	f7fd fd22 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fd fd1f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 80031aa:	2093      	movs	r0, #147	; 0x93
 80031ac:	f7fd fd1c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fd fd19 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80031b6:	20a2      	movs	r0, #162	; 0xa2
 80031b8:	f7fd fd16 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fd fd13 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80031c2:	20b3      	movs	r0, #179	; 0xb3
 80031c4:	f7fd fd10 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fd fd0d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80031ce:	20be      	movs	r0, #190	; 0xbe
 80031d0:	f7fd fd0a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fd07 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80031da:	20c4      	movs	r0, #196	; 0xc4
 80031dc:	f7fd fd04 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7fd fd01 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80031e6:	20cd      	movs	r0, #205	; 0xcd
 80031e8:	f7fd fcfe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fd fcfb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80031f2:	20d3      	movs	r0, #211	; 0xd3
 80031f4:	f7fd fcf8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7fd fcf5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80031fe:	20dd      	movs	r0, #221	; 0xdd
 8003200:	f7fd fcf2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003204:	2000      	movs	r0, #0
 8003206:	f7fd fcef 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800320a:	20f3      	movs	r0, #243	; 0xf3
 800320c:	f7fd fcec 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003210:	2000      	movs	r0, #0
 8003212:	f7fd fce9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8003216:	20e5      	movs	r0, #229	; 0xe5
 8003218:	f7fd fcc2 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800321c:	2000      	movs	r0, #0
 800321e:	f7fd fce3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003222:	2000      	movs	r0, #0
 8003224:	f7fd fce0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003228:	2000      	movs	r0, #0
 800322a:	f7fd fcdd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800322e:	2000      	movs	r0, #0
 8003230:	f7fd fcda 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003234:	2002      	movs	r0, #2
 8003236:	f7fd fcd7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323a:	2000      	movs	r0, #0
 800323c:	f7fd fcd4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003240:	2029      	movs	r0, #41	; 0x29
 8003242:	f7fd fcd1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003246:	2000      	movs	r0, #0
 8003248:	f7fd fcce 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800324c:	203c      	movs	r0, #60	; 0x3c
 800324e:	f7fd fccb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003252:	2000      	movs	r0, #0
 8003254:	f7fd fcc8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003258:	204b      	movs	r0, #75	; 0x4b
 800325a:	f7fd fcc5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800325e:	2000      	movs	r0, #0
 8003260:	f7fd fcc2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003264:	205d      	movs	r0, #93	; 0x5d
 8003266:	f7fd fcbf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800326a:	2000      	movs	r0, #0
 800326c:	f7fd fcbc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003270:	2074      	movs	r0, #116	; 0x74
 8003272:	f7fd fcb9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003276:	2000      	movs	r0, #0
 8003278:	f7fd fcb6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800327c:	2084      	movs	r0, #132	; 0x84
 800327e:	f7fd fcb3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003282:	2000      	movs	r0, #0
 8003284:	f7fd fcb0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003288:	2093      	movs	r0, #147	; 0x93
 800328a:	f7fd fcad 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328e:	2000      	movs	r0, #0
 8003290:	f7fd fcaa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003294:	20a2      	movs	r0, #162	; 0xa2
 8003296:	f7fd fca7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800329a:	2000      	movs	r0, #0
 800329c:	f7fd fca4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80032a0:	20b3      	movs	r0, #179	; 0xb3
 80032a2:	f7fd fca1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7fd fc9e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80032ac:	20be      	movs	r0, #190	; 0xbe
 80032ae:	f7fd fc9b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7fd fc98 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80032b8:	20c4      	movs	r0, #196	; 0xc4
 80032ba:	f7fd fc95 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fd fc92 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80032c4:	20cd      	movs	r0, #205	; 0xcd
 80032c6:	f7fd fc8f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7fd fc8c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80032d0:	20d3      	movs	r0, #211	; 0xd3
 80032d2:	f7fd fc89 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f7fd fc86 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80032dc:	20dc      	movs	r0, #220	; 0xdc
 80032de:	f7fd fc83 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e2:	2000      	movs	r0, #0
 80032e4:	f7fd fc80 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80032e8:	20f3      	movs	r0, #243	; 0xf3
 80032ea:	f7fd fc7d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ee:	2000      	movs	r0, #0
 80032f0:	f7fd fc7a 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80032f4:	20e6      	movs	r0, #230	; 0xe6
 80032f6:	f7fd fc53 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80032fa:	2011      	movs	r0, #17
 80032fc:	f7fd fc74 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003300:	2000      	movs	r0, #0
 8003302:	f7fd fc71 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8003306:	2034      	movs	r0, #52	; 0x34
 8003308:	f7fd fc6e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800330c:	2000      	movs	r0, #0
 800330e:	f7fd fc6b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003312:	2056      	movs	r0, #86	; 0x56
 8003314:	f7fd fc68 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003318:	2000      	movs	r0, #0
 800331a:	f7fd fc65 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800331e:	2076      	movs	r0, #118	; 0x76
 8003320:	f7fd fc62 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003324:	2000      	movs	r0, #0
 8003326:	f7fd fc5f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800332a:	2077      	movs	r0, #119	; 0x77
 800332c:	f7fd fc5c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003330:	2000      	movs	r0, #0
 8003332:	f7fd fc59 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003336:	2066      	movs	r0, #102	; 0x66
 8003338:	f7fd fc56 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800333c:	2000      	movs	r0, #0
 800333e:	f7fd fc53 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003342:	2088      	movs	r0, #136	; 0x88
 8003344:	f7fd fc50 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003348:	2000      	movs	r0, #0
 800334a:	f7fd fc4d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800334e:	2099      	movs	r0, #153	; 0x99
 8003350:	f7fd fc4a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003354:	2000      	movs	r0, #0
 8003356:	f7fd fc47 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800335a:	20bb      	movs	r0, #187	; 0xbb
 800335c:	f7fd fc44 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003360:	2000      	movs	r0, #0
 8003362:	f7fd fc41 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003366:	2099      	movs	r0, #153	; 0x99
 8003368:	f7fd fc3e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336c:	2000      	movs	r0, #0
 800336e:	f7fd fc3b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003372:	2066      	movs	r0, #102	; 0x66
 8003374:	f7fd fc38 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003378:	2000      	movs	r0, #0
 800337a:	f7fd fc35 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800337e:	2055      	movs	r0, #85	; 0x55
 8003380:	f7fd fc32 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003384:	2000      	movs	r0, #0
 8003386:	f7fd fc2f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800338a:	2055      	movs	r0, #85	; 0x55
 800338c:	f7fd fc2c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003390:	2000      	movs	r0, #0
 8003392:	f7fd fc29 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003396:	2045      	movs	r0, #69	; 0x45
 8003398:	f7fd fc26 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339c:	2000      	movs	r0, #0
 800339e:	f7fd fc23 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80033a2:	2043      	movs	r0, #67	; 0x43
 80033a4:	f7fd fc20 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7fd fc1d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80033ae:	2044      	movs	r0, #68	; 0x44
 80033b0:	f7fd fc1a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7fd fc17 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 80033ba:	20e7      	movs	r0, #231	; 0xe7
 80033bc:	f7fd fbf0 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80033c0:	2032      	movs	r0, #50	; 0x32
 80033c2:	f7fd fc11 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c6:	2000      	movs	r0, #0
 80033c8:	f7fd fc0e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80033cc:	2055      	movs	r0, #85	; 0x55
 80033ce:	f7fd fc0b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7fd fc08 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80033d8:	2076      	movs	r0, #118	; 0x76
 80033da:	f7fd fc05 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033de:	2000      	movs	r0, #0
 80033e0:	f7fd fc02 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80033e4:	2066      	movs	r0, #102	; 0x66
 80033e6:	f7fd fbff 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ea:	2000      	movs	r0, #0
 80033ec:	f7fd fbfc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80033f0:	2067      	movs	r0, #103	; 0x67
 80033f2:	f7fd fbf9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f7fd fbf6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80033fc:	2067      	movs	r0, #103	; 0x67
 80033fe:	f7fd fbf3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003402:	2000      	movs	r0, #0
 8003404:	f7fd fbf0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003408:	2087      	movs	r0, #135	; 0x87
 800340a:	f7fd fbed 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340e:	2000      	movs	r0, #0
 8003410:	f7fd fbea 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003414:	2099      	movs	r0, #153	; 0x99
 8003416:	f7fd fbe7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800341a:	2000      	movs	r0, #0
 800341c:	f7fd fbe4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003420:	20bb      	movs	r0, #187	; 0xbb
 8003422:	f7fd fbe1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003426:	2000      	movs	r0, #0
 8003428:	f7fd fbde 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800342c:	2099      	movs	r0, #153	; 0x99
 800342e:	f7fd fbdb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003432:	2000      	movs	r0, #0
 8003434:	f7fd fbd8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003438:	2077      	movs	r0, #119	; 0x77
 800343a:	f7fd fbd5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800343e:	2000      	movs	r0, #0
 8003440:	f7fd fbd2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003444:	2044      	movs	r0, #68	; 0x44
 8003446:	f7fd fbcf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800344a:	2000      	movs	r0, #0
 800344c:	f7fd fbcc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003450:	2056      	movs	r0, #86	; 0x56
 8003452:	f7fd fbc9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003456:	2000      	movs	r0, #0
 8003458:	f7fd fbc6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800345c:	2023      	movs	r0, #35	; 0x23
 800345e:	f7fd fbc3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003462:	2000      	movs	r0, #0
 8003464:	f7fd fbc0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003468:	2033      	movs	r0, #51	; 0x33
 800346a:	f7fd fbbd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800346e:	2000      	movs	r0, #0
 8003470:	f7fd fbba 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003474:	2045      	movs	r0, #69	; 0x45
 8003476:	f7fd fbb7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800347a:	2000      	movs	r0, #0
 800347c:	f7fd fbb4 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003480:	20e8      	movs	r0, #232	; 0xe8
 8003482:	f7fd fb8d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003486:	2000      	movs	r0, #0
 8003488:	f7fd fbae 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800348c:	2000      	movs	r0, #0
 800348e:	f7fd fbab 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003492:	2099      	movs	r0, #153	; 0x99
 8003494:	f7fd fba8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003498:	2000      	movs	r0, #0
 800349a:	f7fd fba5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 800349e:	2087      	movs	r0, #135	; 0x87
 80034a0:	f7fd fba2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034a4:	2000      	movs	r0, #0
 80034a6:	f7fd fb9f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80034aa:	2088      	movs	r0, #136	; 0x88
 80034ac:	f7fd fb9c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034b0:	2000      	movs	r0, #0
 80034b2:	f7fd fb99 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80034b6:	2077      	movs	r0, #119	; 0x77
 80034b8:	f7fd fb96 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034bc:	2000      	movs	r0, #0
 80034be:	f7fd fb93 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80034c2:	2066      	movs	r0, #102	; 0x66
 80034c4:	f7fd fb90 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7fd fb8d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80034ce:	2088      	movs	r0, #136	; 0x88
 80034d0:	f7fd fb8a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034d4:	2000      	movs	r0, #0
 80034d6:	f7fd fb87 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80034da:	20aa      	movs	r0, #170	; 0xaa
 80034dc:	f7fd fb84 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034e0:	2000      	movs	r0, #0
 80034e2:	f7fd fb81 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80034e6:	20bb      	movs	r0, #187	; 0xbb
 80034e8:	f7fd fb7e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ec:	2000      	movs	r0, #0
 80034ee:	f7fd fb7b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80034f2:	2099      	movs	r0, #153	; 0x99
 80034f4:	f7fd fb78 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7fd fb75 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80034fe:	2066      	movs	r0, #102	; 0x66
 8003500:	f7fd fb72 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003504:	2000      	movs	r0, #0
 8003506:	f7fd fb6f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800350a:	2055      	movs	r0, #85	; 0x55
 800350c:	f7fd fb6c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003510:	2000      	movs	r0, #0
 8003512:	f7fd fb69 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003516:	2055      	movs	r0, #85	; 0x55
 8003518:	f7fd fb66 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800351c:	2000      	movs	r0, #0
 800351e:	f7fd fb63 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003522:	2044      	movs	r0, #68	; 0x44
 8003524:	f7fd fb60 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003528:	2000      	movs	r0, #0
 800352a:	f7fd fb5d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800352e:	2044      	movs	r0, #68	; 0x44
 8003530:	f7fd fb5a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003534:	2000      	movs	r0, #0
 8003536:	f7fd fb57 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800353a:	2055      	movs	r0, #85	; 0x55
 800353c:	f7fd fb54 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003540:	2000      	movs	r0, #0
 8003542:	f7fd fb51 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8003546:	20e9      	movs	r0, #233	; 0xe9
 8003548:	f7fd fb2a 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800354c:	20aa      	movs	r0, #170	; 0xaa
 800354e:	f7fd fb4b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003552:	2000      	movs	r0, #0
 8003554:	f7fd fb48 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003558:	2000      	movs	r0, #0
 800355a:	f7fd fb45 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800355e:	2000      	movs	r0, #0
 8003560:	f7fd fb42 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8003564:	2000      	movs	r0, #0
 8003566:	f7fd fb1b 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800356a:	20aa      	movs	r0, #170	; 0xaa
 800356c:	f7fd fb3c 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003570:	20cf      	movs	r0, #207	; 0xcf
 8003572:	f7fd fb15 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003576:	2000      	movs	r0, #0
 8003578:	f7fd fb36 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800357c:	2000      	movs	r0, #0
 800357e:	f7fd fb33 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003582:	2000      	movs	r0, #0
 8003584:	f7fd fb30 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003588:	2000      	movs	r0, #0
 800358a:	f7fd fb2d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800358e:	2000      	movs	r0, #0
 8003590:	f7fd fb2a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003594:	2000      	movs	r0, #0
 8003596:	f7fd fb27 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800359a:	2000      	movs	r0, #0
 800359c:	f7fd fb24 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a0:	2000      	movs	r0, #0
 80035a2:	f7fd fb21 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a6:	2000      	movs	r0, #0
 80035a8:	f7fd fb1e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ac:	2000      	movs	r0, #0
 80035ae:	f7fd fb1b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035b2:	2000      	movs	r0, #0
 80035b4:	f7fd fb18 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035b8:	2000      	movs	r0, #0
 80035ba:	f7fd fb15 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035be:	2000      	movs	r0, #0
 80035c0:	f7fd fb12 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035c4:	2000      	movs	r0, #0
 80035c6:	f7fd fb0f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ca:	2000      	movs	r0, #0
 80035cc:	f7fd fb0c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035d0:	2000      	movs	r0, #0
 80035d2:	f7fd fb09 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7fd fb06 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80035dc:	20f0      	movs	r0, #240	; 0xf0
 80035de:	f7fd fadf 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fd fb00 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80035e8:	2050      	movs	r0, #80	; 0x50
 80035ea:	f7fd fafd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ee:	2000      	movs	r0, #0
 80035f0:	f7fd fafa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035f4:	2000      	movs	r0, #0
 80035f6:	f7fd faf7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7fd faf4 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003600:	20f3      	movs	r0, #243	; 0xf3
 8003602:	f7fd facd 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003606:	2000      	movs	r0, #0
 8003608:	f7fd faee 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 800360c:	20f9      	movs	r0, #249	; 0xf9
 800360e:	f7fd fac7 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8003612:	2006      	movs	r0, #6
 8003614:	f7fd fae8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003618:	2010      	movs	r0, #16
 800361a:	f7fd fae5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800361e:	2029      	movs	r0, #41	; 0x29
 8003620:	f7fd fae2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003624:	2000      	movs	r0, #0
 8003626:	f7fd fadf 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 800362a:	203a      	movs	r0, #58	; 0x3a
 800362c:	f7fd fab8 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003630:	2055      	movs	r0, #85	; 0x55
 8003632:	f7fd fad9 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8003636:	2011      	movs	r0, #17
 8003638:	f7fd fab2 	bl	8000ba0 <LCD_WR_REG>
		HAL_Delay(100);
 800363c:	2064      	movs	r0, #100	; 0x64
 800363e:	f003 fbd9 	bl	8006df4 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003642:	2029      	movs	r0, #41	; 0x29
 8003644:	f7fd faac 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003648:	2035      	movs	r0, #53	; 0x35
 800364a:	f7fd faa9 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800364e:	2000      	movs	r0, #0
 8003650:	f7fd faca 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8003654:	2051      	movs	r0, #81	; 0x51
 8003656:	f7fd faa3 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 800365a:	20ff      	movs	r0, #255	; 0xff
 800365c:	f7fd fac4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003660:	2053      	movs	r0, #83	; 0x53
 8003662:	f7fd fa9d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8003666:	202c      	movs	r0, #44	; 0x2c
 8003668:	f7fd fabe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 800366c:	2055      	movs	r0, #85	; 0x55
 800366e:	f7fd fa97 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8003672:	2082      	movs	r0, #130	; 0x82
 8003674:	f7fd fab8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003678:	202c      	movs	r0, #44	; 0x2c
 800367a:	f7fd fa91 	bl	8000ba0 <LCD_WR_REG>
 800367e:	f002 bca1 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8003682:	4b04      	ldr	r3, [pc, #16]	; (8003694 <LCD_Init+0x1504>)
 8003684:	889b      	ldrh	r3, [r3, #4]
 8003686:	f245 5210 	movw	r2, #21776	; 0x5510
 800368a:	4293      	cmp	r3, r2
 800368c:	f040 8782 	bne.w	8004594 <LCD_Init+0x2404>
 8003690:	e002      	b.n	8003698 <LCD_Init+0x1508>
 8003692:	bf00      	nop
 8003694:	2000020c 	.word	0x2000020c
		LCD_WriteReg(0xF000, 0x55);
 8003698:	2155      	movs	r1, #85	; 0x55
 800369a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800369e:	f7fd fb0b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80036a2:	21aa      	movs	r1, #170	; 0xaa
 80036a4:	f24f 0001 	movw	r0, #61441	; 0xf001
 80036a8:	f7fd fb06 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80036ac:	2152      	movs	r1, #82	; 0x52
 80036ae:	f24f 0002 	movw	r0, #61442	; 0xf002
 80036b2:	f7fd fb01 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80036b6:	2108      	movs	r1, #8
 80036b8:	f24f 0003 	movw	r0, #61443	; 0xf003
 80036bc:	f7fd fafc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80036c0:	2101      	movs	r1, #1
 80036c2:	f24f 0004 	movw	r0, #61444	; 0xf004
 80036c6:	f7fd faf7 	bl	8000cb8 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80036ca:	210d      	movs	r1, #13
 80036cc:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80036d0:	f7fd faf2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80036d4:	210d      	movs	r1, #13
 80036d6:	f24b 0001 	movw	r0, #45057	; 0xb001
 80036da:	f7fd faed 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80036de:	210d      	movs	r1, #13
 80036e0:	f24b 0002 	movw	r0, #45058	; 0xb002
 80036e4:	f7fd fae8 	bl	8000cb8 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80036e8:	2134      	movs	r1, #52	; 0x34
 80036ea:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80036ee:	f7fd fae3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80036f2:	2134      	movs	r1, #52	; 0x34
 80036f4:	f24b 6001 	movw	r0, #46593	; 0xb601
 80036f8:	f7fd fade 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80036fc:	2134      	movs	r1, #52	; 0x34
 80036fe:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003702:	f7fd fad9 	bl	8000cb8 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8003706:	210d      	movs	r1, #13
 8003708:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800370c:	f7fd fad4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003710:	210d      	movs	r1, #13
 8003712:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003716:	f7fd facf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 800371a:	210d      	movs	r1, #13
 800371c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003720:	f7fd faca 	bl	8000cb8 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8003724:	2134      	movs	r1, #52	; 0x34
 8003726:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800372a:	f7fd fac5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 800372e:	2134      	movs	r1, #52	; 0x34
 8003730:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003734:	f7fd fac0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003738:	2134      	movs	r1, #52	; 0x34
 800373a:	f24b 7002 	movw	r0, #46850	; 0xb702
 800373e:	f7fd fabb 	bl	8000cb8 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8003742:	2100      	movs	r1, #0
 8003744:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003748:	f7fd fab6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 800374c:	2100      	movs	r1, #0
 800374e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003752:	f7fd fab1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8003756:	2100      	movs	r1, #0
 8003758:	f24b 2002 	movw	r0, #45570	; 0xb202
 800375c:	f7fd faac 	bl	8000cb8 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003760:	2124      	movs	r1, #36	; 0x24
 8003762:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003766:	f7fd faa7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 800376a:	2124      	movs	r1, #36	; 0x24
 800376c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003770:	f7fd faa2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8003774:	2124      	movs	r1, #36	; 0x24
 8003776:	f64b 0002 	movw	r0, #47106	; 0xb802
 800377a:	f7fd fa9d 	bl	8000cb8 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 800377e:	2101      	movs	r1, #1
 8003780:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003784:	f7fd fa98 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003788:	210f      	movs	r1, #15
 800378a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800378e:	f7fd fa93 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8003792:	210f      	movs	r1, #15
 8003794:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003798:	f7fd fa8e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 800379c:	210f      	movs	r1, #15
 800379e:	f24b 3002 	movw	r0, #45826	; 0xb302
 80037a2:	f7fd fa89 	bl	8000cb8 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 80037a6:	2134      	movs	r1, #52	; 0x34
 80037a8:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80037ac:	f7fd fa84 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 80037b0:	2134      	movs	r1, #52	; 0x34
 80037b2:	f64b 1001 	movw	r0, #47361	; 0xb901
 80037b6:	f7fd fa7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80037ba:	2134      	movs	r1, #52	; 0x34
 80037bc:	f64b 1002 	movw	r0, #47362	; 0xb902
 80037c0:	f7fd fa7a 	bl	8000cb8 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80037c4:	2108      	movs	r1, #8
 80037c6:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80037ca:	f7fd fa75 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80037ce:	2108      	movs	r1, #8
 80037d0:	f24b 5001 	movw	r0, #46337	; 0xb501
 80037d4:	f7fd fa70 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80037d8:	2108      	movs	r1, #8
 80037da:	f24b 5002 	movw	r0, #46338	; 0xb502
 80037de:	f7fd fa6b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80037e2:	2103      	movs	r1, #3
 80037e4:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80037e8:	f7fd fa66 	bl	8000cb8 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80037ec:	2124      	movs	r1, #36	; 0x24
 80037ee:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80037f2:	f7fd fa61 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80037f6:	2124      	movs	r1, #36	; 0x24
 80037f8:	f64b 2001 	movw	r0, #47617	; 0xba01
 80037fc:	f7fd fa5c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003800:	2124      	movs	r1, #36	; 0x24
 8003802:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003806:	f7fd fa57 	bl	8000cb8 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 800380a:	2100      	movs	r1, #0
 800380c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003810:	f7fd fa52 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8003814:	2178      	movs	r1, #120	; 0x78
 8003816:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800381a:	f7fd fa4d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800381e:	2100      	movs	r1, #0
 8003820:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003824:	f7fd fa48 	bl	8000cb8 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003828:	2100      	movs	r1, #0
 800382a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800382e:	f7fd fa43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8003832:	2178      	movs	r1, #120	; 0x78
 8003834:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003838:	f7fd fa3e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 800383c:	2100      	movs	r1, #0
 800383e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003842:	f7fd fa39 	bl	8000cb8 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8003846:	2100      	movs	r1, #0
 8003848:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 800384c:	f7fd fa34 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003850:	2164      	movs	r1, #100	; 0x64
 8003852:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003856:	f7fd fa2f 	bl	8000cb8 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 800385a:	2100      	movs	r1, #0
 800385c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003860:	f7fd fa2a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8003864:	2133      	movs	r1, #51	; 0x33
 8003866:	f24d 1001 	movw	r0, #53505	; 0xd101
 800386a:	f7fd fa25 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 800386e:	2100      	movs	r1, #0
 8003870:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003874:	f7fd fa20 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003878:	2134      	movs	r1, #52	; 0x34
 800387a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800387e:	f7fd fa1b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8003882:	2100      	movs	r1, #0
 8003884:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003888:	f7fd fa16 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 800388c:	213a      	movs	r1, #58	; 0x3a
 800388e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003892:	f7fd fa11 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8003896:	2100      	movs	r1, #0
 8003898:	f24d 1006 	movw	r0, #53510	; 0xd106
 800389c:	f7fd fa0c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 80038a0:	214a      	movs	r1, #74	; 0x4a
 80038a2:	f24d 1007 	movw	r0, #53511	; 0xd107
 80038a6:	f7fd fa07 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 80038aa:	2100      	movs	r1, #0
 80038ac:	f24d 1008 	movw	r0, #53512	; 0xd108
 80038b0:	f7fd fa02 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 80038b4:	215c      	movs	r1, #92	; 0x5c
 80038b6:	f24d 1009 	movw	r0, #53513	; 0xd109
 80038ba:	f7fd f9fd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80038be:	2100      	movs	r1, #0
 80038c0:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80038c4:	f7fd f9f8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80038c8:	2181      	movs	r1, #129	; 0x81
 80038ca:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80038ce:	f7fd f9f3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80038d2:	2100      	movs	r1, #0
 80038d4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80038d8:	f7fd f9ee 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80038dc:	21a6      	movs	r1, #166	; 0xa6
 80038de:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80038e2:	f7fd f9e9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80038e6:	2100      	movs	r1, #0
 80038e8:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80038ec:	f7fd f9e4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80038f0:	21e5      	movs	r1, #229	; 0xe5
 80038f2:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80038f6:	f7fd f9df 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80038fa:	2101      	movs	r1, #1
 80038fc:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003900:	f7fd f9da 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8003904:	2113      	movs	r1, #19
 8003906:	f24d 1011 	movw	r0, #53521	; 0xd111
 800390a:	f7fd f9d5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 800390e:	2101      	movs	r1, #1
 8003910:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003914:	f7fd f9d0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003918:	2154      	movs	r1, #84	; 0x54
 800391a:	f24d 1013 	movw	r0, #53523	; 0xd113
 800391e:	f7fd f9cb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8003922:	2101      	movs	r1, #1
 8003924:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003928:	f7fd f9c6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 800392c:	2182      	movs	r1, #130	; 0x82
 800392e:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003932:	f7fd f9c1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8003936:	2101      	movs	r1, #1
 8003938:	f24d 1016 	movw	r0, #53526	; 0xd116
 800393c:	f7fd f9bc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003940:	21ca      	movs	r1, #202	; 0xca
 8003942:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003946:	f7fd f9b7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 800394a:	2102      	movs	r1, #2
 800394c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003950:	f7fd f9b2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8003954:	2100      	movs	r1, #0
 8003956:	f24d 1019 	movw	r0, #53529	; 0xd119
 800395a:	f7fd f9ad 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 800395e:	2102      	movs	r1, #2
 8003960:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003964:	f7fd f9a8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003968:	2101      	movs	r1, #1
 800396a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800396e:	f7fd f9a3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8003972:	2102      	movs	r1, #2
 8003974:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003978:	f7fd f99e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 800397c:	2134      	movs	r1, #52	; 0x34
 800397e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003982:	f7fd f999 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8003986:	2102      	movs	r1, #2
 8003988:	f24d 101e 	movw	r0, #53534	; 0xd11e
 800398c:	f7fd f994 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003990:	2167      	movs	r1, #103	; 0x67
 8003992:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003996:	f7fd f98f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 800399a:	2102      	movs	r1, #2
 800399c:	f24d 1020 	movw	r0, #53536	; 0xd120
 80039a0:	f7fd f98a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 80039a4:	2184      	movs	r1, #132	; 0x84
 80039a6:	f24d 1021 	movw	r0, #53537	; 0xd121
 80039aa:	f7fd f985 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 80039ae:	2102      	movs	r1, #2
 80039b0:	f24d 1022 	movw	r0, #53538	; 0xd122
 80039b4:	f7fd f980 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80039b8:	21a4      	movs	r1, #164	; 0xa4
 80039ba:	f24d 1023 	movw	r0, #53539	; 0xd123
 80039be:	f7fd f97b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80039c2:	2102      	movs	r1, #2
 80039c4:	f24d 1024 	movw	r0, #53540	; 0xd124
 80039c8:	f7fd f976 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80039cc:	21b7      	movs	r1, #183	; 0xb7
 80039ce:	f24d 1025 	movw	r0, #53541	; 0xd125
 80039d2:	f7fd f971 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80039d6:	2102      	movs	r1, #2
 80039d8:	f24d 1026 	movw	r0, #53542	; 0xd126
 80039dc:	f7fd f96c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80039e0:	21cf      	movs	r1, #207	; 0xcf
 80039e2:	f24d 1027 	movw	r0, #53543	; 0xd127
 80039e6:	f7fd f967 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80039ea:	2102      	movs	r1, #2
 80039ec:	f24d 1028 	movw	r0, #53544	; 0xd128
 80039f0:	f7fd f962 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80039f4:	21de      	movs	r1, #222	; 0xde
 80039f6:	f24d 1029 	movw	r0, #53545	; 0xd129
 80039fa:	f7fd f95d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80039fe:	2102      	movs	r1, #2
 8003a00:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003a04:	f7fd f958 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003a08:	21f2      	movs	r1, #242	; 0xf2
 8003a0a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003a0e:	f7fd f953 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8003a12:	2102      	movs	r1, #2
 8003a14:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003a18:	f7fd f94e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003a1c:	21fe      	movs	r1, #254	; 0xfe
 8003a1e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003a22:	f7fd f949 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8003a26:	2103      	movs	r1, #3
 8003a28:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003a2c:	f7fd f944 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003a30:	2110      	movs	r1, #16
 8003a32:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003a36:	f7fd f93f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003a3a:	2103      	movs	r1, #3
 8003a3c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003a40:	f7fd f93a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8003a44:	2133      	movs	r1, #51	; 0x33
 8003a46:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003a4a:	f7fd f935 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003a4e:	2103      	movs	r1, #3
 8003a50:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003a54:	f7fd f930 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003a58:	216d      	movs	r1, #109	; 0x6d
 8003a5a:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003a5e:	f7fd f92b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8003a62:	2100      	movs	r1, #0
 8003a64:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003a68:	f7fd f926 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003a6c:	2133      	movs	r1, #51	; 0x33
 8003a6e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003a72:	f7fd f921 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8003a76:	2100      	movs	r1, #0
 8003a78:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003a7c:	f7fd f91c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003a80:	2134      	movs	r1, #52	; 0x34
 8003a82:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003a86:	f7fd f917 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003a90:	f7fd f912 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003a94:	213a      	movs	r1, #58	; 0x3a
 8003a96:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003a9a:	f7fd f90d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003aa4:	f7fd f908 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003aa8:	214a      	movs	r1, #74	; 0x4a
 8003aaa:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003aae:	f7fd f903 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003ab8:	f7fd f8fe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003abc:	215c      	movs	r1, #92	; 0x5c
 8003abe:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003ac2:	f7fd f8f9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003acc:	f7fd f8f4 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003ad0:	2181      	movs	r1, #129	; 0x81
 8003ad2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003ad6:	f7fd f8ef 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003ada:	2100      	movs	r1, #0
 8003adc:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003ae0:	f7fd f8ea 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003ae4:	21a6      	movs	r1, #166	; 0xa6
 8003ae6:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003aea:	f7fd f8e5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003aee:	2100      	movs	r1, #0
 8003af0:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003af4:	f7fd f8e0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003af8:	21e5      	movs	r1, #229	; 0xe5
 8003afa:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003afe:	f7fd f8db 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003b02:	2101      	movs	r1, #1
 8003b04:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003b08:	f7fd f8d6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003b0c:	2113      	movs	r1, #19
 8003b0e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003b12:	f7fd f8d1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8003b16:	2101      	movs	r1, #1
 8003b18:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003b1c:	f7fd f8cc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003b20:	2154      	movs	r1, #84	; 0x54
 8003b22:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003b26:	f7fd f8c7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003b30:	f7fd f8c2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8003b34:	2182      	movs	r1, #130	; 0x82
 8003b36:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003b3a:	f7fd f8bd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003b3e:	2101      	movs	r1, #1
 8003b40:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003b44:	f7fd f8b8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003b48:	21ca      	movs	r1, #202	; 0xca
 8003b4a:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003b4e:	f7fd f8b3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003b52:	2102      	movs	r1, #2
 8003b54:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003b58:	f7fd f8ae 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003b62:	f7fd f8a9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003b66:	2102      	movs	r1, #2
 8003b68:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003b6c:	f7fd f8a4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003b70:	2101      	movs	r1, #1
 8003b72:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003b76:	f7fd f89f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003b80:	f7fd f89a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003b84:	2134      	movs	r1, #52	; 0x34
 8003b86:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003b8a:	f7fd f895 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003b8e:	2102      	movs	r1, #2
 8003b90:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003b94:	f7fd f890 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003b98:	2167      	movs	r1, #103	; 0x67
 8003b9a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003b9e:	f7fd f88b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003ba8:	f7fd f886 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003bac:	2184      	movs	r1, #132	; 0x84
 8003bae:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003bb2:	f7fd f881 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003bbc:	f7fd f87c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003bc0:	21a4      	movs	r1, #164	; 0xa4
 8003bc2:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003bc6:	f7fd f877 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003bca:	2102      	movs	r1, #2
 8003bcc:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003bd0:	f7fd f872 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003bd4:	21b7      	movs	r1, #183	; 0xb7
 8003bd6:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003bda:	f7fd f86d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003bde:	2102      	movs	r1, #2
 8003be0:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003be4:	f7fd f868 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003be8:	21cf      	movs	r1, #207	; 0xcf
 8003bea:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003bee:	f7fd f863 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003bf8:	f7fd f85e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003bfc:	21de      	movs	r1, #222	; 0xde
 8003bfe:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003c02:	f7fd f859 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003c06:	2102      	movs	r1, #2
 8003c08:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003c0c:	f7fd f854 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003c10:	21f2      	movs	r1, #242	; 0xf2
 8003c12:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003c16:	f7fd f84f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003c20:	f7fd f84a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003c24:	21fe      	movs	r1, #254	; 0xfe
 8003c26:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003c2a:	f7fd f845 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003c2e:	2103      	movs	r1, #3
 8003c30:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003c34:	f7fd f840 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003c38:	2110      	movs	r1, #16
 8003c3a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003c3e:	f7fd f83b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003c42:	2103      	movs	r1, #3
 8003c44:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003c48:	f7fd f836 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003c4c:	2133      	movs	r1, #51	; 0x33
 8003c4e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003c52:	f7fd f831 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003c56:	2103      	movs	r1, #3
 8003c58:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003c5c:	f7fd f82c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003c60:	216d      	movs	r1, #109	; 0x6d
 8003c62:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003c66:	f7fd f827 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003c70:	f7fd f822 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003c74:	2133      	movs	r1, #51	; 0x33
 8003c76:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003c7a:	f7fd f81d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003c7e:	2100      	movs	r1, #0
 8003c80:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003c84:	f7fd f818 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003c88:	2134      	movs	r1, #52	; 0x34
 8003c8a:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003c8e:	f7fd f813 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003c92:	2100      	movs	r1, #0
 8003c94:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003c98:	f7fd f80e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003c9c:	213a      	movs	r1, #58	; 0x3a
 8003c9e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003ca2:	f7fd f809 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003cac:	f7fd f804 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003cb0:	214a      	movs	r1, #74	; 0x4a
 8003cb2:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003cb6:	f7fc ffff 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003cba:	2100      	movs	r1, #0
 8003cbc:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003cc0:	f7fc fffa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003cc4:	215c      	movs	r1, #92	; 0x5c
 8003cc6:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003cca:	f7fc fff5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003cce:	2100      	movs	r1, #0
 8003cd0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003cd4:	f7fc fff0 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003cd8:	2181      	movs	r1, #129	; 0x81
 8003cda:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003cde:	f7fc ffeb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003ce8:	f7fc ffe6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003cec:	21a6      	movs	r1, #166	; 0xa6
 8003cee:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003cf2:	f7fc ffe1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003cfc:	f7fc ffdc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003d00:	21e5      	movs	r1, #229	; 0xe5
 8003d02:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003d06:	f7fc ffd7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003d10:	f7fc ffd2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003d14:	2113      	movs	r1, #19
 8003d16:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003d1a:	f7fc ffcd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003d1e:	2101      	movs	r1, #1
 8003d20:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003d24:	f7fc ffc8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003d28:	2154      	movs	r1, #84	; 0x54
 8003d2a:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003d2e:	f7fc ffc3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003d32:	2101      	movs	r1, #1
 8003d34:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003d38:	f7fc ffbe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003d3c:	2182      	movs	r1, #130	; 0x82
 8003d3e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003d42:	f7fc ffb9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003d46:	2101      	movs	r1, #1
 8003d48:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003d4c:	f7fc ffb4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003d50:	21ca      	movs	r1, #202	; 0xca
 8003d52:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003d56:	f7fc ffaf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003d60:	f7fc ffaa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003d64:	2100      	movs	r1, #0
 8003d66:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003d6a:	f7fc ffa5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003d6e:	2102      	movs	r1, #2
 8003d70:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003d74:	f7fc ffa0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003d78:	2101      	movs	r1, #1
 8003d7a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003d7e:	f7fc ff9b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003d82:	2102      	movs	r1, #2
 8003d84:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003d88:	f7fc ff96 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003d8c:	2134      	movs	r1, #52	; 0x34
 8003d8e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003d92:	f7fc ff91 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003d96:	2102      	movs	r1, #2
 8003d98:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003d9c:	f7fc ff8c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003da0:	2167      	movs	r1, #103	; 0x67
 8003da2:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003da6:	f7fc ff87 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003daa:	2102      	movs	r1, #2
 8003dac:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003db0:	f7fc ff82 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003db4:	2184      	movs	r1, #132	; 0x84
 8003db6:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003dba:	f7fc ff7d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003dc4:	f7fc ff78 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003dc8:	21a4      	movs	r1, #164	; 0xa4
 8003dca:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003dce:	f7fc ff73 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003dd2:	2102      	movs	r1, #2
 8003dd4:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003dd8:	f7fc ff6e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003ddc:	21b7      	movs	r1, #183	; 0xb7
 8003dde:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003de2:	f7fc ff69 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003de6:	2102      	movs	r1, #2
 8003de8:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003dec:	f7fc ff64 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003df0:	21cf      	movs	r1, #207	; 0xcf
 8003df2:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003df6:	f7fc ff5f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003e00:	f7fc ff5a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003e04:	21de      	movs	r1, #222	; 0xde
 8003e06:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003e0a:	f7fc ff55 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003e0e:	2102      	movs	r1, #2
 8003e10:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003e14:	f7fc ff50 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003e18:	21f2      	movs	r1, #242	; 0xf2
 8003e1a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003e1e:	f7fc ff4b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003e22:	2102      	movs	r1, #2
 8003e24:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003e28:	f7fc ff46 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003e2c:	21fe      	movs	r1, #254	; 0xfe
 8003e2e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003e32:	f7fc ff41 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003e36:	2103      	movs	r1, #3
 8003e38:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003e3c:	f7fc ff3c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003e40:	2110      	movs	r1, #16
 8003e42:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003e46:	f7fc ff37 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003e4a:	2103      	movs	r1, #3
 8003e4c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003e50:	f7fc ff32 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003e54:	2133      	movs	r1, #51	; 0x33
 8003e56:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003e5a:	f7fc ff2d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003e5e:	2103      	movs	r1, #3
 8003e60:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003e64:	f7fc ff28 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003e68:	216d      	movs	r1, #109	; 0x6d
 8003e6a:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003e6e:	f7fc ff23 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003e72:	2100      	movs	r1, #0
 8003e74:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003e78:	f7fc ff1e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003e7c:	2133      	movs	r1, #51	; 0x33
 8003e7e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003e82:	f7fc ff19 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003e86:	2100      	movs	r1, #0
 8003e88:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003e8c:	f7fc ff14 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003e90:	2134      	movs	r1, #52	; 0x34
 8003e92:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003e96:	f7fc ff0f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003ea0:	f7fc ff0a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003ea4:	213a      	movs	r1, #58	; 0x3a
 8003ea6:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003eaa:	f7fc ff05 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003eae:	2100      	movs	r1, #0
 8003eb0:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003eb4:	f7fc ff00 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003eb8:	214a      	movs	r1, #74	; 0x4a
 8003eba:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003ebe:	f7fc fefb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003ec8:	f7fc fef6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003ecc:	215c      	movs	r1, #92	; 0x5c
 8003ece:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003ed2:	f7fc fef1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003edc:	f7fc feec 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003ee0:	2181      	movs	r1, #129	; 0x81
 8003ee2:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003ee6:	f7fc fee7 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003eea:	2100      	movs	r1, #0
 8003eec:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003ef0:	f7fc fee2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003ef4:	21a6      	movs	r1, #166	; 0xa6
 8003ef6:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003efa:	f7fc fedd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003efe:	2100      	movs	r1, #0
 8003f00:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003f04:	f7fc fed8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003f08:	21e5      	movs	r1, #229	; 0xe5
 8003f0a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003f0e:	f7fc fed3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003f12:	2101      	movs	r1, #1
 8003f14:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003f18:	f7fc fece 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003f1c:	2113      	movs	r1, #19
 8003f1e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003f22:	f7fc fec9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003f26:	2101      	movs	r1, #1
 8003f28:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003f2c:	f7fc fec4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003f30:	2154      	movs	r1, #84	; 0x54
 8003f32:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003f36:	f7fc febf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003f40:	f7fc feba 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003f44:	2182      	movs	r1, #130	; 0x82
 8003f46:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003f4a:	f7fc feb5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003f4e:	2101      	movs	r1, #1
 8003f50:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003f54:	f7fc feb0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003f58:	21ca      	movs	r1, #202	; 0xca
 8003f5a:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003f5e:	f7fc feab 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003f62:	2102      	movs	r1, #2
 8003f64:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003f68:	f7fc fea6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003f72:	f7fc fea1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003f76:	2102      	movs	r1, #2
 8003f78:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003f7c:	f7fc fe9c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003f80:	2101      	movs	r1, #1
 8003f82:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003f86:	f7fc fe97 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003f90:	f7fc fe92 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003f94:	2134      	movs	r1, #52	; 0x34
 8003f96:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003f9a:	f7fc fe8d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003fa4:	f7fc fe88 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003fa8:	2167      	movs	r1, #103	; 0x67
 8003faa:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003fae:	f7fc fe83 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003fb8:	f7fc fe7e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003fbc:	2184      	movs	r1, #132	; 0x84
 8003fbe:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003fc2:	f7fc fe79 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003fcc:	f7fc fe74 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003fd0:	21a4      	movs	r1, #164	; 0xa4
 8003fd2:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003fd6:	f7fc fe6f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003fda:	2102      	movs	r1, #2
 8003fdc:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003fe0:	f7fc fe6a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003fe4:	21b7      	movs	r1, #183	; 0xb7
 8003fe6:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003fea:	f7fc fe65 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003fee:	2102      	movs	r1, #2
 8003ff0:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003ff4:	f7fc fe60 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003ff8:	21cf      	movs	r1, #207	; 0xcf
 8003ffa:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003ffe:	f7fc fe5b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8004002:	2102      	movs	r1, #2
 8004004:	f24d 4028 	movw	r0, #54312	; 0xd428
 8004008:	f7fc fe56 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 800400c:	21de      	movs	r1, #222	; 0xde
 800400e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8004012:	f7fc fe51 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8004016:	2102      	movs	r1, #2
 8004018:	f24d 402a 	movw	r0, #54314	; 0xd42a
 800401c:	f7fc fe4c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8004020:	21f2      	movs	r1, #242	; 0xf2
 8004022:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8004026:	f7fc fe47 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 800402a:	2102      	movs	r1, #2
 800402c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8004030:	f7fc fe42 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8004034:	21fe      	movs	r1, #254	; 0xfe
 8004036:	f24d 402d 	movw	r0, #54317	; 0xd42d
 800403a:	f7fc fe3d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 800403e:	2103      	movs	r1, #3
 8004040:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8004044:	f7fc fe38 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8004048:	2110      	movs	r1, #16
 800404a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800404e:	f7fc fe33 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8004052:	2103      	movs	r1, #3
 8004054:	f24d 4030 	movw	r0, #54320	; 0xd430
 8004058:	f7fc fe2e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 800405c:	2133      	movs	r1, #51	; 0x33
 800405e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8004062:	f7fc fe29 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8004066:	2103      	movs	r1, #3
 8004068:	f24d 4032 	movw	r0, #54322	; 0xd432
 800406c:	f7fc fe24 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8004070:	216d      	movs	r1, #109	; 0x6d
 8004072:	f24d 4033 	movw	r0, #54323	; 0xd433
 8004076:	f7fc fe1f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 800407a:	2100      	movs	r1, #0
 800407c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8004080:	f7fc fe1a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8004084:	2133      	movs	r1, #51	; 0x33
 8004086:	f24d 5001 	movw	r0, #54529	; 0xd501
 800408a:	f7fc fe15 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 800408e:	2100      	movs	r1, #0
 8004090:	f24d 5002 	movw	r0, #54530	; 0xd502
 8004094:	f7fc fe10 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8004098:	2134      	movs	r1, #52	; 0x34
 800409a:	f24d 5003 	movw	r0, #54531	; 0xd503
 800409e:	f7fc fe0b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 80040a2:	2100      	movs	r1, #0
 80040a4:	f24d 5004 	movw	r0, #54532	; 0xd504
 80040a8:	f7fc fe06 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 80040ac:	213a      	movs	r1, #58	; 0x3a
 80040ae:	f24d 5005 	movw	r0, #54533	; 0xd505
 80040b2:	f7fc fe01 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 80040b6:	2100      	movs	r1, #0
 80040b8:	f24d 5006 	movw	r0, #54534	; 0xd506
 80040bc:	f7fc fdfc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 80040c0:	214a      	movs	r1, #74	; 0x4a
 80040c2:	f24d 5007 	movw	r0, #54535	; 0xd507
 80040c6:	f7fc fdf7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 80040ca:	2100      	movs	r1, #0
 80040cc:	f24d 5008 	movw	r0, #54536	; 0xd508
 80040d0:	f7fc fdf2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 80040d4:	215c      	movs	r1, #92	; 0x5c
 80040d6:	f24d 5009 	movw	r0, #54537	; 0xd509
 80040da:	f7fc fded 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 80040de:	2100      	movs	r1, #0
 80040e0:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80040e4:	f7fc fde8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 80040e8:	2181      	movs	r1, #129	; 0x81
 80040ea:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80040ee:	f7fc fde3 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 80040f2:	2100      	movs	r1, #0
 80040f4:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80040f8:	f7fc fdde 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 80040fc:	21a6      	movs	r1, #166	; 0xa6
 80040fe:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8004102:	f7fc fdd9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8004106:	2100      	movs	r1, #0
 8004108:	f24d 500e 	movw	r0, #54542	; 0xd50e
 800410c:	f7fc fdd4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8004110:	21e5      	movs	r1, #229	; 0xe5
 8004112:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8004116:	f7fc fdcf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 800411a:	2101      	movs	r1, #1
 800411c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8004120:	f7fc fdca 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8004124:	2113      	movs	r1, #19
 8004126:	f24d 5011 	movw	r0, #54545	; 0xd511
 800412a:	f7fc fdc5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 800412e:	2101      	movs	r1, #1
 8004130:	f24d 5012 	movw	r0, #54546	; 0xd512
 8004134:	f7fc fdc0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8004138:	2154      	movs	r1, #84	; 0x54
 800413a:	f24d 5013 	movw	r0, #54547	; 0xd513
 800413e:	f7fc fdbb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8004142:	2101      	movs	r1, #1
 8004144:	f24d 5014 	movw	r0, #54548	; 0xd514
 8004148:	f7fc fdb6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 800414c:	2182      	movs	r1, #130	; 0x82
 800414e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8004152:	f7fc fdb1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8004156:	2101      	movs	r1, #1
 8004158:	f24d 5016 	movw	r0, #54550	; 0xd516
 800415c:	f7fc fdac 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8004160:	21ca      	movs	r1, #202	; 0xca
 8004162:	f24d 5017 	movw	r0, #54551	; 0xd517
 8004166:	f7fc fda7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 800416a:	2102      	movs	r1, #2
 800416c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8004170:	f7fc fda2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8004174:	2100      	movs	r1, #0
 8004176:	f24d 5019 	movw	r0, #54553	; 0xd519
 800417a:	f7fc fd9d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 800417e:	2102      	movs	r1, #2
 8004180:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8004184:	f7fc fd98 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8004188:	2101      	movs	r1, #1
 800418a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 800418e:	f7fc fd93 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8004192:	2102      	movs	r1, #2
 8004194:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8004198:	f7fc fd8e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 800419c:	2134      	movs	r1, #52	; 0x34
 800419e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80041a2:	f7fc fd89 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 80041a6:	2102      	movs	r1, #2
 80041a8:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80041ac:	f7fc fd84 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 80041b0:	2167      	movs	r1, #103	; 0x67
 80041b2:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80041b6:	f7fc fd7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 80041ba:	2102      	movs	r1, #2
 80041bc:	f24d 5020 	movw	r0, #54560	; 0xd520
 80041c0:	f7fc fd7a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 80041c4:	2184      	movs	r1, #132	; 0x84
 80041c6:	f24d 5021 	movw	r0, #54561	; 0xd521
 80041ca:	f7fc fd75 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 80041ce:	2102      	movs	r1, #2
 80041d0:	f24d 5022 	movw	r0, #54562	; 0xd522
 80041d4:	f7fc fd70 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 80041d8:	21a4      	movs	r1, #164	; 0xa4
 80041da:	f24d 5023 	movw	r0, #54563	; 0xd523
 80041de:	f7fc fd6b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 80041e2:	2102      	movs	r1, #2
 80041e4:	f24d 5024 	movw	r0, #54564	; 0xd524
 80041e8:	f7fc fd66 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 80041ec:	21b7      	movs	r1, #183	; 0xb7
 80041ee:	f24d 5025 	movw	r0, #54565	; 0xd525
 80041f2:	f7fc fd61 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 80041f6:	2102      	movs	r1, #2
 80041f8:	f24d 5026 	movw	r0, #54566	; 0xd526
 80041fc:	f7fc fd5c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8004200:	21cf      	movs	r1, #207	; 0xcf
 8004202:	f24d 5027 	movw	r0, #54567	; 0xd527
 8004206:	f7fc fd57 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 800420a:	2102      	movs	r1, #2
 800420c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8004210:	f7fc fd52 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8004214:	21de      	movs	r1, #222	; 0xde
 8004216:	f24d 5029 	movw	r0, #54569	; 0xd529
 800421a:	f7fc fd4d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 800421e:	2102      	movs	r1, #2
 8004220:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8004224:	f7fc fd48 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8004228:	21f2      	movs	r1, #242	; 0xf2
 800422a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 800422e:	f7fc fd43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8004232:	2102      	movs	r1, #2
 8004234:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004238:	f7fc fd3e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 800423c:	21fe      	movs	r1, #254	; 0xfe
 800423e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8004242:	f7fc fd39 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8004246:	2103      	movs	r1, #3
 8004248:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800424c:	f7fc fd34 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004250:	2110      	movs	r1, #16
 8004252:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8004256:	f7fc fd2f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 800425a:	2103      	movs	r1, #3
 800425c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004260:	f7fc fd2a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8004264:	2133      	movs	r1, #51	; 0x33
 8004266:	f24d 5031 	movw	r0, #54577	; 0xd531
 800426a:	f7fc fd25 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 800426e:	2103      	movs	r1, #3
 8004270:	f24d 5032 	movw	r0, #54578	; 0xd532
 8004274:	f7fc fd20 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004278:	216d      	movs	r1, #109	; 0x6d
 800427a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800427e:	f7fc fd1b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8004282:	2100      	movs	r1, #0
 8004284:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004288:	f7fc fd16 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 800428c:	2133      	movs	r1, #51	; 0x33
 800428e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8004292:	f7fc fd11 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8004296:	2100      	movs	r1, #0
 8004298:	f24d 6002 	movw	r0, #54786	; 0xd602
 800429c:	f7fc fd0c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 80042a0:	2134      	movs	r1, #52	; 0x34
 80042a2:	f24d 6003 	movw	r0, #54787	; 0xd603
 80042a6:	f7fc fd07 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 80042aa:	2100      	movs	r1, #0
 80042ac:	f24d 6004 	movw	r0, #54788	; 0xd604
 80042b0:	f7fc fd02 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 80042b4:	213a      	movs	r1, #58	; 0x3a
 80042b6:	f24d 6005 	movw	r0, #54789	; 0xd605
 80042ba:	f7fc fcfd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 80042be:	2100      	movs	r1, #0
 80042c0:	f24d 6006 	movw	r0, #54790	; 0xd606
 80042c4:	f7fc fcf8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80042c8:	214a      	movs	r1, #74	; 0x4a
 80042ca:	f24d 6007 	movw	r0, #54791	; 0xd607
 80042ce:	f7fc fcf3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80042d2:	2100      	movs	r1, #0
 80042d4:	f24d 6008 	movw	r0, #54792	; 0xd608
 80042d8:	f7fc fcee 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80042dc:	215c      	movs	r1, #92	; 0x5c
 80042de:	f24d 6009 	movw	r0, #54793	; 0xd609
 80042e2:	f7fc fce9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80042e6:	2100      	movs	r1, #0
 80042e8:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80042ec:	f7fc fce4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80042f0:	2181      	movs	r1, #129	; 0x81
 80042f2:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80042f6:	f7fc fcdf 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80042fa:	2100      	movs	r1, #0
 80042fc:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004300:	f7fc fcda 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8004304:	21a6      	movs	r1, #166	; 0xa6
 8004306:	f24d 600d 	movw	r0, #54797	; 0xd60d
 800430a:	f7fc fcd5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 800430e:	2100      	movs	r1, #0
 8004310:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8004314:	f7fc fcd0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004318:	21e5      	movs	r1, #229	; 0xe5
 800431a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 800431e:	f7fc fccb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8004322:	2101      	movs	r1, #1
 8004324:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004328:	f7fc fcc6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 800432c:	2113      	movs	r1, #19
 800432e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8004332:	f7fc fcc1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8004336:	2101      	movs	r1, #1
 8004338:	f24d 6012 	movw	r0, #54802	; 0xd612
 800433c:	f7fc fcbc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004340:	2154      	movs	r1, #84	; 0x54
 8004342:	f24d 6013 	movw	r0, #54803	; 0xd613
 8004346:	f7fc fcb7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 800434a:	2101      	movs	r1, #1
 800434c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004350:	f7fc fcb2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8004354:	2182      	movs	r1, #130	; 0x82
 8004356:	f24d 6015 	movw	r0, #54805	; 0xd615
 800435a:	f7fc fcad 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 800435e:	2101      	movs	r1, #1
 8004360:	f24d 6016 	movw	r0, #54806	; 0xd616
 8004364:	f7fc fca8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004368:	21ca      	movs	r1, #202	; 0xca
 800436a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800436e:	f7fc fca3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8004372:	2102      	movs	r1, #2
 8004374:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004378:	f7fc fc9e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 800437c:	2100      	movs	r1, #0
 800437e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8004382:	f7fc fc99 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8004386:	2102      	movs	r1, #2
 8004388:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800438c:	f7fc fc94 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004390:	2101      	movs	r1, #1
 8004392:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8004396:	f7fc fc8f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 800439a:	2102      	movs	r1, #2
 800439c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80043a0:	f7fc fc8a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 80043a4:	2134      	movs	r1, #52	; 0x34
 80043a6:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80043aa:	f7fc fc85 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 80043ae:	2102      	movs	r1, #2
 80043b0:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80043b4:	f7fc fc80 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 80043b8:	2167      	movs	r1, #103	; 0x67
 80043ba:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80043be:	f7fc fc7b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 80043c2:	2102      	movs	r1, #2
 80043c4:	f24d 6020 	movw	r0, #54816	; 0xd620
 80043c8:	f7fc fc76 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80043cc:	2184      	movs	r1, #132	; 0x84
 80043ce:	f24d 6021 	movw	r0, #54817	; 0xd621
 80043d2:	f7fc fc71 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80043d6:	2102      	movs	r1, #2
 80043d8:	f24d 6022 	movw	r0, #54818	; 0xd622
 80043dc:	f7fc fc6c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80043e0:	21a4      	movs	r1, #164	; 0xa4
 80043e2:	f24d 6023 	movw	r0, #54819	; 0xd623
 80043e6:	f7fc fc67 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80043ea:	2102      	movs	r1, #2
 80043ec:	f24d 6024 	movw	r0, #54820	; 0xd624
 80043f0:	f7fc fc62 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80043f4:	21b7      	movs	r1, #183	; 0xb7
 80043f6:	f24d 6025 	movw	r0, #54821	; 0xd625
 80043fa:	f7fc fc5d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80043fe:	2102      	movs	r1, #2
 8004400:	f24d 6026 	movw	r0, #54822	; 0xd626
 8004404:	f7fc fc58 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8004408:	21cf      	movs	r1, #207	; 0xcf
 800440a:	f24d 6027 	movw	r0, #54823	; 0xd627
 800440e:	f7fc fc53 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8004412:	2102      	movs	r1, #2
 8004414:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004418:	f7fc fc4e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 800441c:	21de      	movs	r1, #222	; 0xde
 800441e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8004422:	f7fc fc49 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8004426:	2102      	movs	r1, #2
 8004428:	f24d 602a 	movw	r0, #54826	; 0xd62a
 800442c:	f7fc fc44 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004430:	21f2      	movs	r1, #242	; 0xf2
 8004432:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8004436:	f7fc fc3f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 800443a:	2102      	movs	r1, #2
 800443c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004440:	f7fc fc3a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8004444:	21fe      	movs	r1, #254	; 0xfe
 8004446:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800444a:	f7fc fc35 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 800444e:	2103      	movs	r1, #3
 8004450:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8004454:	f7fc fc30 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004458:	2110      	movs	r1, #16
 800445a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800445e:	f7fc fc2b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8004462:	2103      	movs	r1, #3
 8004464:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004468:	f7fc fc26 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 800446c:	2133      	movs	r1, #51	; 0x33
 800446e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8004472:	f7fc fc21 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8004476:	2103      	movs	r1, #3
 8004478:	f24d 6032 	movw	r0, #54834	; 0xd632
 800447c:	f7fc fc1c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004480:	216d      	movs	r1, #109	; 0x6d
 8004482:	f24d 6033 	movw	r0, #54835	; 0xd633
 8004486:	f7fc fc17 	bl	8000cb8 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 800448a:	2155      	movs	r1, #85	; 0x55
 800448c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004490:	f7fc fc12 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8004494:	21aa      	movs	r1, #170	; 0xaa
 8004496:	f24f 0001 	movw	r0, #61441	; 0xf001
 800449a:	f7fc fc0d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800449e:	2152      	movs	r1, #82	; 0x52
 80044a0:	f24f 0002 	movw	r0, #61442	; 0xf002
 80044a4:	f7fc fc08 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80044a8:	2108      	movs	r1, #8
 80044aa:	f24f 0003 	movw	r0, #61443	; 0xf003
 80044ae:	f7fc fc03 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 80044b2:	2100      	movs	r1, #0
 80044b4:	f24f 0004 	movw	r0, #61444	; 0xf004
 80044b8:	f7fc fbfe 	bl	8000cb8 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80044bc:	21cc      	movs	r1, #204	; 0xcc
 80044be:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80044c2:	f7fc fbf9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80044c6:	2100      	movs	r1, #0
 80044c8:	f24b 1001 	movw	r0, #45313	; 0xb101
 80044cc:	f7fc fbf4 	bl	8000cb8 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80044d0:	2105      	movs	r1, #5
 80044d2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80044d6:	f7fc fbef 	bl	8000cb8 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80044da:	2170      	movs	r1, #112	; 0x70
 80044dc:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80044e0:	f7fc fbea 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80044e4:	2170      	movs	r1, #112	; 0x70
 80044e6:	f24b 7001 	movw	r0, #46849	; 0xb701
 80044ea:	f7fc fbe5 	bl	8000cb8 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80044ee:	2101      	movs	r1, #1
 80044f0:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80044f4:	f7fc fbe0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80044f8:	2103      	movs	r1, #3
 80044fa:	f64b 0001 	movw	r0, #47105	; 0xb801
 80044fe:	f7fc fbdb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8004502:	2103      	movs	r1, #3
 8004504:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004508:	f7fc fbd6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 800450c:	2103      	movs	r1, #3
 800450e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8004512:	f7fc fbd1 	bl	8000cb8 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8004516:	2102      	movs	r1, #2
 8004518:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800451c:	f7fc fbcc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004520:	2100      	movs	r1, #0
 8004522:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004526:	f7fc fbc7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800452a:	2100      	movs	r1, #0
 800452c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004530:	f7fc fbc2 	bl	8000cb8 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8004534:	21d0      	movs	r1, #208	; 0xd0
 8004536:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800453a:	f7fc fbbd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 800453e:	2102      	movs	r1, #2
 8004540:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004544:	f7fc fbb8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004548:	2150      	movs	r1, #80	; 0x50
 800454a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800454e:	f7fc fbb3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8004552:	2150      	movs	r1, #80	; 0x50
 8004554:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004558:	f7fc fbae 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 800455c:	2150      	movs	r1, #80	; 0x50
 800455e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8004562:	f7fc fba9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8004566:	2100      	movs	r1, #0
 8004568:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 800456c:	f7fc fba4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004570:	2155      	movs	r1, #85	; 0x55
 8004572:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004576:	f7fc fb9f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800457a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800457e:	f7fc fb0f 	bl	8000ba0 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8004582:	2001      	movs	r0, #1
 8004584:	f002 fc36 	bl	8006df4 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004588:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 800458c:	f7fc fb08 	bl	8000ba0 <LCD_WR_REG>
 8004590:	f001 bd18 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8004594:	4bec      	ldr	r3, [pc, #944]	; (8004948 <LCD_Init+0x27b8>)
 8004596:	889b      	ldrh	r3, [r3, #4]
 8004598:	f249 3225 	movw	r2, #37669	; 0x9325
 800459c:	4293      	cmp	r3, r2
 800459e:	f040 80d7 	bne.w	8004750 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 80045a2:	f647 01f0 	movw	r1, #30960	; 0x78f0
 80045a6:	20e5      	movs	r0, #229	; 0xe5
 80045a8:	f7fc fb86 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 80045ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045b0:	2001      	movs	r0, #1
 80045b2:	f7fc fb81 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80045b6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80045ba:	2002      	movs	r0, #2
 80045bc:	f7fc fb7c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80045c0:	f241 0130 	movw	r1, #4144	; 0x1030
 80045c4:	2003      	movs	r0, #3
 80045c6:	f7fc fb77 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80045ca:	2100      	movs	r1, #0
 80045cc:	2004      	movs	r0, #4
 80045ce:	f7fc fb73 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80045d2:	f240 2102 	movw	r1, #514	; 0x202
 80045d6:	2008      	movs	r0, #8
 80045d8:	f7fc fb6e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80045dc:	2100      	movs	r1, #0
 80045de:	2009      	movs	r0, #9
 80045e0:	f7fc fb6a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80045e4:	2100      	movs	r1, #0
 80045e6:	200a      	movs	r0, #10
 80045e8:	f7fc fb66 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80045ec:	2100      	movs	r1, #0
 80045ee:	200c      	movs	r0, #12
 80045f0:	f7fc fb62 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80045f4:	2100      	movs	r1, #0
 80045f6:	200d      	movs	r0, #13
 80045f8:	f7fc fb5e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80045fc:	2100      	movs	r1, #0
 80045fe:	200f      	movs	r0, #15
 8004600:	f7fc fb5a 	bl	8000cb8 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8004604:	2100      	movs	r1, #0
 8004606:	2010      	movs	r0, #16
 8004608:	f7fc fb56 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800460c:	2107      	movs	r1, #7
 800460e:	2011      	movs	r0, #17
 8004610:	f7fc fb52 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004614:	2100      	movs	r1, #0
 8004616:	2012      	movs	r0, #18
 8004618:	f7fc fb4e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800461c:	2100      	movs	r1, #0
 800461e:	2013      	movs	r0, #19
 8004620:	f7fc fb4a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8004624:	2100      	movs	r1, #0
 8004626:	2007      	movs	r0, #7
 8004628:	f7fc fb46 	bl	8000cb8 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 800462c:	f241 6190 	movw	r1, #5776	; 0x1690
 8004630:	2010      	movs	r0, #16
 8004632:	f7fc fb41 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004636:	f240 2127 	movw	r1, #551	; 0x227
 800463a:	2011      	movs	r0, #17
 800463c:	f7fc fb3c 	bl	8000cb8 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004640:	219d      	movs	r1, #157	; 0x9d
 8004642:	2012      	movs	r0, #18
 8004644:	f7fc fb38 	bl	8000cb8 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004648:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800464c:	2013      	movs	r0, #19
 800464e:	f7fc fb33 	bl	8000cb8 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8004652:	2125      	movs	r1, #37	; 0x25
 8004654:	2029      	movs	r0, #41	; 0x29
 8004656:	f7fc fb2f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 800465a:	210d      	movs	r1, #13
 800465c:	202b      	movs	r0, #43	; 0x2b
 800465e:	f7fc fb2b 	bl	8000cb8 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8004662:	2107      	movs	r1, #7
 8004664:	2030      	movs	r0, #48	; 0x30
 8004666:	f7fc fb27 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 800466a:	f240 3103 	movw	r1, #771	; 0x303
 800466e:	2031      	movs	r0, #49	; 0x31
 8004670:	f7fc fb22 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8004674:	2103      	movs	r1, #3
 8004676:	2032      	movs	r0, #50	; 0x32
 8004678:	f7fc fb1e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 800467c:	f240 2106 	movw	r1, #518	; 0x206
 8004680:	2035      	movs	r0, #53	; 0x35
 8004682:	f7fc fb19 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8004686:	2108      	movs	r1, #8
 8004688:	2036      	movs	r0, #54	; 0x36
 800468a:	f7fc fb15 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 800468e:	f240 4106 	movw	r1, #1030	; 0x406
 8004692:	2037      	movs	r0, #55	; 0x37
 8004694:	f7fc fb10 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004698:	f44f 7141 	mov.w	r1, #772	; 0x304
 800469c:	2038      	movs	r0, #56	; 0x38
 800469e:	f7fc fb0b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 80046a2:	2107      	movs	r1, #7
 80046a4:	2039      	movs	r0, #57	; 0x39
 80046a6:	f7fc fb07 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 80046aa:	f240 6102 	movw	r1, #1538	; 0x602
 80046ae:	203c      	movs	r0, #60	; 0x3c
 80046b0:	f7fc fb02 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 80046b4:	2108      	movs	r1, #8
 80046b6:	203d      	movs	r0, #61	; 0x3d
 80046b8:	f7fc fafe 	bl	8000cb8 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80046bc:	2100      	movs	r1, #0
 80046be:	2050      	movs	r0, #80	; 0x50
 80046c0:	f7fc fafa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80046c4:	21ef      	movs	r1, #239	; 0xef
 80046c6:	2051      	movs	r0, #81	; 0x51
 80046c8:	f7fc faf6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80046cc:	2100      	movs	r1, #0
 80046ce:	2052      	movs	r0, #82	; 0x52
 80046d0:	f7fc faf2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80046d4:	f240 113f 	movw	r1, #319	; 0x13f
 80046d8:	2053      	movs	r0, #83	; 0x53
 80046da:	f7fc faed 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80046de:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80046e2:	2060      	movs	r0, #96	; 0x60
 80046e4:	f7fc fae8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80046e8:	2101      	movs	r1, #1
 80046ea:	2061      	movs	r0, #97	; 0x61
 80046ec:	f7fc fae4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80046f0:	2100      	movs	r1, #0
 80046f2:	206a      	movs	r0, #106	; 0x6a
 80046f4:	f7fc fae0 	bl	8000cb8 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80046f8:	2100      	movs	r1, #0
 80046fa:	2080      	movs	r0, #128	; 0x80
 80046fc:	f7fc fadc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004700:	2100      	movs	r1, #0
 8004702:	2081      	movs	r0, #129	; 0x81
 8004704:	f7fc fad8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004708:	2100      	movs	r1, #0
 800470a:	2082      	movs	r0, #130	; 0x82
 800470c:	f7fc fad4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004710:	2100      	movs	r1, #0
 8004712:	2083      	movs	r0, #131	; 0x83
 8004714:	f7fc fad0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004718:	2100      	movs	r1, #0
 800471a:	2084      	movs	r0, #132	; 0x84
 800471c:	f7fc facc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004720:	2100      	movs	r1, #0
 8004722:	2085      	movs	r0, #133	; 0x85
 8004724:	f7fc fac8 	bl	8000cb8 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004728:	2110      	movs	r1, #16
 800472a:	2090      	movs	r0, #144	; 0x90
 800472c:	f7fc fac4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004730:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004734:	2092      	movs	r0, #146	; 0x92
 8004736:	f7fc fabf 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 800473a:	f240 1133 	movw	r1, #307	; 0x133
 800473e:	2007      	movs	r0, #7
 8004740:	f7fc faba 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8004744:	2122      	movs	r1, #34	; 0x22
 8004746:	2000      	movs	r0, #0
 8004748:	f7fc fab6 	bl	8000cb8 <LCD_WriteReg>
 800474c:	f001 bc3a 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004750:	4b7d      	ldr	r3, [pc, #500]	; (8004948 <LCD_Init+0x27b8>)
 8004752:	889b      	ldrh	r3, [r3, #4]
 8004754:	f249 3228 	movw	r2, #37672	; 0x9328
 8004758:	4293      	cmp	r3, r2
 800475a:	f040 80f7 	bne.w	800494c <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 800475e:	f241 018f 	movw	r1, #4239	; 0x108f
 8004762:	20ec      	movs	r0, #236	; 0xec
 8004764:	f7fc faa8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004768:	f241 2134 	movw	r1, #4660	; 0x1234
 800476c:	20ef      	movs	r0, #239	; 0xef
 800476e:	f7fc faa3 	bl	8000cb8 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8004772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004776:	2001      	movs	r0, #1
 8004778:	f7fc fa9e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 800477c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004780:	2002      	movs	r0, #2
 8004782:	f7fc fa99 	bl	8000cb8 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8004786:	f241 0130 	movw	r1, #4144	; 0x1030
 800478a:	2003      	movs	r0, #3
 800478c:	f7fc fa94 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004790:	2100      	movs	r1, #0
 8004792:	2004      	movs	r0, #4
 8004794:	f7fc fa90 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004798:	f240 2102 	movw	r1, #514	; 0x202
 800479c:	2008      	movs	r0, #8
 800479e:	f7fc fa8b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80047a2:	2100      	movs	r1, #0
 80047a4:	2009      	movs	r0, #9
 80047a6:	f7fc fa87 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 80047aa:	2100      	movs	r1, #0
 80047ac:	200a      	movs	r0, #10
 80047ae:	f7fc fa83 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 80047b2:	2101      	movs	r1, #1
 80047b4:	200c      	movs	r0, #12
 80047b6:	f7fc fa7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80047ba:	2100      	movs	r1, #0
 80047bc:	200d      	movs	r0, #13
 80047be:	f7fc fa7b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80047c2:	2100      	movs	r1, #0
 80047c4:	200f      	movs	r0, #15
 80047c6:	f7fc fa77 	bl	8000cb8 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80047ca:	2100      	movs	r1, #0
 80047cc:	2010      	movs	r0, #16
 80047ce:	f7fc fa73 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80047d2:	2107      	movs	r1, #7
 80047d4:	2011      	movs	r0, #17
 80047d6:	f7fc fa6f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80047da:	2100      	movs	r1, #0
 80047dc:	2012      	movs	r0, #18
 80047de:	f7fc fa6b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80047e2:	2100      	movs	r1, #0
 80047e4:	2013      	movs	r0, #19
 80047e6:	f7fc fa67 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80047ea:	2101      	movs	r1, #1
 80047ec:	2007      	movs	r0, #7
 80047ee:	f7fc fa63 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 80047f2:	2032      	movs	r0, #50	; 0x32
 80047f4:	f002 fafe 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80047f8:	f241 4190 	movw	r1, #5264	; 0x1490
 80047fc:	2010      	movs	r0, #16
 80047fe:	f7fc fa5b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004802:	f240 2127 	movw	r1, #551	; 0x227
 8004806:	2011      	movs	r0, #17
 8004808:	f7fc fa56 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 800480c:	2032      	movs	r0, #50	; 0x32
 800480e:	f002 faf1 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8004812:	218a      	movs	r1, #138	; 0x8a
 8004814:	2012      	movs	r0, #18
 8004816:	f7fc fa4f 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 800481a:	2032      	movs	r0, #50	; 0x32
 800481c:	f002 faea 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004820:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8004824:	2013      	movs	r0, #19
 8004826:	f7fc fa47 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 800482a:	2106      	movs	r1, #6
 800482c:	2029      	movs	r0, #41	; 0x29
 800482e:	f7fc fa43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8004832:	210d      	movs	r1, #13
 8004834:	202b      	movs	r0, #43	; 0x2b
 8004836:	f7fc fa3f 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 800483a:	2032      	movs	r0, #50	; 0x32
 800483c:	f002 fada 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004840:	2100      	movs	r1, #0
 8004842:	2020      	movs	r0, #32
 8004844:	f7fc fa38 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004848:	2100      	movs	r1, #0
 800484a:	2021      	movs	r0, #33	; 0x21
 800484c:	f7fc fa34 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004850:	2032      	movs	r0, #50	; 0x32
 8004852:	f002 facf 	bl	8006df4 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8004856:	2100      	movs	r1, #0
 8004858:	2030      	movs	r0, #48	; 0x30
 800485a:	f7fc fa2d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 800485e:	f240 6104 	movw	r1, #1540	; 0x604
 8004862:	2031      	movs	r0, #49	; 0x31
 8004864:	f7fc fa28 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004868:	f240 3105 	movw	r1, #773	; 0x305
 800486c:	2032      	movs	r0, #50	; 0x32
 800486e:	f7fc fa23 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8004872:	2100      	movs	r1, #0
 8004874:	2035      	movs	r0, #53	; 0x35
 8004876:	f7fc fa1f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 800487a:	f640 4109 	movw	r1, #3081	; 0xc09
 800487e:	2036      	movs	r0, #54	; 0x36
 8004880:	f7fc fa1a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8004884:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004888:	2037      	movs	r0, #55	; 0x37
 800488a:	f7fc fa15 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 800488e:	f240 3101 	movw	r1, #769	; 0x301
 8004892:	2038      	movs	r0, #56	; 0x38
 8004894:	f7fc fa10 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004898:	f240 7107 	movw	r1, #1799	; 0x707
 800489c:	2039      	movs	r0, #57	; 0x39
 800489e:	f7fc fa0b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 80048a2:	2100      	movs	r1, #0
 80048a4:	203c      	movs	r0, #60	; 0x3c
 80048a6:	f7fc fa07 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 80048aa:	f640 210a 	movw	r1, #2570	; 0xa0a
 80048ae:	203d      	movs	r0, #61	; 0x3d
 80048b0:	f7fc fa02 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 80048b4:	2032      	movs	r0, #50	; 0x32
 80048b6:	f002 fa9d 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80048ba:	2100      	movs	r1, #0
 80048bc:	2050      	movs	r0, #80	; 0x50
 80048be:	f7fc f9fb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80048c2:	21ef      	movs	r1, #239	; 0xef
 80048c4:	2051      	movs	r0, #81	; 0x51
 80048c6:	f7fc f9f7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80048ca:	2100      	movs	r1, #0
 80048cc:	2052      	movs	r0, #82	; 0x52
 80048ce:	f7fc f9f3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80048d2:	f240 113f 	movw	r1, #319	; 0x13f
 80048d6:	2053      	movs	r0, #83	; 0x53
 80048d8:	f7fc f9ee 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80048dc:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80048e0:	2060      	movs	r0, #96	; 0x60
 80048e2:	f7fc f9e9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80048e6:	2101      	movs	r1, #1
 80048e8:	2061      	movs	r0, #97	; 0x61
 80048ea:	f7fc f9e5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80048ee:	2100      	movs	r1, #0
 80048f0:	206a      	movs	r0, #106	; 0x6a
 80048f2:	f7fc f9e1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80048f6:	2100      	movs	r1, #0
 80048f8:	2080      	movs	r0, #128	; 0x80
 80048fa:	f7fc f9dd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80048fe:	2100      	movs	r1, #0
 8004900:	2081      	movs	r0, #129	; 0x81
 8004902:	f7fc f9d9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004906:	2100      	movs	r1, #0
 8004908:	2082      	movs	r0, #130	; 0x82
 800490a:	f7fc f9d5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800490e:	2100      	movs	r1, #0
 8004910:	2083      	movs	r0, #131	; 0x83
 8004912:	f7fc f9d1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004916:	2100      	movs	r1, #0
 8004918:	2084      	movs	r0, #132	; 0x84
 800491a:	f7fc f9cd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800491e:	2100      	movs	r1, #0
 8004920:	2085      	movs	r0, #133	; 0x85
 8004922:	f7fc f9c9 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8004926:	2110      	movs	r1, #16
 8004928:	2090      	movs	r0, #144	; 0x90
 800492a:	f7fc f9c5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 800492e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004932:	2092      	movs	r0, #146	; 0x92
 8004934:	f7fc f9c0 	bl	8000cb8 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004938:	f240 1133 	movw	r1, #307	; 0x133
 800493c:	2007      	movs	r0, #7
 800493e:	f7fc f9bb 	bl	8000cb8 <LCD_WriteReg>
 8004942:	f001 bb3f 	b.w	8005fc4 <LCD_Init+0x3e34>
 8004946:	bf00      	nop
 8004948:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0x9320) //测试OK.
 800494c:	4bce      	ldr	r3, [pc, #824]	; (8004c88 <LCD_Init+0x2af8>)
 800494e:	889b      	ldrh	r3, [r3, #4]
 8004950:	f249 3220 	movw	r2, #37664	; 0x9320
 8004954:	4293      	cmp	r3, r2
 8004956:	f040 80ad 	bne.w	8004ab4 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 800495a:	2100      	movs	r1, #0
 800495c:	2000      	movs	r0, #0
 800495e:	f7fc f9ab 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8004962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004966:	2001      	movs	r0, #1
 8004968:	f7fc f9a6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 800496c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004970:	2002      	movs	r0, #2
 8004972:	f7fc f9a1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8004976:	f241 0130 	movw	r1, #4144	; 0x1030
 800497a:	2003      	movs	r0, #3
 800497c:	f7fc f99c 	bl	8000cb8 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004980:	2100      	movs	r1, #0
 8004982:	2004      	movs	r0, #4
 8004984:	f7fc f998 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004988:	f240 2102 	movw	r1, #514	; 0x202
 800498c:	2008      	movs	r0, #8
 800498e:	f7fc f993 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8004992:	2100      	movs	r1, #0
 8004994:	2009      	movs	r0, #9
 8004996:	f7fc f98f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 800499a:	2100      	movs	r1, #0
 800499c:	200a      	movs	r0, #10
 800499e:	f7fc f98b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 80049a2:	2101      	movs	r1, #1
 80049a4:	200c      	movs	r0, #12
 80049a6:	f7fc f987 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 80049aa:	2100      	movs	r1, #0
 80049ac:	200d      	movs	r0, #13
 80049ae:	f7fc f983 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 80049b2:	2100      	movs	r1, #0
 80049b4:	200f      	movs	r0, #15
 80049b6:	f7fc f97f 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 80049ba:	2032      	movs	r0, #50	; 0x32
 80049bc:	f002 fa1a 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80049c0:	f240 1101 	movw	r1, #257	; 0x101
 80049c4:	2007      	movs	r0, #7
 80049c6:	f7fc f977 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 80049ca:	2032      	movs	r0, #50	; 0x32
 80049cc:	f002 fa12 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80049d0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80049d4:	2010      	movs	r0, #16
 80049d6:	f7fc f96f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80049da:	2107      	movs	r1, #7
 80049dc:	2011      	movs	r0, #17
 80049de:	f7fc f96b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80049e2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80049e6:	2012      	movs	r0, #18
 80049e8:	f7fc f966 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80049ec:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80049f0:	2013      	movs	r0, #19
 80049f2:	f7fc f961 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80049f6:	2100      	movs	r1, #0
 80049f8:	2029      	movs	r0, #41	; 0x29
 80049fa:	f7fc f95d 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80049fe:	f244 0110 	movw	r1, #16400	; 0x4010
 8004a02:	202b      	movs	r0, #43	; 0x2b
 8004a04:	f7fc f958 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004a08:	2100      	movs	r1, #0
 8004a0a:	2050      	movs	r0, #80	; 0x50
 8004a0c:	f7fc f954 	bl	8000cb8 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004a10:	21ef      	movs	r1, #239	; 0xef
 8004a12:	2051      	movs	r0, #81	; 0x51
 8004a14:	f7fc f950 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2052      	movs	r0, #82	; 0x52
 8004a1c:	f7fc f94c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004a20:	f240 113f 	movw	r1, #319	; 0x13f
 8004a24:	2053      	movs	r0, #83	; 0x53
 8004a26:	f7fc f947 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004a2a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a2e:	2060      	movs	r0, #96	; 0x60
 8004a30:	f7fc f942 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8004a34:	2101      	movs	r1, #1
 8004a36:	2061      	movs	r0, #97	; 0x61
 8004a38:	f7fc f93e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	206a      	movs	r0, #106	; 0x6a
 8004a40:	f7fc f93a 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8004a44:	2100      	movs	r1, #0
 8004a46:	2080      	movs	r0, #128	; 0x80
 8004a48:	f7fc f936 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	2081      	movs	r0, #129	; 0x81
 8004a50:	f7fc f932 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8004a54:	2100      	movs	r1, #0
 8004a56:	2082      	movs	r0, #130	; 0x82
 8004a58:	f7fc f92e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	2083      	movs	r0, #131	; 0x83
 8004a60:	f7fc f92a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8004a64:	2100      	movs	r1, #0
 8004a66:	2084      	movs	r0, #132	; 0x84
 8004a68:	f7fc f926 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	2085      	movs	r0, #133	; 0x85
 8004a70:	f7fc f922 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8004a74:	2110      	movs	r1, #16
 8004a76:	2090      	movs	r0, #144	; 0x90
 8004a78:	f7fc f91e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	2092      	movs	r0, #146	; 0x92
 8004a80:	f7fc f91a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8004a84:	2101      	movs	r1, #1
 8004a86:	2093      	movs	r0, #147	; 0x93
 8004a88:	f7fc f916 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004a8c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004a90:	2095      	movs	r0, #149	; 0x95
 8004a92:	f7fc f911 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004a96:	2100      	movs	r1, #0
 8004a98:	2097      	movs	r0, #151	; 0x97
 8004a9a:	f7fc f90d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	2098      	movs	r0, #152	; 0x98
 8004aa2:	f7fc f909 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004aa6:	f240 1173 	movw	r1, #371	; 0x173
 8004aaa:	2007      	movs	r0, #7
 8004aac:	f7fc f904 	bl	8000cb8 <LCD_WriteReg>
 8004ab0:	f001 ba88 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004ab4:	4b74      	ldr	r3, [pc, #464]	; (8004c88 <LCD_Init+0x2af8>)
 8004ab6:	889b      	ldrh	r3, [r3, #4]
 8004ab8:	f249 3231 	movw	r2, #37681	; 0x9331
 8004abc:	4293      	cmp	r3, r2
 8004abe:	f040 80e5 	bne.w	8004c8c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004ac2:	f241 0114 	movw	r1, #4116	; 0x1014
 8004ac6:	20e7      	movs	r0, #231	; 0xe7
 8004ac8:	f7fc f8f6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	f7fc f8f1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ada:	2002      	movs	r0, #2
 8004adc:	f7fc f8ec 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004ae0:	f241 0138 	movw	r1, #4152	; 0x1038
 8004ae4:	2003      	movs	r0, #3
 8004ae6:	f7fc f8e7 	bl	8000cb8 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004aea:	f240 2102 	movw	r1, #514	; 0x202
 8004aee:	2008      	movs	r0, #8
 8004af0:	f7fc f8e2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004af4:	2100      	movs	r1, #0
 8004af6:	2009      	movs	r0, #9
 8004af8:	f7fc f8de 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004afc:	2100      	movs	r1, #0
 8004afe:	200a      	movs	r0, #10
 8004b00:	f7fc f8da 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004b04:	2100      	movs	r1, #0
 8004b06:	200c      	movs	r0, #12
 8004b08:	f7fc f8d6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	200d      	movs	r0, #13
 8004b10:	f7fc f8d2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004b14:	2100      	movs	r1, #0
 8004b16:	200f      	movs	r0, #15
 8004b18:	f7fc f8ce 	bl	8000cb8 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	2010      	movs	r0, #16
 8004b20:	f7fc f8ca 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004b24:	2107      	movs	r1, #7
 8004b26:	2011      	movs	r0, #17
 8004b28:	f7fc f8c6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	2012      	movs	r0, #18
 8004b30:	f7fc f8c2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004b34:	2100      	movs	r1, #0
 8004b36:	2013      	movs	r0, #19
 8004b38:	f7fc f8be 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004b3c:	20c8      	movs	r0, #200	; 0xc8
 8004b3e:	f002 f959 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004b42:	f241 6190 	movw	r1, #5776	; 0x1690
 8004b46:	2010      	movs	r0, #16
 8004b48:	f7fc f8b6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004b4c:	f240 2127 	movw	r1, #551	; 0x227
 8004b50:	2011      	movs	r0, #17
 8004b52:	f7fc f8b1 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b56:	2032      	movs	r0, #50	; 0x32
 8004b58:	f002 f94c 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004b5c:	210c      	movs	r1, #12
 8004b5e:	2012      	movs	r0, #18
 8004b60:	f7fc f8aa 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b64:	2032      	movs	r0, #50	; 0x32
 8004b66:	f002 f945 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004b6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b6e:	2013      	movs	r0, #19
 8004b70:	f7fc f8a2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004b74:	2111      	movs	r1, #17
 8004b76:	2029      	movs	r0, #41	; 0x29
 8004b78:	f7fc f89e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004b7c:	210b      	movs	r1, #11
 8004b7e:	202b      	movs	r0, #43	; 0x2b
 8004b80:	f7fc f89a 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b84:	2032      	movs	r0, #50	; 0x32
 8004b86:	f002 f935 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	2020      	movs	r0, #32
 8004b8e:	f7fc f893 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004b92:	f240 113f 	movw	r1, #319	; 0x13f
 8004b96:	2021      	movs	r0, #33	; 0x21
 8004b98:	f7fc f88e 	bl	8000cb8 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	2030      	movs	r0, #48	; 0x30
 8004ba0:	f7fc f88a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004ba4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004ba8:	2031      	movs	r0, #49	; 0x31
 8004baa:	f7fc f885 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004bae:	2100      	movs	r1, #0
 8004bb0:	2032      	movs	r0, #50	; 0x32
 8004bb2:	f7fc f881 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004bb6:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004bba:	2035      	movs	r0, #53	; 0x35
 8004bbc:	f7fc f87c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004bc0:	f241 610a 	movw	r1, #5642	; 0x160a
 8004bc4:	2036      	movs	r0, #54	; 0x36
 8004bc6:	f7fc f877 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004bca:	f240 7107 	movw	r1, #1799	; 0x707
 8004bce:	2037      	movs	r0, #55	; 0x37
 8004bd0:	f7fc f872 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004bd4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004bd8:	2038      	movs	r0, #56	; 0x38
 8004bda:	f7fc f86d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004bde:	f240 7107 	movw	r1, #1799	; 0x707
 8004be2:	2039      	movs	r0, #57	; 0x39
 8004be4:	f7fc f868 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004be8:	f240 4102 	movw	r1, #1026	; 0x402
 8004bec:	203c      	movs	r0, #60	; 0x3c
 8004bee:	f7fc f863 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004bf2:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004bf6:	203d      	movs	r0, #61	; 0x3d
 8004bf8:	f7fc f85e 	bl	8000cb8 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	2050      	movs	r0, #80	; 0x50
 8004c00:	f7fc f85a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004c04:	21ef      	movs	r1, #239	; 0xef
 8004c06:	2051      	movs	r0, #81	; 0x51
 8004c08:	f7fc f856 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	2052      	movs	r0, #82	; 0x52
 8004c10:	f7fc f852 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004c14:	f240 113f 	movw	r1, #319	; 0x13f
 8004c18:	2053      	movs	r0, #83	; 0x53
 8004c1a:	f7fc f84d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004c1e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004c22:	2060      	movs	r0, #96	; 0x60
 8004c24:	f7fc f848 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004c28:	2101      	movs	r1, #1
 8004c2a:	2061      	movs	r0, #97	; 0x61
 8004c2c:	f7fc f844 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004c30:	2100      	movs	r1, #0
 8004c32:	206a      	movs	r0, #106	; 0x6a
 8004c34:	f7fc f840 	bl	8000cb8 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004c38:	2100      	movs	r1, #0
 8004c3a:	2080      	movs	r0, #128	; 0x80
 8004c3c:	f7fc f83c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004c40:	2100      	movs	r1, #0
 8004c42:	2081      	movs	r0, #129	; 0x81
 8004c44:	f7fc f838 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004c48:	2100      	movs	r1, #0
 8004c4a:	2082      	movs	r0, #130	; 0x82
 8004c4c:	f7fc f834 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004c50:	2100      	movs	r1, #0
 8004c52:	2083      	movs	r0, #131	; 0x83
 8004c54:	f7fc f830 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004c58:	2100      	movs	r1, #0
 8004c5a:	2084      	movs	r0, #132	; 0x84
 8004c5c:	f7fc f82c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004c60:	2100      	movs	r1, #0
 8004c62:	2085      	movs	r0, #133	; 0x85
 8004c64:	f7fc f828 	bl	8000cb8 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004c68:	2110      	movs	r1, #16
 8004c6a:	2090      	movs	r0, #144	; 0x90
 8004c6c:	f7fc f824 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004c70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c74:	2092      	movs	r0, #146	; 0x92
 8004c76:	f7fc f81f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004c7a:	f240 1133 	movw	r1, #307	; 0x133
 8004c7e:	2007      	movs	r0, #7
 8004c80:	f7fc f81a 	bl	8000cb8 <LCD_WriteReg>
 8004c84:	f001 b99e 	b.w	8005fc4 <LCD_Init+0x3e34>
 8004c88:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0x5408) {
 8004c8c:	4be2      	ldr	r3, [pc, #904]	; (8005018 <LCD_Init+0x2e88>)
 8004c8e:	889b      	ldrh	r3, [r3, #4]
 8004c90:	f245 4208 	movw	r2, #21512	; 0x5408
 8004c94:	4293      	cmp	r3, r2
 8004c96:	f040 80a3 	bne.w	8004de0 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004c9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	f7fc f80a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004ca4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004ca8:	2002      	movs	r0, #2
 8004caa:	f7fc f805 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004cae:	f241 0130 	movw	r1, #4144	; 0x1030
 8004cb2:	2003      	movs	r0, #3
 8004cb4:	f7fc f800 	bl	8000cb8 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004cb8:	2100      	movs	r1, #0
 8004cba:	2004      	movs	r0, #4
 8004cbc:	f7fb fffc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004cc0:	f240 2107 	movw	r1, #519	; 0x207
 8004cc4:	2008      	movs	r0, #8
 8004cc6:	f7fb fff7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004cca:	2100      	movs	r1, #0
 8004ccc:	2009      	movs	r0, #9
 8004cce:	f7fb fff3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	200a      	movs	r0, #10
 8004cd6:	f7fb ffef 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004cda:	2100      	movs	r1, #0
 8004cdc:	200c      	movs	r0, #12
 8004cde:	f7fb ffeb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	200d      	movs	r0, #13
 8004ce6:	f7fb ffe7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004cea:	2100      	movs	r1, #0
 8004cec:	200f      	movs	r0, #15
 8004cee:	f7fb ffe3 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8004cf2:	2014      	movs	r0, #20
 8004cf4:	f002 f87e 	bl	8006df4 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004cf8:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004cfc:	2010      	movs	r0, #16
 8004cfe:	f7fb ffdb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004d02:	2101      	movs	r1, #1
 8004d04:	2011      	movs	r0, #17
 8004d06:	f7fb ffd7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	2017      	movs	r0, #23
 8004d0e:	f7fb ffd3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004d12:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004d16:	2012      	movs	r0, #18
 8004d18:	f7fb ffce 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004d1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d20:	2013      	movs	r0, #19
 8004d22:	f7fb ffc9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004d26:	2109      	movs	r1, #9
 8004d28:	2029      	movs	r0, #41	; 0x29
 8004d2a:	f7fb ffc5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004d2e:	2109      	movs	r1, #9
 8004d30:	202a      	movs	r0, #42	; 0x2a
 8004d32:	f7fb ffc1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004d36:	2100      	movs	r1, #0
 8004d38:	20a4      	movs	r0, #164	; 0xa4
 8004d3a:	f7fb ffbd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004d3e:	2100      	movs	r1, #0
 8004d40:	2050      	movs	r0, #80	; 0x50
 8004d42:	f7fb ffb9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004d46:	21ef      	movs	r1, #239	; 0xef
 8004d48:	2051      	movs	r0, #81	; 0x51
 8004d4a:	f7fb ffb5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004d4e:	2100      	movs	r1, #0
 8004d50:	2052      	movs	r0, #82	; 0x52
 8004d52:	f7fb ffb1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004d56:	f240 113f 	movw	r1, #319	; 0x13f
 8004d5a:	2053      	movs	r0, #83	; 0x53
 8004d5c:	f7fb ffac 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004d60:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004d64:	2060      	movs	r0, #96	; 0x60
 8004d66:	f7fb ffa7 	bl	8000cb8 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	2061      	movs	r0, #97	; 0x61
 8004d6e:	f7fb ffa3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004d72:	2100      	movs	r1, #0
 8004d74:	206a      	movs	r0, #106	; 0x6a
 8004d76:	f7fb ff9f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	2080      	movs	r0, #128	; 0x80
 8004d7e:	f7fb ff9b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004d82:	2100      	movs	r1, #0
 8004d84:	2081      	movs	r0, #129	; 0x81
 8004d86:	f7fb ff97 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	2082      	movs	r0, #130	; 0x82
 8004d8e:	f7fb ff93 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004d92:	2100      	movs	r1, #0
 8004d94:	2083      	movs	r0, #131	; 0x83
 8004d96:	f7fb ff8f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	2084      	movs	r0, #132	; 0x84
 8004d9e:	f7fb ff8b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004da2:	2100      	movs	r1, #0
 8004da4:	2085      	movs	r0, #133	; 0x85
 8004da6:	f7fb ff87 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004daa:	2113      	movs	r1, #19
 8004dac:	2090      	movs	r0, #144	; 0x90
 8004dae:	f7fb ff83 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004db2:	2100      	movs	r1, #0
 8004db4:	2092      	movs	r0, #146	; 0x92
 8004db6:	f7fb ff7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004dba:	2103      	movs	r1, #3
 8004dbc:	2093      	movs	r0, #147	; 0x93
 8004dbe:	f7fb ff7b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004dc2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004dc6:	2095      	movs	r0, #149	; 0x95
 8004dc8:	f7fb ff76 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004dcc:	f240 1173 	movw	r1, #371	; 0x173
 8004dd0:	2007      	movs	r0, #7
 8004dd2:	f7fb ff71 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004dd6:	2032      	movs	r0, #50	; 0x32
 8004dd8:	f002 f80c 	bl	8006df4 <HAL_Delay>
 8004ddc:	f001 b8f2 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004de0:	4b8d      	ldr	r3, [pc, #564]	; (8005018 <LCD_Init+0x2e88>)
 8004de2:	889b      	ldrh	r3, [r3, #4]
 8004de4:	f241 5205 	movw	r2, #5381	; 0x1505
 8004de8:	4293      	cmp	r3, r2
 8004dea:	f040 8117 	bne.w	800501c <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004dee:	2100      	movs	r1, #0
 8004df0:	2007      	movs	r0, #7
 8004df2:	f7fb ff61 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004df6:	2032      	movs	r0, #50	; 0x32
 8004df8:	f001 fffc 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004dfc:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004e00:	2012      	movs	r0, #18
 8004e02:	f7fb ff59 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004e06:	2101      	movs	r1, #1
 8004e08:	20a4      	movs	r0, #164	; 0xa4
 8004e0a:	f7fb ff55 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004e0e:	210f      	movs	r1, #15
 8004e10:	2008      	movs	r0, #8
 8004e12:	f7fb ff51 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004e16:	2108      	movs	r1, #8
 8004e18:	200a      	movs	r0, #10
 8004e1a:	f7fb ff4d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004e1e:	2108      	movs	r1, #8
 8004e20:	200d      	movs	r0, #13
 8004e22:	f7fb ff49 	bl	8000cb8 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004e26:	f240 7107 	movw	r1, #1799	; 0x707
 8004e2a:	2030      	movs	r0, #48	; 0x30
 8004e2c:	f7fb ff44 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004e30:	2107      	movs	r1, #7
 8004e32:	2031      	movs	r0, #49	; 0x31
 8004e34:	f7fb ff40 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004e38:	f240 6103 	movw	r1, #1539	; 0x603
 8004e3c:	2032      	movs	r0, #50	; 0x32
 8004e3e:	f7fb ff3b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004e42:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e46:	2033      	movs	r0, #51	; 0x33
 8004e48:	f7fb ff36 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004e4c:	f240 2102 	movw	r1, #514	; 0x202
 8004e50:	2034      	movs	r0, #52	; 0x34
 8004e52:	f7fb ff31 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004e56:	2102      	movs	r1, #2
 8004e58:	2035      	movs	r0, #53	; 0x35
 8004e5a:	f7fb ff2d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004e5e:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004e62:	2036      	movs	r0, #54	; 0x36
 8004e64:	f7fb ff28 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004e68:	f240 7107 	movw	r1, #1799	; 0x707
 8004e6c:	2037      	movs	r0, #55	; 0x37
 8004e6e:	f7fb ff23 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004e72:	2100      	movs	r1, #0
 8004e74:	2038      	movs	r0, #56	; 0x38
 8004e76:	f7fb ff1f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	2039      	movs	r0, #57	; 0x39
 8004e7e:	f7fb ff1b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004e82:	f240 7107 	movw	r1, #1799	; 0x707
 8004e86:	203a      	movs	r0, #58	; 0x3a
 8004e88:	f7fb ff16 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	203b      	movs	r0, #59	; 0x3b
 8004e90:	f7fb ff12 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004e94:	2107      	movs	r1, #7
 8004e96:	203c      	movs	r0, #60	; 0x3c
 8004e98:	f7fb ff0e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	203d      	movs	r0, #61	; 0x3d
 8004ea0:	f7fb ff0a 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004ea4:	2032      	movs	r0, #50	; 0x32
 8004ea6:	f001 ffa5 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004eaa:	2101      	movs	r1, #1
 8004eac:	2007      	movs	r0, #7
 8004eae:	f7fb ff03 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	2017      	movs	r0, #23
 8004eb6:	f7fb feff 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004eba:	2032      	movs	r0, #50	; 0x32
 8004ebc:	f001 ff9a 	bl	8006df4 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004ec0:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004ec4:	2010      	movs	r0, #16
 8004ec6:	f7fb fef7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004eca:	f240 2117 	movw	r1, #535	; 0x217
 8004ece:	2011      	movs	r0, #17
 8004ed0:	f7fb fef2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004ed4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004ed8:	2012      	movs	r0, #18
 8004eda:	f7fb feed 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004ede:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004ee2:	2013      	movs	r0, #19
 8004ee4:	f7fb fee8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004ee8:	2100      	movs	r1, #0
 8004eea:	202a      	movs	r0, #42	; 0x2a
 8004eec:	f7fb fee4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004ef0:	210a      	movs	r1, #10
 8004ef2:	2029      	movs	r0, #41	; 0x29
 8004ef4:	f7fb fee0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004ef8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004efc:	2012      	movs	r0, #18
 8004efe:	f7fb fedb 	bl	8000cb8 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004f02:	2100      	movs	r1, #0
 8004f04:	2050      	movs	r0, #80	; 0x50
 8004f06:	f7fb fed7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004f0a:	21ef      	movs	r1, #239	; 0xef
 8004f0c:	2051      	movs	r0, #81	; 0x51
 8004f0e:	f7fb fed3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004f12:	2100      	movs	r1, #0
 8004f14:	2052      	movs	r0, #82	; 0x52
 8004f16:	f7fb fecf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004f1a:	f240 113f 	movw	r1, #319	; 0x13f
 8004f1e:	2053      	movs	r0, #83	; 0x53
 8004f20:	f7fb feca 	bl	8000cb8 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004f24:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f28:	2060      	movs	r0, #96	; 0x60
 8004f2a:	f7fb fec5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004f2e:	2101      	movs	r1, #1
 8004f30:	2061      	movs	r0, #97	; 0x61
 8004f32:	f7fb fec1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004f36:	2100      	movs	r1, #0
 8004f38:	206a      	movs	r0, #106	; 0x6a
 8004f3a:	f7fb febd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	2080      	movs	r0, #128	; 0x80
 8004f42:	f7fb feb9 	bl	8000cb8 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004f46:	2100      	movs	r1, #0
 8004f48:	2081      	movs	r0, #129	; 0x81
 8004f4a:	f7fb feb5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004f4e:	2100      	movs	r1, #0
 8004f50:	2082      	movs	r0, #130	; 0x82
 8004f52:	f7fb feb1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004f56:	2100      	movs	r1, #0
 8004f58:	2083      	movs	r0, #131	; 0x83
 8004f5a:	f7fb fead 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2084      	movs	r0, #132	; 0x84
 8004f62:	f7fb fea9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004f66:	2100      	movs	r1, #0
 8004f68:	2085      	movs	r0, #133	; 0x85
 8004f6a:	f7fb fea5 	bl	8000cb8 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004f6e:	2113      	movs	r1, #19
 8004f70:	2090      	movs	r0, #144	; 0x90
 8004f72:	f7fb fea1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004f76:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004f7a:	2092      	movs	r0, #146	; 0x92
 8004f7c:	f7fb fe9c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004f80:	2105      	movs	r1, #5
 8004f82:	2093      	movs	r0, #147	; 0x93
 8004f84:	f7fb fe98 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004f88:	2100      	movs	r1, #0
 8004f8a:	2095      	movs	r0, #149	; 0x95
 8004f8c:	f7fb fe94 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004f90:	2100      	movs	r1, #0
 8004f92:	2097      	movs	r0, #151	; 0x97
 8004f94:	f7fb fe90 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004f98:	2100      	movs	r1, #0
 8004f9a:	2098      	movs	r0, #152	; 0x98
 8004f9c:	f7fb fe8c 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f7fb fe87 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004faa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004fae:	2002      	movs	r0, #2
 8004fb0:	f7fb fe82 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004fb4:	f241 0138 	movw	r1, #4152	; 0x1038
 8004fb8:	2003      	movs	r0, #3
 8004fba:	f7fb fe7d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	2004      	movs	r0, #4
 8004fc2:	f7fb fe79 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	200c      	movs	r0, #12
 8004fca:	f7fb fe75 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004fce:	2100      	movs	r1, #0
 8004fd0:	200f      	movs	r0, #15
 8004fd2:	f7fb fe71 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	2020      	movs	r0, #32
 8004fda:	f7fb fe6d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004fde:	2100      	movs	r1, #0
 8004fe0:	2021      	movs	r0, #33	; 0x21
 8004fe2:	f7fb fe69 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004fe6:	2121      	movs	r1, #33	; 0x21
 8004fe8:	2007      	movs	r0, #7
 8004fea:	f7fb fe65 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8004fee:	2014      	movs	r0, #20
 8004ff0:	f001 ff00 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004ff4:	2161      	movs	r1, #97	; 0x61
 8004ff6:	2007      	movs	r0, #7
 8004ff8:	f7fb fe5e 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8004ffc:	2014      	movs	r0, #20
 8004ffe:	f001 fef9 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8005002:	f240 1173 	movw	r1, #371	; 0x173
 8005006:	2007      	movs	r0, #7
 8005008:	f7fb fe56 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 800500c:	2014      	movs	r0, #20
 800500e:	f001 fef1 	bl	8006df4 <HAL_Delay>
 8005012:	f000 bfd7 	b.w	8005fc4 <LCD_Init+0x3e34>
 8005016:	bf00      	nop
 8005018:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0xB505) {
 800501c:	4bf0      	ldr	r3, [pc, #960]	; (80053e0 <LCD_Init+0x3250>)
 800501e:	889b      	ldrh	r3, [r3, #4]
 8005020:	f24b 5205 	movw	r2, #46341	; 0xb505
 8005024:	4293      	cmp	r3, r2
 8005026:	f040 8103 	bne.w	8005230 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 800502a:	2100      	movs	r1, #0
 800502c:	2000      	movs	r0, #0
 800502e:	f7fb fe43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005032:	2100      	movs	r1, #0
 8005034:	2000      	movs	r0, #0
 8005036:	f7fb fe3f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800503a:	2100      	movs	r1, #0
 800503c:	2000      	movs	r0, #0
 800503e:	f7fb fe3b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005042:	2100      	movs	r1, #0
 8005044:	2000      	movs	r0, #0
 8005046:	f7fb fe37 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 800504a:	2101      	movs	r1, #1
 800504c:	20a4      	movs	r0, #164	; 0xa4
 800504e:	f7fb fe33 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8005052:	2014      	movs	r0, #20
 8005054:	f001 fece 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005058:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800505c:	2060      	movs	r0, #96	; 0x60
 800505e:	f7fb fe2b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005062:	f240 2102 	movw	r1, #514	; 0x202
 8005066:	2008      	movs	r0, #8
 8005068:	f7fb fe26 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 800506c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8005070:	2030      	movs	r0, #48	; 0x30
 8005072:	f7fb fe21 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8005076:	f243 7115 	movw	r1, #14101	; 0x3715
 800507a:	2031      	movs	r0, #49	; 0x31
 800507c:	f7fb fe1c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8005080:	f240 6104 	movw	r1, #1540	; 0x604
 8005084:	2032      	movs	r0, #50	; 0x32
 8005086:	f7fb fe17 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 800508a:	f640 6116 	movw	r1, #3606	; 0xe16
 800508e:	2033      	movs	r0, #51	; 0x33
 8005090:	f7fb fe12 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8005094:	f242 2111 	movw	r1, #8721	; 0x2211
 8005098:	2034      	movs	r0, #52	; 0x34
 800509a:	f7fb fe0d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 800509e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80050a2:	2035      	movs	r0, #53	; 0x35
 80050a4:	f7fb fe08 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 80050a8:	f248 5107 	movw	r1, #34055	; 0x8507
 80050ac:	2036      	movs	r0, #54	; 0x36
 80050ae:	f7fb fe03 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 80050b2:	f241 4107 	movw	r1, #5127	; 0x1407
 80050b6:	2037      	movs	r0, #55	; 0x37
 80050b8:	f7fb fdfe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 80050bc:	f241 4103 	movw	r1, #5123	; 0x1403
 80050c0:	2038      	movs	r0, #56	; 0x38
 80050c2:	f7fb fdf9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 80050c6:	2120      	movs	r1, #32
 80050c8:	2039      	movs	r0, #57	; 0x39
 80050ca:	f7fb fdf5 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 80050ce:	211a      	movs	r1, #26
 80050d0:	2090      	movs	r0, #144	; 0x90
 80050d2:	f7fb fdf1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80050d6:	2100      	movs	r1, #0
 80050d8:	2010      	movs	r0, #16
 80050da:	f7fb fded 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80050de:	2107      	movs	r1, #7
 80050e0:	2011      	movs	r0, #17
 80050e2:	f7fb fde9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80050e6:	2100      	movs	r1, #0
 80050e8:	2012      	movs	r0, #18
 80050ea:	f7fb fde5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80050ee:	2100      	movs	r1, #0
 80050f0:	2013      	movs	r0, #19
 80050f2:	f7fb fde1 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 80050f6:	2014      	movs	r0, #20
 80050f8:	f001 fe7c 	bl	8006df4 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 80050fc:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8005100:	2010      	movs	r0, #16
 8005102:	f7fb fdd9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8005106:	f240 1137 	movw	r1, #311	; 0x137
 800510a:	2011      	movs	r0, #17
 800510c:	f7fb fdd4 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8005110:	2014      	movs	r0, #20
 8005112:	f001 fe6f 	bl	8006df4 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8005116:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800511a:	2012      	movs	r0, #18
 800511c:	f7fb fdcc 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8005120:	2014      	movs	r0, #20
 8005122:	f001 fe67 	bl	8006df4 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8005126:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800512a:	2013      	movs	r0, #19
 800512c:	f7fb fdc4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8005130:	2180      	movs	r1, #128	; 0x80
 8005132:	202a      	movs	r0, #42	; 0x2a
 8005134:	f7fb fdc0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8005138:	2148      	movs	r1, #72	; 0x48
 800513a:	2029      	movs	r0, #41	; 0x29
 800513c:	f7fb fdbc 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8005140:	2014      	movs	r0, #20
 8005142:	f001 fe57 	bl	8006df4 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8005146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800514a:	2001      	movs	r0, #1
 800514c:	f7fb fdb4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8005150:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005154:	2002      	movs	r0, #2
 8005156:	f7fb fdaf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 800515a:	f241 0138 	movw	r1, #4152	; 0x1038
 800515e:	2003      	movs	r0, #3
 8005160:	f7fb fdaa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005164:	f240 2102 	movw	r1, #514	; 0x202
 8005168:	2008      	movs	r0, #8
 800516a:	f7fb fda5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 800516e:	2100      	movs	r1, #0
 8005170:	200a      	movs	r0, #10
 8005172:	f7fb fda1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8005176:	2100      	movs	r1, #0
 8005178:	200c      	movs	r0, #12
 800517a:	f7fb fd9d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 800517e:	2100      	movs	r1, #0
 8005180:	200d      	movs	r0, #13
 8005182:	f7fb fd99 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8005186:	2130      	movs	r1, #48	; 0x30
 8005188:	200e      	movs	r0, #14
 800518a:	f7fb fd95 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800518e:	2100      	movs	r1, #0
 8005190:	2050      	movs	r0, #80	; 0x50
 8005192:	f7fb fd91 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8005196:	21ef      	movs	r1, #239	; 0xef
 8005198:	2051      	movs	r0, #81	; 0x51
 800519a:	f7fb fd8d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800519e:	2100      	movs	r1, #0
 80051a0:	2052      	movs	r0, #82	; 0x52
 80051a2:	f7fb fd89 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 80051a6:	f240 113f 	movw	r1, #319	; 0x13f
 80051aa:	2053      	movs	r0, #83	; 0x53
 80051ac:	f7fb fd84 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 80051b0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80051b4:	2060      	movs	r0, #96	; 0x60
 80051b6:	f7fb fd7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80051ba:	2101      	movs	r1, #1
 80051bc:	2061      	movs	r0, #97	; 0x61
 80051be:	f7fb fd7b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80051c2:	2100      	movs	r1, #0
 80051c4:	206a      	movs	r0, #106	; 0x6a
 80051c6:	f7fb fd77 	bl	8000cb8 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 80051ca:	2111      	movs	r1, #17
 80051cc:	2090      	movs	r0, #144	; 0x90
 80051ce:	f7fb fd73 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80051d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051d6:	2092      	movs	r0, #146	; 0x92
 80051d8:	f7fb fd6e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 80051dc:	f240 4102 	movw	r1, #1026	; 0x402
 80051e0:	2093      	movs	r0, #147	; 0x93
 80051e2:	f7fb fd69 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 80051e6:	2102      	movs	r1, #2
 80051e8:	2094      	movs	r0, #148	; 0x94
 80051ea:	f7fb fd65 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 80051ee:	2014      	movs	r0, #20
 80051f0:	f001 fe00 	bl	8006df4 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 80051f4:	2101      	movs	r1, #1
 80051f6:	2007      	movs	r0, #7
 80051f8:	f7fb fd5e 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 80051fc:	2014      	movs	r0, #20
 80051fe:	f001 fdf9 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8005202:	2161      	movs	r1, #97	; 0x61
 8005204:	2007      	movs	r0, #7
 8005206:	f7fb fd57 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 800520a:	f240 1173 	movw	r1, #371	; 0x173
 800520e:	2007      	movs	r0, #7
 8005210:	f7fb fd52 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8005214:	2100      	movs	r1, #0
 8005216:	2020      	movs	r0, #32
 8005218:	f7fb fd4e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800521c:	2100      	movs	r1, #0
 800521e:	2021      	movs	r0, #33	; 0x21
 8005220:	f7fb fd4a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8005224:	2122      	movs	r1, #34	; 0x22
 8005226:	2000      	movs	r0, #0
 8005228:	f7fb fd46 	bl	8000cb8 <LCD_WriteReg>
 800522c:	f000 beca 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005230:	4b6b      	ldr	r3, [pc, #428]	; (80053e0 <LCD_Init+0x3250>)
 8005232:	889b      	ldrh	r3, [r3, #4]
 8005234:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005238:	4293      	cmp	r3, r2
 800523a:	f040 80d3 	bne.w	80053e4 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 800523e:	2100      	movs	r1, #0
 8005240:	2000      	movs	r0, #0
 8005242:	f7fb fd39 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005246:	2100      	movs	r1, #0
 8005248:	2000      	movs	r0, #0
 800524a:	f7fb fd35 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 800524e:	2014      	movs	r0, #20
 8005250:	f001 fdd0 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8005254:	2100      	movs	r1, #0
 8005256:	2000      	movs	r0, #0
 8005258:	f7fb fd2e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800525c:	2100      	movs	r1, #0
 800525e:	2000      	movs	r0, #0
 8005260:	f7fb fd2a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005264:	2100      	movs	r1, #0
 8005266:	2000      	movs	r0, #0
 8005268:	f7fb fd26 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800526c:	2100      	movs	r1, #0
 800526e:	2000      	movs	r0, #0
 8005270:	f7fb fd22 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8005274:	2101      	movs	r1, #1
 8005276:	20a4      	movs	r0, #164	; 0xa4
 8005278:	f7fb fd1e 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 800527c:	2014      	movs	r0, #20
 800527e:	f001 fdb9 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005282:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005286:	2060      	movs	r0, #96	; 0x60
 8005288:	f7fb fd16 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 800528c:	f640 0106 	movw	r1, #2054	; 0x806
 8005290:	2008      	movs	r0, #8
 8005292:	f7fb fd11 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8005296:	f240 7103 	movw	r1, #1795	; 0x703
 800529a:	2030      	movs	r0, #48	; 0x30
 800529c:	f7fb fd0c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 80052a0:	2101      	movs	r1, #1
 80052a2:	2031      	movs	r0, #49	; 0x31
 80052a4:	f7fb fd08 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 80052a8:	2104      	movs	r1, #4
 80052aa:	2032      	movs	r0, #50	; 0x32
 80052ac:	f7fb fd04 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 80052b0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80052b4:	2033      	movs	r0, #51	; 0x33
 80052b6:	f7fb fcff 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 80052ba:	f44f 7140 	mov.w	r1, #768	; 0x300
 80052be:	2034      	movs	r0, #52	; 0x34
 80052c0:	f7fb fcfa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 80052c4:	f240 1103 	movw	r1, #259	; 0x103
 80052c8:	2035      	movs	r0, #53	; 0x35
 80052ca:	f7fb fcf5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80052ce:	211f      	movs	r1, #31
 80052d0:	2036      	movs	r0, #54	; 0x36
 80052d2:	f7fb fcf1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80052d6:	f240 7103 	movw	r1, #1795	; 0x703
 80052da:	2037      	movs	r0, #55	; 0x37
 80052dc:	f7fb fcec 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80052e0:	2101      	movs	r1, #1
 80052e2:	2038      	movs	r0, #56	; 0x38
 80052e4:	f7fb fce8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80052e8:	2104      	movs	r1, #4
 80052ea:	2039      	movs	r0, #57	; 0x39
 80052ec:	f7fb fce4 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80052f0:	2115      	movs	r1, #21
 80052f2:	2090      	movs	r0, #144	; 0x90
 80052f4:	f7fb fce0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80052f8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80052fc:	2010      	movs	r0, #16
 80052fe:	f7fb fcdb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8005302:	f240 2147 	movw	r1, #583	; 0x247
 8005306:	2011      	movs	r0, #17
 8005308:	f7fb fcd6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 800530c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005310:	2012      	movs	r0, #18
 8005312:	f7fb fcd1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8005316:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800531a:	2013      	movs	r0, #19
 800531c:	f7fb fccc 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(120);
 8005320:	2078      	movs	r0, #120	; 0x78
 8005322:	f001 fd67 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8005326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800532a:	2001      	movs	r0, #1
 800532c:	f7fb fcc4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005334:	2002      	movs	r0, #2
 8005336:	f7fb fcbf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 800533a:	f241 0130 	movw	r1, #4144	; 0x1030
 800533e:	2003      	movs	r0, #3
 8005340:	f7fb fcba 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8005344:	2108      	movs	r1, #8
 8005346:	200a      	movs	r0, #10
 8005348:	f7fb fcb6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800534c:	2100      	movs	r1, #0
 800534e:	200c      	movs	r0, #12
 8005350:	f7fb fcb2 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8005354:	2120      	movs	r1, #32
 8005356:	200e      	movs	r0, #14
 8005358:	f7fb fcae 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800535c:	2100      	movs	r1, #0
 800535e:	200f      	movs	r0, #15
 8005360:	f7fb fcaa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8005364:	2100      	movs	r1, #0
 8005366:	2020      	movs	r0, #32
 8005368:	f7fb fca6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800536c:	2100      	movs	r1, #0
 800536e:	2021      	movs	r0, #33	; 0x21
 8005370:	f7fb fca2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8005374:	213d      	movs	r1, #61	; 0x3d
 8005376:	202a      	movs	r0, #42	; 0x2a
 8005378:	f7fb fc9e 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 800537c:	2014      	movs	r0, #20
 800537e:	f001 fd39 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8005382:	212d      	movs	r1, #45	; 0x2d
 8005384:	2029      	movs	r0, #41	; 0x29
 8005386:	f7fb fc97 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800538a:	2100      	movs	r1, #0
 800538c:	2050      	movs	r0, #80	; 0x50
 800538e:	f7fb fc93 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8005392:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8005396:	2051      	movs	r0, #81	; 0x51
 8005398:	f7fb fc8e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800539c:	2100      	movs	r1, #0
 800539e:	2052      	movs	r0, #82	; 0x52
 80053a0:	f7fb fc8a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80053a4:	f240 113f 	movw	r1, #319	; 0x13f
 80053a8:	2053      	movs	r0, #83	; 0x53
 80053aa:	f7fb fc85 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 80053ae:	2100      	movs	r1, #0
 80053b0:	2061      	movs	r0, #97	; 0x61
 80053b2:	f7fb fc81 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80053b6:	2100      	movs	r1, #0
 80053b8:	206a      	movs	r0, #106	; 0x6a
 80053ba:	f7fb fc7d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80053be:	f44f 7140 	mov.w	r1, #768	; 0x300
 80053c2:	2092      	movs	r0, #146	; 0x92
 80053c4:	f7fb fc78 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80053c8:	2105      	movs	r1, #5
 80053ca:	2093      	movs	r0, #147	; 0x93
 80053cc:	f7fb fc74 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80053d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053d4:	2007      	movs	r0, #7
 80053d6:	f7fb fc6f 	bl	8000cb8 <LCD_WriteReg>
 80053da:	f000 bdf3 	b.w	8005fc4 <LCD_Init+0x3e34>
 80053de:	bf00      	nop
 80053e0:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80053e4:	4bc2      	ldr	r3, [pc, #776]	; (80056f0 <LCD_Init+0x3560>)
 80053e6:	889b      	ldrh	r3, [r3, #4]
 80053e8:	f648 1289 	movw	r2, #35209	; 0x8989
 80053ec:	4293      	cmp	r3, r2
 80053ee:	f040 80bc 	bne.w	800556a <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80053f2:	2101      	movs	r1, #1
 80053f4:	2000      	movs	r0, #0
 80053f6:	f7fb fc5f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80053fa:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80053fe:	2003      	movs	r0, #3
 8005400:	f7fb fc5a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005404:	2100      	movs	r1, #0
 8005406:	200c      	movs	r0, #12
 8005408:	f7fb fc56 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 800540c:	f640 010c 	movw	r1, #2060	; 0x80c
 8005410:	200d      	movs	r0, #13
 8005412:	f7fb fc51 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8005416:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 800541a:	200e      	movs	r0, #14
 800541c:	f7fb fc4c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005420:	21b0      	movs	r1, #176	; 0xb0
 8005422:	201e      	movs	r0, #30
 8005424:	f7fb fc48 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005428:	f642 313f 	movw	r1, #11071	; 0x2b3f
 800542c:	2001      	movs	r0, #1
 800542e:	f7fb fc43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8005432:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005436:	2002      	movs	r0, #2
 8005438:	f7fb fc3e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 800543c:	2100      	movs	r1, #0
 800543e:	2010      	movs	r0, #16
 8005440:	f7fb fc3a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8005444:	f246 0178 	movw	r1, #24696	; 0x6078
 8005448:	2011      	movs	r0, #17
 800544a:	f7fb fc35 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 800544e:	2100      	movs	r1, #0
 8005450:	2005      	movs	r0, #5
 8005452:	f7fb fc31 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8005456:	2100      	movs	r1, #0
 8005458:	2006      	movs	r0, #6
 800545a:	f7fb fc2d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 800545e:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8005462:	2016      	movs	r0, #22
 8005464:	f7fb fc28 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005468:	2103      	movs	r1, #3
 800546a:	2017      	movs	r0, #23
 800546c:	f7fb fc24 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005470:	f240 2133 	movw	r1, #563	; 0x233
 8005474:	2007      	movs	r0, #7
 8005476:	f7fb fc1f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 800547a:	2100      	movs	r1, #0
 800547c:	200b      	movs	r0, #11
 800547e:	f7fb fc1b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8005482:	2100      	movs	r1, #0
 8005484:	200f      	movs	r0, #15
 8005486:	f7fb fc17 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 800548a:	2100      	movs	r1, #0
 800548c:	2041      	movs	r0, #65	; 0x41
 800548e:	f7fb fc13 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8005492:	2100      	movs	r1, #0
 8005494:	2042      	movs	r0, #66	; 0x42
 8005496:	f7fb fc0f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 800549a:	2100      	movs	r1, #0
 800549c:	2048      	movs	r0, #72	; 0x48
 800549e:	f7fb fc0b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 80054a2:	f240 113f 	movw	r1, #319	; 0x13f
 80054a6:	2049      	movs	r0, #73	; 0x49
 80054a8:	f7fb fc06 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 80054ac:	2100      	movs	r1, #0
 80054ae:	204a      	movs	r0, #74	; 0x4a
 80054b0:	f7fb fc02 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 80054b4:	2100      	movs	r1, #0
 80054b6:	204b      	movs	r0, #75	; 0x4b
 80054b8:	f7fb fbfe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 80054bc:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80054c0:	2044      	movs	r0, #68	; 0x44
 80054c2:	f7fb fbf9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 80054c6:	2100      	movs	r1, #0
 80054c8:	2045      	movs	r0, #69	; 0x45
 80054ca:	f7fb fbf5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80054ce:	f240 113f 	movw	r1, #319	; 0x13f
 80054d2:	2046      	movs	r0, #70	; 0x46
 80054d4:	f7fb fbf0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80054d8:	f240 7107 	movw	r1, #1799	; 0x707
 80054dc:	2030      	movs	r0, #48	; 0x30
 80054de:	f7fb fbeb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80054e2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80054e6:	2031      	movs	r0, #49	; 0x31
 80054e8:	f7fb fbe6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80054ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 80054f0:	2032      	movs	r0, #50	; 0x32
 80054f2:	f7fb fbe1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80054f6:	f240 5102 	movw	r1, #1282	; 0x502
 80054fa:	2033      	movs	r0, #51	; 0x33
 80054fc:	f7fb fbdc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005500:	f240 5107 	movw	r1, #1287	; 0x507
 8005504:	2034      	movs	r0, #52	; 0x34
 8005506:	f7fb fbd7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800550a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800550e:	2035      	movs	r0, #53	; 0x35
 8005510:	f7fb fbd2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8005514:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005518:	2036      	movs	r0, #54	; 0x36
 800551a:	f7fb fbcd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 800551e:	f240 5102 	movw	r1, #1282	; 0x502
 8005522:	2037      	movs	r0, #55	; 0x37
 8005524:	f7fb fbc8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005528:	f240 3102 	movw	r1, #770	; 0x302
 800552c:	203a      	movs	r0, #58	; 0x3a
 800552e:	f7fb fbc3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8005532:	f240 3102 	movw	r1, #770	; 0x302
 8005536:	203b      	movs	r0, #59	; 0x3b
 8005538:	f7fb fbbe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 800553c:	2100      	movs	r1, #0
 800553e:	2023      	movs	r0, #35	; 0x23
 8005540:	f7fb fbba 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8005544:	2100      	movs	r1, #0
 8005546:	2024      	movs	r0, #36	; 0x24
 8005548:	f7fb fbb6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 800554c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005550:	2025      	movs	r0, #37	; 0x25
 8005552:	f7fb fbb1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8005556:	2100      	movs	r1, #0
 8005558:	204f      	movs	r0, #79	; 0x4f
 800555a:	f7fb fbad 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 800555e:	2100      	movs	r1, #0
 8005560:	204e      	movs	r0, #78	; 0x4e
 8005562:	f7fb fba9 	bl	8000cb8 <LCD_WriteReg>
 8005566:	f000 bd2d 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 800556a:	4b61      	ldr	r3, [pc, #388]	; (80056f0 <LCD_Init+0x3560>)
 800556c:	889b      	ldrh	r3, [r3, #4]
 800556e:	f244 5231 	movw	r2, #17713	; 0x4531
 8005572:	4293      	cmp	r3, r2
 8005574:	f040 80be 	bne.w	80056f4 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005578:	2101      	movs	r1, #1
 800557a:	2000      	movs	r0, #0
 800557c:	f7fb fb9c 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 8005580:	200a      	movs	r0, #10
 8005582:	f001 fc37 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8005586:	f241 6128 	movw	r1, #5672	; 0x1628
 800558a:	2010      	movs	r0, #16
 800558c:	f7fb fb94 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005590:	210e      	movs	r1, #14
 8005592:	2012      	movs	r0, #18
 8005594:	f7fb fb90 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005598:	f640 2139 	movw	r1, #2617	; 0xa39
 800559c:	2013      	movs	r0, #19
 800559e:	f7fb fb8b 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 80055a2:	200a      	movs	r0, #10
 80055a4:	f001 fc26 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 80055a8:	2140      	movs	r1, #64	; 0x40
 80055aa:	2011      	movs	r0, #17
 80055ac:	f7fb fb84 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 80055b0:	2150      	movs	r1, #80	; 0x50
 80055b2:	2015      	movs	r0, #21
 80055b4:	f7fb fb80 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 80055b8:	200a      	movs	r0, #10
 80055ba:	f001 fc1b 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 80055be:	211e      	movs	r1, #30
 80055c0:	2012      	movs	r0, #18
 80055c2:	f7fb fb79 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 80055c6:	200a      	movs	r0, #10
 80055c8:	f001 fc14 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80055cc:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80055d0:	2010      	movs	r0, #16
 80055d2:	f7fb fb71 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80055d6:	f642 2139 	movw	r1, #10809	; 0x2a39
 80055da:	2013      	movs	r0, #19
 80055dc:	f7fb fb6c 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 80055e0:	200a      	movs	r0, #10
 80055e2:	f001 fc07 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80055e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055ea:	2001      	movs	r0, #1
 80055ec:	f7fb fb64 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80055f0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80055f4:	2002      	movs	r0, #2
 80055f6:	f7fb fb5f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80055fa:	f241 0138 	movw	r1, #4152	; 0x1038
 80055fe:	2003      	movs	r0, #3
 8005600:	f7fb fb5a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8005604:	f240 2102 	movw	r1, #514	; 0x202
 8005608:	2008      	movs	r0, #8
 800560a:	f7fb fb55 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800560e:	2108      	movs	r1, #8
 8005610:	200a      	movs	r0, #10
 8005612:	f7fb fb51 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8005616:	2100      	movs	r1, #0
 8005618:	2030      	movs	r0, #48	; 0x30
 800561a:	f7fb fb4d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800561e:	f240 4102 	movw	r1, #1026	; 0x402
 8005622:	2031      	movs	r0, #49	; 0x31
 8005624:	f7fb fb48 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005628:	f44f 7183 	mov.w	r1, #262	; 0x106
 800562c:	2032      	movs	r0, #50	; 0x32
 800562e:	f7fb fb43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8005632:	f240 5103 	movw	r1, #1283	; 0x503
 8005636:	2033      	movs	r0, #51	; 0x33
 8005638:	f7fb fb3e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 800563c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005640:	2034      	movs	r0, #52	; 0x34
 8005642:	f7fb fb39 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8005646:	f240 3101 	movw	r1, #769	; 0x301
 800564a:	2035      	movs	r0, #53	; 0x35
 800564c:	f7fb fb34 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005650:	f240 7107 	movw	r1, #1799	; 0x707
 8005654:	2036      	movs	r0, #54	; 0x36
 8005656:	f7fb fb2f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800565a:	f240 3105 	movw	r1, #773	; 0x305
 800565e:	2037      	movs	r0, #55	; 0x37
 8005660:	f7fb fb2a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8005664:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005668:	2038      	movs	r0, #56	; 0x38
 800566a:	f7fb fb25 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 800566e:	f640 710b 	movw	r1, #3851	; 0xf0b
 8005672:	2039      	movs	r0, #57	; 0x39
 8005674:	f7fb fb20 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005678:	2102      	movs	r1, #2
 800567a:	2041      	movs	r0, #65	; 0x41
 800567c:	f7fb fb1c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005680:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005684:	2060      	movs	r0, #96	; 0x60
 8005686:	f7fb fb17 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800568a:	2101      	movs	r1, #1
 800568c:	2061      	movs	r0, #97	; 0x61
 800568e:	f7fb fb13 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8005692:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005696:	2090      	movs	r0, #144	; 0x90
 8005698:	f7fb fb0e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 800569c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80056a0:	2092      	movs	r0, #146	; 0x92
 80056a2:	f7fb fb09 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 80056a6:	2104      	movs	r1, #4
 80056a8:	2093      	movs	r0, #147	; 0x93
 80056aa:	f7fb fb05 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 80056ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056b2:	20a0      	movs	r0, #160	; 0xa0
 80056b4:	f7fb fb00 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80056b8:	2101      	movs	r1, #1
 80056ba:	2007      	movs	r0, #7
 80056bc:	f7fb fafc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80056c0:	2121      	movs	r1, #33	; 0x21
 80056c2:	2007      	movs	r0, #7
 80056c4:	f7fb faf8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80056c8:	2123      	movs	r1, #35	; 0x23
 80056ca:	2007      	movs	r0, #7
 80056cc:	f7fb faf4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80056d0:	2133      	movs	r1, #51	; 0x33
 80056d2:	2007      	movs	r0, #7
 80056d4:	f7fb faf0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80056d8:	f240 1133 	movw	r1, #307	; 0x133
 80056dc:	2007      	movs	r0, #7
 80056de:	f7fb faeb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80056e2:	2100      	movs	r1, #0
 80056e4:	20a0      	movs	r0, #160	; 0xa0
 80056e6:	f7fb fae7 	bl	8000cb8 <LCD_WriteReg>
 80056ea:	f000 bc6b 	b.w	8005fc4 <LCD_Init+0x3e34>
 80056ee:	bf00      	nop
 80056f0:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0x4535) {
 80056f4:	4b5b      	ldr	r3, [pc, #364]	; (8005864 <LCD_Init+0x36d4>)
 80056f6:	889b      	ldrh	r3, [r3, #4]
 80056f8:	f244 5235 	movw	r2, #17717	; 0x4535
 80056fc:	4293      	cmp	r3, r2
 80056fe:	f040 80b3 	bne.w	8005868 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8005702:	2130      	movs	r1, #48	; 0x30
 8005704:	2015      	movs	r0, #21
 8005706:	f7fb fad7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 800570a:	2110      	movs	r1, #16
 800570c:	209a      	movs	r0, #154	; 0x9a
 800570e:	f7fb fad3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8005712:	2120      	movs	r1, #32
 8005714:	2011      	movs	r0, #17
 8005716:	f7fb facf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 800571a:	f243 4128 	movw	r1, #13352	; 0x3428
 800571e:	2010      	movs	r0, #16
 8005720:	f7fb faca 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8005724:	2102      	movs	r1, #2
 8005726:	2012      	movs	r0, #18
 8005728:	f7fb fac6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 800572c:	f241 0138 	movw	r1, #4152	; 0x1038
 8005730:	2013      	movs	r0, #19
 8005732:	f7fb fac1 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(40);
 8005736:	2028      	movs	r0, #40	; 0x28
 8005738:	f001 fb5c 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 800573c:	2112      	movs	r1, #18
 800573e:	2012      	movs	r0, #18
 8005740:	f7fb faba 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(40);
 8005744:	2028      	movs	r0, #40	; 0x28
 8005746:	f001 fb55 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 800574a:	f243 4120 	movw	r1, #13344	; 0x3420
 800574e:	2010      	movs	r0, #16
 8005750:	f7fb fab2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8005754:	f243 0138 	movw	r1, #12344	; 0x3038
 8005758:	2013      	movs	r0, #19
 800575a:	f7fb faad 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(70);
 800575e:	2046      	movs	r0, #70	; 0x46
 8005760:	f001 fb48 	bl	8006df4 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8005764:	2100      	movs	r1, #0
 8005766:	2030      	movs	r0, #48	; 0x30
 8005768:	f7fb faa6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800576c:	f240 4102 	movw	r1, #1026	; 0x402
 8005770:	2031      	movs	r0, #49	; 0x31
 8005772:	f7fb faa1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8005776:	f240 3107 	movw	r1, #775	; 0x307
 800577a:	2032      	movs	r0, #50	; 0x32
 800577c:	f7fb fa9c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005780:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005784:	2033      	movs	r0, #51	; 0x33
 8005786:	f7fb fa97 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 800578a:	2104      	movs	r1, #4
 800578c:	2034      	movs	r0, #52	; 0x34
 800578e:	f7fb fa93 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8005792:	f240 4101 	movw	r1, #1025	; 0x401
 8005796:	2035      	movs	r0, #53	; 0x35
 8005798:	f7fb fa8e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 800579c:	f240 7107 	movw	r1, #1799	; 0x707
 80057a0:	2036      	movs	r0, #54	; 0x36
 80057a2:	f7fb fa89 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80057a6:	f240 3105 	movw	r1, #773	; 0x305
 80057aa:	2037      	movs	r0, #55	; 0x37
 80057ac:	f7fb fa84 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 80057b0:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80057b4:	2038      	movs	r0, #56	; 0x38
 80057b6:	f7fb fa7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80057ba:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80057be:	2039      	movs	r0, #57	; 0x39
 80057c0:	f7fb fa7a 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80057c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057c8:	2001      	movs	r0, #1
 80057ca:	f7fb fa75 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80057ce:	f44f 7140 	mov.w	r1, #768	; 0x300
 80057d2:	2002      	movs	r0, #2
 80057d4:	f7fb fa70 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80057d8:	f241 0130 	movw	r1, #4144	; 0x1030
 80057dc:	2003      	movs	r0, #3
 80057de:	f7fb fa6b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80057e2:	f640 0108 	movw	r1, #2056	; 0x808
 80057e6:	2008      	movs	r0, #8
 80057e8:	f7fb fa66 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80057ec:	2108      	movs	r1, #8
 80057ee:	200a      	movs	r0, #10
 80057f0:	f7fb fa62 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80057f4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80057f8:	2060      	movs	r0, #96	; 0x60
 80057fa:	f7fb fa5d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80057fe:	2101      	movs	r1, #1
 8005800:	2061      	movs	r0, #97	; 0x61
 8005802:	f7fb fa59 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8005806:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800580a:	2090      	movs	r0, #144	; 0x90
 800580c:	f7fb fa54 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005814:	2092      	movs	r0, #146	; 0x92
 8005816:	f7fb fa4f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 800581a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800581e:	2093      	movs	r0, #147	; 0x93
 8005820:	f7fb fa4a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8005824:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005828:	20a0      	movs	r0, #160	; 0xa0
 800582a:	f7fb fa45 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 800582e:	2110      	movs	r1, #16
 8005830:	20a3      	movs	r0, #163	; 0xa3
 8005832:	f7fb fa41 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005836:	2101      	movs	r1, #1
 8005838:	2007      	movs	r0, #7
 800583a:	f7fb fa3d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 800583e:	2121      	movs	r1, #33	; 0x21
 8005840:	2007      	movs	r0, #7
 8005842:	f7fb fa39 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005846:	2123      	movs	r1, #35	; 0x23
 8005848:	2007      	movs	r0, #7
 800584a:	f7fb fa35 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 800584e:	2133      	movs	r1, #51	; 0x33
 8005850:	2007      	movs	r0, #7
 8005852:	f7fb fa31 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005856:	f240 1133 	movw	r1, #307	; 0x133
 800585a:	2007      	movs	r0, #7
 800585c:	f7fb fa2c 	bl	8000cb8 <LCD_WriteReg>
 8005860:	e3b0      	b.n	8005fc4 <LCD_Init+0x3e34>
 8005862:	bf00      	nop
 8005864:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0X1963) {
 8005868:	4ba8      	ldr	r3, [pc, #672]	; (8005b0c <LCD_Init+0x397c>)
 800586a:	889b      	ldrh	r3, [r3, #4]
 800586c:	f641 1263 	movw	r2, #6499	; 0x1963
 8005870:	4293      	cmp	r3, r2
 8005872:	f040 83a7 	bne.w	8005fc4 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005876:	20e2      	movs	r0, #226	; 0xe2
 8005878:	f7fb f992 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 800587c:	4ba4      	ldr	r3, [pc, #656]	; (8005b10 <LCD_Init+0x3980>)
 800587e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005882:	611a      	str	r2, [r3, #16]
 8005884:	4ba2      	ldr	r3, [pc, #648]	; (8005b10 <LCD_Init+0x3980>)
 8005886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588a:	615a      	str	r2, [r3, #20]
 800588c:	4ba1      	ldr	r3, [pc, #644]	; (8005b14 <LCD_Init+0x3984>)
 800588e:	221d      	movs	r2, #29
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	4b9f      	ldr	r3, [pc, #636]	; (8005b10 <LCD_Init+0x3980>)
 8005894:	2280      	movs	r2, #128	; 0x80
 8005896:	615a      	str	r2, [r3, #20]
 8005898:	4b9d      	ldr	r3, [pc, #628]	; (8005b10 <LCD_Init+0x3980>)
 800589a:	2280      	movs	r2, #128	; 0x80
 800589c:	611a      	str	r2, [r3, #16]
 800589e:	4b9c      	ldr	r3, [pc, #624]	; (8005b10 <LCD_Init+0x3980>)
 80058a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80058a6:	4b9a      	ldr	r3, [pc, #616]	; (8005b10 <LCD_Init+0x3980>)
 80058a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ac:	611a      	str	r2, [r3, #16]
 80058ae:	4b98      	ldr	r3, [pc, #608]	; (8005b10 <LCD_Init+0x3980>)
 80058b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b4:	615a      	str	r2, [r3, #20]
 80058b6:	4b97      	ldr	r3, [pc, #604]	; (8005b14 <LCD_Init+0x3984>)
 80058b8:	2202      	movs	r2, #2
 80058ba:	60da      	str	r2, [r3, #12]
 80058bc:	4b94      	ldr	r3, [pc, #592]	; (8005b10 <LCD_Init+0x3980>)
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	615a      	str	r2, [r3, #20]
 80058c2:	4b93      	ldr	r3, [pc, #588]	; (8005b10 <LCD_Init+0x3980>)
 80058c4:	2280      	movs	r2, #128	; 0x80
 80058c6:	611a      	str	r2, [r3, #16]
 80058c8:	4b91      	ldr	r3, [pc, #580]	; (8005b10 <LCD_Init+0x3980>)
 80058ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80058d0:	4b8f      	ldr	r3, [pc, #572]	; (8005b10 <LCD_Init+0x3980>)
 80058d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058d6:	611a      	str	r2, [r3, #16]
 80058d8:	4b8d      	ldr	r3, [pc, #564]	; (8005b10 <LCD_Init+0x3980>)
 80058da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058de:	615a      	str	r2, [r3, #20]
 80058e0:	4b8c      	ldr	r3, [pc, #560]	; (8005b14 <LCD_Init+0x3984>)
 80058e2:	2204      	movs	r2, #4
 80058e4:	60da      	str	r2, [r3, #12]
 80058e6:	4b8a      	ldr	r3, [pc, #552]	; (8005b10 <LCD_Init+0x3980>)
 80058e8:	2280      	movs	r2, #128	; 0x80
 80058ea:	615a      	str	r2, [r3, #20]
 80058ec:	4b88      	ldr	r3, [pc, #544]	; (8005b10 <LCD_Init+0x3980>)
 80058ee:	2280      	movs	r2, #128	; 0x80
 80058f0:	611a      	str	r2, [r3, #16]
 80058f2:	4b87      	ldr	r3, [pc, #540]	; (8005b10 <LCD_Init+0x3980>)
 80058f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f8:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80058fa:	2001      	movs	r0, #1
 80058fc:	f001 fa7a 	bl	8006df4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005900:	20e0      	movs	r0, #224	; 0xe0
 8005902:	f7fb f94d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005906:	4b82      	ldr	r3, [pc, #520]	; (8005b10 <LCD_Init+0x3980>)
 8005908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800590c:	611a      	str	r2, [r3, #16]
 800590e:	4b80      	ldr	r3, [pc, #512]	; (8005b10 <LCD_Init+0x3980>)
 8005910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005914:	615a      	str	r2, [r3, #20]
 8005916:	4b7f      	ldr	r3, [pc, #508]	; (8005b14 <LCD_Init+0x3984>)
 8005918:	2201      	movs	r2, #1
 800591a:	60da      	str	r2, [r3, #12]
 800591c:	4b7c      	ldr	r3, [pc, #496]	; (8005b10 <LCD_Init+0x3980>)
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	615a      	str	r2, [r3, #20]
 8005922:	4b7b      	ldr	r3, [pc, #492]	; (8005b10 <LCD_Init+0x3980>)
 8005924:	2280      	movs	r2, #128	; 0x80
 8005926:	611a      	str	r2, [r3, #16]
 8005928:	4b79      	ldr	r3, [pc, #484]	; (8005b10 <LCD_Init+0x3980>)
 800592a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800592e:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005930:	200a      	movs	r0, #10
 8005932:	f001 fa5f 	bl	8006df4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005936:	20e0      	movs	r0, #224	; 0xe0
 8005938:	f7fb f932 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 800593c:	4b74      	ldr	r3, [pc, #464]	; (8005b10 <LCD_Init+0x3980>)
 800593e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005942:	611a      	str	r2, [r3, #16]
 8005944:	4b72      	ldr	r3, [pc, #456]	; (8005b10 <LCD_Init+0x3980>)
 8005946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800594a:	615a      	str	r2, [r3, #20]
 800594c:	4b71      	ldr	r3, [pc, #452]	; (8005b14 <LCD_Init+0x3984>)
 800594e:	2203      	movs	r2, #3
 8005950:	60da      	str	r2, [r3, #12]
 8005952:	4b6f      	ldr	r3, [pc, #444]	; (8005b10 <LCD_Init+0x3980>)
 8005954:	2280      	movs	r2, #128	; 0x80
 8005956:	615a      	str	r2, [r3, #20]
 8005958:	4b6d      	ldr	r3, [pc, #436]	; (8005b10 <LCD_Init+0x3980>)
 800595a:	2280      	movs	r2, #128	; 0x80
 800595c:	611a      	str	r2, [r3, #16]
 800595e:	4b6c      	ldr	r3, [pc, #432]	; (8005b10 <LCD_Init+0x3980>)
 8005960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005964:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8005966:	200c      	movs	r0, #12
 8005968:	f001 fa44 	bl	8006df4 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 800596c:	2001      	movs	r0, #1
 800596e:	f7fb f917 	bl	8000ba0 <LCD_WR_REG>
		HAL_Delay(10);
 8005972:	200a      	movs	r0, #10
 8005974:	f001 fa3e 	bl	8006df4 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005978:	20e6      	movs	r0, #230	; 0xe6
 800597a:	f7fb f911 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800597e:	4b64      	ldr	r3, [pc, #400]	; (8005b10 <LCD_Init+0x3980>)
 8005980:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005984:	611a      	str	r2, [r3, #16]
 8005986:	4b62      	ldr	r3, [pc, #392]	; (8005b10 <LCD_Init+0x3980>)
 8005988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598c:	615a      	str	r2, [r3, #20]
 800598e:	4b61      	ldr	r3, [pc, #388]	; (8005b14 <LCD_Init+0x3984>)
 8005990:	222f      	movs	r2, #47	; 0x2f
 8005992:	60da      	str	r2, [r3, #12]
 8005994:	4b5e      	ldr	r3, [pc, #376]	; (8005b10 <LCD_Init+0x3980>)
 8005996:	2280      	movs	r2, #128	; 0x80
 8005998:	615a      	str	r2, [r3, #20]
 800599a:	4b5d      	ldr	r3, [pc, #372]	; (8005b10 <LCD_Init+0x3980>)
 800599c:	2280      	movs	r2, #128	; 0x80
 800599e:	611a      	str	r2, [r3, #16]
 80059a0:	4b5b      	ldr	r3, [pc, #364]	; (8005b10 <LCD_Init+0x3980>)
 80059a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80059a8:	4b59      	ldr	r3, [pc, #356]	; (8005b10 <LCD_Init+0x3980>)
 80059aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ae:	611a      	str	r2, [r3, #16]
 80059b0:	4b57      	ldr	r3, [pc, #348]	; (8005b10 <LCD_Init+0x3980>)
 80059b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b6:	615a      	str	r2, [r3, #20]
 80059b8:	4b56      	ldr	r3, [pc, #344]	; (8005b14 <LCD_Init+0x3984>)
 80059ba:	22ff      	movs	r2, #255	; 0xff
 80059bc:	60da      	str	r2, [r3, #12]
 80059be:	4b54      	ldr	r3, [pc, #336]	; (8005b10 <LCD_Init+0x3980>)
 80059c0:	2280      	movs	r2, #128	; 0x80
 80059c2:	615a      	str	r2, [r3, #20]
 80059c4:	4b52      	ldr	r3, [pc, #328]	; (8005b10 <LCD_Init+0x3980>)
 80059c6:	2280      	movs	r2, #128	; 0x80
 80059c8:	611a      	str	r2, [r3, #16]
 80059ca:	4b51      	ldr	r3, [pc, #324]	; (8005b10 <LCD_Init+0x3980>)
 80059cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80059d2:	4b4f      	ldr	r3, [pc, #316]	; (8005b10 <LCD_Init+0x3980>)
 80059d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059d8:	611a      	str	r2, [r3, #16]
 80059da:	4b4d      	ldr	r3, [pc, #308]	; (8005b10 <LCD_Init+0x3980>)
 80059dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e0:	615a      	str	r2, [r3, #20]
 80059e2:	4b4c      	ldr	r3, [pc, #304]	; (8005b14 <LCD_Init+0x3984>)
 80059e4:	22ff      	movs	r2, #255	; 0xff
 80059e6:	60da      	str	r2, [r3, #12]
 80059e8:	4b49      	ldr	r3, [pc, #292]	; (8005b10 <LCD_Init+0x3980>)
 80059ea:	2280      	movs	r2, #128	; 0x80
 80059ec:	615a      	str	r2, [r3, #20]
 80059ee:	4b48      	ldr	r3, [pc, #288]	; (8005b10 <LCD_Init+0x3980>)
 80059f0:	2280      	movs	r2, #128	; 0x80
 80059f2:	611a      	str	r2, [r3, #16]
 80059f4:	4b46      	ldr	r3, [pc, #280]	; (8005b10 <LCD_Init+0x3980>)
 80059f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80059fc:	20b0      	movs	r0, #176	; 0xb0
 80059fe:	f7fb f8cf 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005a02:	4b43      	ldr	r3, [pc, #268]	; (8005b10 <LCD_Init+0x3980>)
 8005a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a08:	611a      	str	r2, [r3, #16]
 8005a0a:	4b41      	ldr	r3, [pc, #260]	; (8005b10 <LCD_Init+0x3980>)
 8005a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a10:	615a      	str	r2, [r3, #20]
 8005a12:	4b40      	ldr	r3, [pc, #256]	; (8005b14 <LCD_Init+0x3984>)
 8005a14:	2220      	movs	r2, #32
 8005a16:	60da      	str	r2, [r3, #12]
 8005a18:	4b3d      	ldr	r3, [pc, #244]	; (8005b10 <LCD_Init+0x3980>)
 8005a1a:	2280      	movs	r2, #128	; 0x80
 8005a1c:	615a      	str	r2, [r3, #20]
 8005a1e:	4b3c      	ldr	r3, [pc, #240]	; (8005b10 <LCD_Init+0x3980>)
 8005a20:	2280      	movs	r2, #128	; 0x80
 8005a22:	611a      	str	r2, [r3, #16]
 8005a24:	4b3a      	ldr	r3, [pc, #232]	; (8005b10 <LCD_Init+0x3980>)
 8005a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a2a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005a2c:	4b38      	ldr	r3, [pc, #224]	; (8005b10 <LCD_Init+0x3980>)
 8005a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a32:	611a      	str	r2, [r3, #16]
 8005a34:	4b36      	ldr	r3, [pc, #216]	; (8005b10 <LCD_Init+0x3980>)
 8005a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3a:	615a      	str	r2, [r3, #20]
 8005a3c:	4b35      	ldr	r3, [pc, #212]	; (8005b14 <LCD_Init+0x3984>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	60da      	str	r2, [r3, #12]
 8005a42:	4b33      	ldr	r3, [pc, #204]	; (8005b10 <LCD_Init+0x3980>)
 8005a44:	2280      	movs	r2, #128	; 0x80
 8005a46:	615a      	str	r2, [r3, #20]
 8005a48:	4b31      	ldr	r3, [pc, #196]	; (8005b10 <LCD_Init+0x3980>)
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	611a      	str	r2, [r3, #16]
 8005a4e:	4b30      	ldr	r3, [pc, #192]	; (8005b10 <LCD_Init+0x3980>)
 8005a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a54:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8005a56:	4b2e      	ldr	r3, [pc, #184]	; (8005b10 <LCD_Init+0x3980>)
 8005a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a5c:	611a      	str	r2, [r3, #16]
 8005a5e:	4b2c      	ldr	r3, [pc, #176]	; (8005b10 <LCD_Init+0x3980>)
 8005a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a64:	615a      	str	r2, [r3, #20]
 8005a66:	4b2b      	ldr	r3, [pc, #172]	; (8005b14 <LCD_Init+0x3984>)
 8005a68:	2203      	movs	r2, #3
 8005a6a:	60da      	str	r2, [r3, #12]
 8005a6c:	4b28      	ldr	r3, [pc, #160]	; (8005b10 <LCD_Init+0x3980>)
 8005a6e:	2280      	movs	r2, #128	; 0x80
 8005a70:	615a      	str	r2, [r3, #20]
 8005a72:	4b27      	ldr	r3, [pc, #156]	; (8005b10 <LCD_Init+0x3980>)
 8005a74:	2280      	movs	r2, #128	; 0x80
 8005a76:	611a      	str	r2, [r3, #16]
 8005a78:	4b25      	ldr	r3, [pc, #148]	; (8005b10 <LCD_Init+0x3980>)
 8005a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005a80:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <LCD_Init+0x3980>)
 8005a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a86:	611a      	str	r2, [r3, #16]
 8005a88:	4b21      	ldr	r3, [pc, #132]	; (8005b10 <LCD_Init+0x3980>)
 8005a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a8e:	615a      	str	r2, [r3, #20]
 8005a90:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <LCD_Init+0x3984>)
 8005a92:	f240 321f 	movw	r2, #799	; 0x31f
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <LCD_Init+0x3980>)
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	615a      	str	r2, [r3, #20]
 8005a9e:	4b1c      	ldr	r3, [pc, #112]	; (8005b10 <LCD_Init+0x3980>)
 8005aa0:	2280      	movs	r2, #128	; 0x80
 8005aa2:	611a      	str	r2, [r3, #16]
 8005aa4:	4b1a      	ldr	r3, [pc, #104]	; (8005b10 <LCD_Init+0x3980>)
 8005aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aaa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005aac:	4b18      	ldr	r3, [pc, #96]	; (8005b10 <LCD_Init+0x3980>)
 8005aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ab2:	611a      	str	r2, [r3, #16]
 8005ab4:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <LCD_Init+0x3980>)
 8005ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aba:	615a      	str	r2, [r3, #20]
 8005abc:	4b15      	ldr	r3, [pc, #84]	; (8005b14 <LCD_Init+0x3984>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	60da      	str	r2, [r3, #12]
 8005ac2:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <LCD_Init+0x3980>)
 8005ac4:	2280      	movs	r2, #128	; 0x80
 8005ac6:	615a      	str	r2, [r3, #20]
 8005ac8:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <LCD_Init+0x3980>)
 8005aca:	2280      	movs	r2, #128	; 0x80
 8005acc:	611a      	str	r2, [r3, #16]
 8005ace:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <LCD_Init+0x3980>)
 8005ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005ad6:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <LCD_Init+0x3980>)
 8005ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005adc:	611a      	str	r2, [r3, #16]
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <LCD_Init+0x3980>)
 8005ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae4:	615a      	str	r2, [r3, #20]
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <LCD_Init+0x3984>)
 8005ae8:	f240 12df 	movw	r2, #479	; 0x1df
 8005aec:	60da      	str	r2, [r3, #12]
 8005aee:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <LCD_Init+0x3980>)
 8005af0:	2280      	movs	r2, #128	; 0x80
 8005af2:	615a      	str	r2, [r3, #20]
 8005af4:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <LCD_Init+0x3980>)
 8005af6:	2280      	movs	r2, #128	; 0x80
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <LCD_Init+0x3980>)
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005b02:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <LCD_Init+0x3980>)
 8005b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b08:	e006      	b.n	8005b18 <LCD_Init+0x3988>
 8005b0a:	bf00      	nop
 8005b0c:	2000020c 	.word	0x2000020c
 8005b10:	40011000 	.word	0x40011000
 8005b14:	40010c00 	.word	0x40010c00
 8005b18:	611a      	str	r2, [r3, #16]
 8005b1a:	4ba3      	ldr	r3, [pc, #652]	; (8005da8 <LCD_Init+0x3c18>)
 8005b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b20:	615a      	str	r2, [r3, #20]
 8005b22:	4ba2      	ldr	r3, [pc, #648]	; (8005dac <LCD_Init+0x3c1c>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	60da      	str	r2, [r3, #12]
 8005b28:	4b9f      	ldr	r3, [pc, #636]	; (8005da8 <LCD_Init+0x3c18>)
 8005b2a:	2280      	movs	r2, #128	; 0x80
 8005b2c:	615a      	str	r2, [r3, #20]
 8005b2e:	4b9e      	ldr	r3, [pc, #632]	; (8005da8 <LCD_Init+0x3c18>)
 8005b30:	2280      	movs	r2, #128	; 0x80
 8005b32:	611a      	str	r2, [r3, #16]
 8005b34:	4b9c      	ldr	r3, [pc, #624]	; (8005da8 <LCD_Init+0x3c18>)
 8005b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b3a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005b3c:	20b4      	movs	r0, #180	; 0xb4
 8005b3e:	f7fb f82f 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005b42:	4b99      	ldr	r3, [pc, #612]	; (8005da8 <LCD_Init+0x3c18>)
 8005b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b48:	611a      	str	r2, [r3, #16]
 8005b4a:	4b97      	ldr	r3, [pc, #604]	; (8005da8 <LCD_Init+0x3c18>)
 8005b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b50:	615a      	str	r2, [r3, #20]
 8005b52:	4b96      	ldr	r3, [pc, #600]	; (8005dac <LCD_Init+0x3c1c>)
 8005b54:	2204      	movs	r2, #4
 8005b56:	60da      	str	r2, [r3, #12]
 8005b58:	4b93      	ldr	r3, [pc, #588]	; (8005da8 <LCD_Init+0x3c18>)
 8005b5a:	2280      	movs	r2, #128	; 0x80
 8005b5c:	615a      	str	r2, [r3, #20]
 8005b5e:	4b92      	ldr	r3, [pc, #584]	; (8005da8 <LCD_Init+0x3c18>)
 8005b60:	2280      	movs	r2, #128	; 0x80
 8005b62:	611a      	str	r2, [r3, #16]
 8005b64:	4b90      	ldr	r3, [pc, #576]	; (8005da8 <LCD_Init+0x3c18>)
 8005b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b6a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005b6c:	4b8e      	ldr	r3, [pc, #568]	; (8005da8 <LCD_Init+0x3c18>)
 8005b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b72:	611a      	str	r2, [r3, #16]
 8005b74:	4b8c      	ldr	r3, [pc, #560]	; (8005da8 <LCD_Init+0x3c18>)
 8005b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7a:	615a      	str	r2, [r3, #20]
 8005b7c:	4b8b      	ldr	r3, [pc, #556]	; (8005dac <LCD_Init+0x3c1c>)
 8005b7e:	f240 421f 	movw	r2, #1055	; 0x41f
 8005b82:	60da      	str	r2, [r3, #12]
 8005b84:	4b88      	ldr	r3, [pc, #544]	; (8005da8 <LCD_Init+0x3c18>)
 8005b86:	2280      	movs	r2, #128	; 0x80
 8005b88:	615a      	str	r2, [r3, #20]
 8005b8a:	4b87      	ldr	r3, [pc, #540]	; (8005da8 <LCD_Init+0x3c18>)
 8005b8c:	2280      	movs	r2, #128	; 0x80
 8005b8e:	611a      	str	r2, [r3, #16]
 8005b90:	4b85      	ldr	r3, [pc, #532]	; (8005da8 <LCD_Init+0x3c18>)
 8005b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b96:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005b98:	4b83      	ldr	r3, [pc, #524]	; (8005da8 <LCD_Init+0x3c18>)
 8005b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b9e:	611a      	str	r2, [r3, #16]
 8005ba0:	4b81      	ldr	r3, [pc, #516]	; (8005da8 <LCD_Init+0x3c18>)
 8005ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba6:	615a      	str	r2, [r3, #20]
 8005ba8:	4b80      	ldr	r3, [pc, #512]	; (8005dac <LCD_Init+0x3c1c>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	60da      	str	r2, [r3, #12]
 8005bae:	4b7e      	ldr	r3, [pc, #504]	; (8005da8 <LCD_Init+0x3c18>)
 8005bb0:	2280      	movs	r2, #128	; 0x80
 8005bb2:	615a      	str	r2, [r3, #20]
 8005bb4:	4b7c      	ldr	r3, [pc, #496]	; (8005da8 <LCD_Init+0x3c18>)
 8005bb6:	2280      	movs	r2, #128	; 0x80
 8005bb8:	611a      	str	r2, [r3, #16]
 8005bba:	4b7b      	ldr	r3, [pc, #492]	; (8005da8 <LCD_Init+0x3c18>)
 8005bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005bc2:	4b79      	ldr	r3, [pc, #484]	; (8005da8 <LCD_Init+0x3c18>)
 8005bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bc8:	611a      	str	r2, [r3, #16]
 8005bca:	4b77      	ldr	r3, [pc, #476]	; (8005da8 <LCD_Init+0x3c18>)
 8005bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd0:	615a      	str	r2, [r3, #20]
 8005bd2:	4b76      	ldr	r3, [pc, #472]	; (8005dac <LCD_Init+0x3c1c>)
 8005bd4:	222e      	movs	r2, #46	; 0x2e
 8005bd6:	60da      	str	r2, [r3, #12]
 8005bd8:	4b73      	ldr	r3, [pc, #460]	; (8005da8 <LCD_Init+0x3c18>)
 8005bda:	2280      	movs	r2, #128	; 0x80
 8005bdc:	615a      	str	r2, [r3, #20]
 8005bde:	4b72      	ldr	r3, [pc, #456]	; (8005da8 <LCD_Init+0x3c18>)
 8005be0:	2280      	movs	r2, #128	; 0x80
 8005be2:	611a      	str	r2, [r3, #16]
 8005be4:	4b70      	ldr	r3, [pc, #448]	; (8005da8 <LCD_Init+0x3c18>)
 8005be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005bec:	4b6e      	ldr	r3, [pc, #440]	; (8005da8 <LCD_Init+0x3c18>)
 8005bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf2:	611a      	str	r2, [r3, #16]
 8005bf4:	4b6c      	ldr	r3, [pc, #432]	; (8005da8 <LCD_Init+0x3c18>)
 8005bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bfa:	615a      	str	r2, [r3, #20]
 8005bfc:	4b6b      	ldr	r3, [pc, #428]	; (8005dac <LCD_Init+0x3c1c>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	60da      	str	r2, [r3, #12]
 8005c02:	4b69      	ldr	r3, [pc, #420]	; (8005da8 <LCD_Init+0x3c18>)
 8005c04:	2280      	movs	r2, #128	; 0x80
 8005c06:	615a      	str	r2, [r3, #20]
 8005c08:	4b67      	ldr	r3, [pc, #412]	; (8005da8 <LCD_Init+0x3c18>)
 8005c0a:	2280      	movs	r2, #128	; 0x80
 8005c0c:	611a      	str	r2, [r3, #16]
 8005c0e:	4b66      	ldr	r3, [pc, #408]	; (8005da8 <LCD_Init+0x3c18>)
 8005c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c14:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005c16:	4b64      	ldr	r3, [pc, #400]	; (8005da8 <LCD_Init+0x3c18>)
 8005c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c1c:	611a      	str	r2, [r3, #16]
 8005c1e:	4b62      	ldr	r3, [pc, #392]	; (8005da8 <LCD_Init+0x3c18>)
 8005c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c24:	615a      	str	r2, [r3, #20]
 8005c26:	4b61      	ldr	r3, [pc, #388]	; (8005dac <LCD_Init+0x3c1c>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	60da      	str	r2, [r3, #12]
 8005c2c:	4b5e      	ldr	r3, [pc, #376]	; (8005da8 <LCD_Init+0x3c18>)
 8005c2e:	2280      	movs	r2, #128	; 0x80
 8005c30:	615a      	str	r2, [r3, #20]
 8005c32:	4b5d      	ldr	r3, [pc, #372]	; (8005da8 <LCD_Init+0x3c18>)
 8005c34:	2280      	movs	r2, #128	; 0x80
 8005c36:	611a      	str	r2, [r3, #16]
 8005c38:	4b5b      	ldr	r3, [pc, #364]	; (8005da8 <LCD_Init+0x3c18>)
 8005c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c3e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005c40:	4b59      	ldr	r3, [pc, #356]	; (8005da8 <LCD_Init+0x3c18>)
 8005c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c46:	611a      	str	r2, [r3, #16]
 8005c48:	4b57      	ldr	r3, [pc, #348]	; (8005da8 <LCD_Init+0x3c18>)
 8005c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4e:	615a      	str	r2, [r3, #20]
 8005c50:	4b56      	ldr	r3, [pc, #344]	; (8005dac <LCD_Init+0x3c1c>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	60da      	str	r2, [r3, #12]
 8005c56:	4b54      	ldr	r3, [pc, #336]	; (8005da8 <LCD_Init+0x3c18>)
 8005c58:	2280      	movs	r2, #128	; 0x80
 8005c5a:	615a      	str	r2, [r3, #20]
 8005c5c:	4b52      	ldr	r3, [pc, #328]	; (8005da8 <LCD_Init+0x3c18>)
 8005c5e:	2280      	movs	r2, #128	; 0x80
 8005c60:	611a      	str	r2, [r3, #16]
 8005c62:	4b51      	ldr	r3, [pc, #324]	; (8005da8 <LCD_Init+0x3c18>)
 8005c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c68:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005c6a:	4b4f      	ldr	r3, [pc, #316]	; (8005da8 <LCD_Init+0x3c18>)
 8005c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c70:	611a      	str	r2, [r3, #16]
 8005c72:	4b4d      	ldr	r3, [pc, #308]	; (8005da8 <LCD_Init+0x3c18>)
 8005c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c78:	615a      	str	r2, [r3, #20]
 8005c7a:	4b4c      	ldr	r3, [pc, #304]	; (8005dac <LCD_Init+0x3c1c>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	60da      	str	r2, [r3, #12]
 8005c80:	4b49      	ldr	r3, [pc, #292]	; (8005da8 <LCD_Init+0x3c18>)
 8005c82:	2280      	movs	r2, #128	; 0x80
 8005c84:	615a      	str	r2, [r3, #20]
 8005c86:	4b48      	ldr	r3, [pc, #288]	; (8005da8 <LCD_Init+0x3c18>)
 8005c88:	2280      	movs	r2, #128	; 0x80
 8005c8a:	611a      	str	r2, [r3, #16]
 8005c8c:	4b46      	ldr	r3, [pc, #280]	; (8005da8 <LCD_Init+0x3c18>)
 8005c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c92:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005c94:	20b6      	movs	r0, #182	; 0xb6
 8005c96:	f7fa ff83 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005c9a:	4b43      	ldr	r3, [pc, #268]	; (8005da8 <LCD_Init+0x3c18>)
 8005c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca0:	611a      	str	r2, [r3, #16]
 8005ca2:	4b41      	ldr	r3, [pc, #260]	; (8005da8 <LCD_Init+0x3c18>)
 8005ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca8:	615a      	str	r2, [r3, #20]
 8005caa:	4b40      	ldr	r3, [pc, #256]	; (8005dac <LCD_Init+0x3c1c>)
 8005cac:	2202      	movs	r2, #2
 8005cae:	60da      	str	r2, [r3, #12]
 8005cb0:	4b3d      	ldr	r3, [pc, #244]	; (8005da8 <LCD_Init+0x3c18>)
 8005cb2:	2280      	movs	r2, #128	; 0x80
 8005cb4:	615a      	str	r2, [r3, #20]
 8005cb6:	4b3c      	ldr	r3, [pc, #240]	; (8005da8 <LCD_Init+0x3c18>)
 8005cb8:	2280      	movs	r2, #128	; 0x80
 8005cba:	611a      	str	r2, [r3, #16]
 8005cbc:	4b3a      	ldr	r3, [pc, #232]	; (8005da8 <LCD_Init+0x3c18>)
 8005cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005cc4:	4b38      	ldr	r3, [pc, #224]	; (8005da8 <LCD_Init+0x3c18>)
 8005cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cca:	611a      	str	r2, [r3, #16]
 8005ccc:	4b36      	ldr	r3, [pc, #216]	; (8005da8 <LCD_Init+0x3c18>)
 8005cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd2:	615a      	str	r2, [r3, #20]
 8005cd4:	4b35      	ldr	r3, [pc, #212]	; (8005dac <LCD_Init+0x3c1c>)
 8005cd6:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005cda:	60da      	str	r2, [r3, #12]
 8005cdc:	4b32      	ldr	r3, [pc, #200]	; (8005da8 <LCD_Init+0x3c18>)
 8005cde:	2280      	movs	r2, #128	; 0x80
 8005ce0:	615a      	str	r2, [r3, #20]
 8005ce2:	4b31      	ldr	r3, [pc, #196]	; (8005da8 <LCD_Init+0x3c18>)
 8005ce4:	2280      	movs	r2, #128	; 0x80
 8005ce6:	611a      	str	r2, [r3, #16]
 8005ce8:	4b2f      	ldr	r3, [pc, #188]	; (8005da8 <LCD_Init+0x3c18>)
 8005cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005cf0:	4b2d      	ldr	r3, [pc, #180]	; (8005da8 <LCD_Init+0x3c18>)
 8005cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cf6:	611a      	str	r2, [r3, #16]
 8005cf8:	4b2b      	ldr	r3, [pc, #172]	; (8005da8 <LCD_Init+0x3c18>)
 8005cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfe:	615a      	str	r2, [r3, #20]
 8005d00:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <LCD_Init+0x3c1c>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	60da      	str	r2, [r3, #12]
 8005d06:	4b28      	ldr	r3, [pc, #160]	; (8005da8 <LCD_Init+0x3c18>)
 8005d08:	2280      	movs	r2, #128	; 0x80
 8005d0a:	615a      	str	r2, [r3, #20]
 8005d0c:	4b26      	ldr	r3, [pc, #152]	; (8005da8 <LCD_Init+0x3c18>)
 8005d0e:	2280      	movs	r2, #128	; 0x80
 8005d10:	611a      	str	r2, [r3, #16]
 8005d12:	4b25      	ldr	r3, [pc, #148]	; (8005da8 <LCD_Init+0x3c18>)
 8005d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d18:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005d1a:	4b23      	ldr	r3, [pc, #140]	; (8005da8 <LCD_Init+0x3c18>)
 8005d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d20:	611a      	str	r2, [r3, #16]
 8005d22:	4b21      	ldr	r3, [pc, #132]	; (8005da8 <LCD_Init+0x3c18>)
 8005d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d28:	615a      	str	r2, [r3, #20]
 8005d2a:	4b20      	ldr	r3, [pc, #128]	; (8005dac <LCD_Init+0x3c1c>)
 8005d2c:	2217      	movs	r2, #23
 8005d2e:	60da      	str	r2, [r3, #12]
 8005d30:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <LCD_Init+0x3c18>)
 8005d32:	2280      	movs	r2, #128	; 0x80
 8005d34:	615a      	str	r2, [r3, #20]
 8005d36:	4b1c      	ldr	r3, [pc, #112]	; (8005da8 <LCD_Init+0x3c18>)
 8005d38:	2280      	movs	r2, #128	; 0x80
 8005d3a:	611a      	str	r2, [r3, #16]
 8005d3c:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <LCD_Init+0x3c18>)
 8005d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d42:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005d44:	4b18      	ldr	r3, [pc, #96]	; (8005da8 <LCD_Init+0x3c18>)
 8005d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d4a:	611a      	str	r2, [r3, #16]
 8005d4c:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <LCD_Init+0x3c18>)
 8005d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d52:	615a      	str	r2, [r3, #20]
 8005d54:	4b15      	ldr	r3, [pc, #84]	; (8005dac <LCD_Init+0x3c1c>)
 8005d56:	2215      	movs	r2, #21
 8005d58:	60da      	str	r2, [r3, #12]
 8005d5a:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <LCD_Init+0x3c18>)
 8005d5c:	2280      	movs	r2, #128	; 0x80
 8005d5e:	615a      	str	r2, [r3, #20]
 8005d60:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <LCD_Init+0x3c18>)
 8005d62:	2280      	movs	r2, #128	; 0x80
 8005d64:	611a      	str	r2, [r3, #16]
 8005d66:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <LCD_Init+0x3c18>)
 8005d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d6c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005d6e:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <LCD_Init+0x3c18>)
 8005d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d74:	611a      	str	r2, [r3, #16]
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <LCD_Init+0x3c18>)
 8005d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d7c:	615a      	str	r2, [r3, #20]
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <LCD_Init+0x3c1c>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	60da      	str	r2, [r3, #12]
 8005d84:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <LCD_Init+0x3c18>)
 8005d86:	2280      	movs	r2, #128	; 0x80
 8005d88:	615a      	str	r2, [r3, #20]
 8005d8a:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <LCD_Init+0x3c18>)
 8005d8c:	2280      	movs	r2, #128	; 0x80
 8005d8e:	611a      	str	r2, [r3, #16]
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <LCD_Init+0x3c18>)
 8005d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d96:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005d98:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <LCD_Init+0x3c18>)
 8005d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d9e:	611a      	str	r2, [r3, #16]
 8005da0:	4b01      	ldr	r3, [pc, #4]	; (8005da8 <LCD_Init+0x3c18>)
 8005da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da6:	e003      	b.n	8005db0 <LCD_Init+0x3c20>
 8005da8:	40011000 	.word	0x40011000
 8005dac:	40010c00 	.word	0x40010c00
 8005db0:	615a      	str	r2, [r3, #20]
 8005db2:	4b8b      	ldr	r3, [pc, #556]	; (8005fe0 <LCD_Init+0x3e50>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	60da      	str	r2, [r3, #12]
 8005db8:	4b8a      	ldr	r3, [pc, #552]	; (8005fe4 <LCD_Init+0x3e54>)
 8005dba:	2280      	movs	r2, #128	; 0x80
 8005dbc:	615a      	str	r2, [r3, #20]
 8005dbe:	4b89      	ldr	r3, [pc, #548]	; (8005fe4 <LCD_Init+0x3e54>)
 8005dc0:	2280      	movs	r2, #128	; 0x80
 8005dc2:	611a      	str	r2, [r3, #16]
 8005dc4:	4b87      	ldr	r3, [pc, #540]	; (8005fe4 <LCD_Init+0x3e54>)
 8005dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dca:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005dcc:	20f0      	movs	r0, #240	; 0xf0
 8005dce:	f7fa fee7 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005dd2:	4b84      	ldr	r3, [pc, #528]	; (8005fe4 <LCD_Init+0x3e54>)
 8005dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dd8:	611a      	str	r2, [r3, #16]
 8005dda:	4b82      	ldr	r3, [pc, #520]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de0:	615a      	str	r2, [r3, #20]
 8005de2:	4b7f      	ldr	r3, [pc, #508]	; (8005fe0 <LCD_Init+0x3e50>)
 8005de4:	2203      	movs	r2, #3
 8005de6:	60da      	str	r2, [r3, #12]
 8005de8:	4b7e      	ldr	r3, [pc, #504]	; (8005fe4 <LCD_Init+0x3e54>)
 8005dea:	2280      	movs	r2, #128	; 0x80
 8005dec:	615a      	str	r2, [r3, #20]
 8005dee:	4b7d      	ldr	r3, [pc, #500]	; (8005fe4 <LCD_Init+0x3e54>)
 8005df0:	2280      	movs	r2, #128	; 0x80
 8005df2:	611a      	str	r2, [r3, #16]
 8005df4:	4b7b      	ldr	r3, [pc, #492]	; (8005fe4 <LCD_Init+0x3e54>)
 8005df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dfa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005dfc:	2029      	movs	r0, #41	; 0x29
 8005dfe:	f7fa fecf 	bl	8000ba0 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005e02:	20d0      	movs	r0, #208	; 0xd0
 8005e04:	f7fa fecc 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005e08:	4b76      	ldr	r3, [pc, #472]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e0e:	611a      	str	r2, [r3, #16]
 8005e10:	4b74      	ldr	r3, [pc, #464]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e16:	615a      	str	r2, [r3, #20]
 8005e18:	4b71      	ldr	r3, [pc, #452]	; (8005fe0 <LCD_Init+0x3e50>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	60da      	str	r2, [r3, #12]
 8005e1e:	4b71      	ldr	r3, [pc, #452]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e20:	2280      	movs	r2, #128	; 0x80
 8005e22:	615a      	str	r2, [r3, #20]
 8005e24:	4b6f      	ldr	r3, [pc, #444]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e26:	2280      	movs	r2, #128	; 0x80
 8005e28:	611a      	str	r2, [r3, #16]
 8005e2a:	4b6e      	ldr	r3, [pc, #440]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e30:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005e32:	20be      	movs	r0, #190	; 0xbe
 8005e34:	f7fa feb4 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005e38:	4b6a      	ldr	r3, [pc, #424]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e3e:	611a      	str	r2, [r3, #16]
 8005e40:	4b68      	ldr	r3, [pc, #416]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e46:	615a      	str	r2, [r3, #20]
 8005e48:	4b65      	ldr	r3, [pc, #404]	; (8005fe0 <LCD_Init+0x3e50>)
 8005e4a:	2205      	movs	r2, #5
 8005e4c:	60da      	str	r2, [r3, #12]
 8005e4e:	4b65      	ldr	r3, [pc, #404]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e50:	2280      	movs	r2, #128	; 0x80
 8005e52:	615a      	str	r2, [r3, #20]
 8005e54:	4b63      	ldr	r3, [pc, #396]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e56:	2280      	movs	r2, #128	; 0x80
 8005e58:	611a      	str	r2, [r3, #16]
 8005e5a:	4b62      	ldr	r3, [pc, #392]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e60:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005e62:	4b60      	ldr	r3, [pc, #384]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e68:	611a      	str	r2, [r3, #16]
 8005e6a:	4b5e      	ldr	r3, [pc, #376]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e70:	615a      	str	r2, [r3, #20]
 8005e72:	4b5b      	ldr	r3, [pc, #364]	; (8005fe0 <LCD_Init+0x3e50>)
 8005e74:	22fe      	movs	r2, #254	; 0xfe
 8005e76:	60da      	str	r2, [r3, #12]
 8005e78:	4b5a      	ldr	r3, [pc, #360]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e7a:	2280      	movs	r2, #128	; 0x80
 8005e7c:	615a      	str	r2, [r3, #20]
 8005e7e:	4b59      	ldr	r3, [pc, #356]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e80:	2280      	movs	r2, #128	; 0x80
 8005e82:	611a      	str	r2, [r3, #16]
 8005e84:	4b57      	ldr	r3, [pc, #348]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e8a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005e8c:	4b55      	ldr	r3, [pc, #340]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e92:	611a      	str	r2, [r3, #16]
 8005e94:	4b53      	ldr	r3, [pc, #332]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9a:	615a      	str	r2, [r3, #20]
 8005e9c:	4b50      	ldr	r3, [pc, #320]	; (8005fe0 <LCD_Init+0x3e50>)
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	60da      	str	r2, [r3, #12]
 8005ea2:	4b50      	ldr	r3, [pc, #320]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ea4:	2280      	movs	r2, #128	; 0x80
 8005ea6:	615a      	str	r2, [r3, #20]
 8005ea8:	4b4e      	ldr	r3, [pc, #312]	; (8005fe4 <LCD_Init+0x3e54>)
 8005eaa:	2280      	movs	r2, #128	; 0x80
 8005eac:	611a      	str	r2, [r3, #16]
 8005eae:	4b4d      	ldr	r3, [pc, #308]	; (8005fe4 <LCD_Init+0x3e54>)
 8005eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005eb6:	4b4b      	ldr	r3, [pc, #300]	; (8005fe4 <LCD_Init+0x3e54>)
 8005eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ebc:	611a      	str	r2, [r3, #16]
 8005ebe:	4b49      	ldr	r3, [pc, #292]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ec4:	615a      	str	r2, [r3, #20]
 8005ec6:	4b46      	ldr	r3, [pc, #280]	; (8005fe0 <LCD_Init+0x3e50>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	60da      	str	r2, [r3, #12]
 8005ecc:	4b45      	ldr	r3, [pc, #276]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ece:	2280      	movs	r2, #128	; 0x80
 8005ed0:	615a      	str	r2, [r3, #20]
 8005ed2:	4b44      	ldr	r3, [pc, #272]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ed4:	2280      	movs	r2, #128	; 0x80
 8005ed6:	611a      	str	r2, [r3, #16]
 8005ed8:	4b42      	ldr	r3, [pc, #264]	; (8005fe4 <LCD_Init+0x3e54>)
 8005eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ede:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005ee0:	4b40      	ldr	r3, [pc, #256]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ee6:	611a      	str	r2, [r3, #16]
 8005ee8:	4b3e      	ldr	r3, [pc, #248]	; (8005fe4 <LCD_Init+0x3e54>)
 8005eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eee:	615a      	str	r2, [r3, #20]
 8005ef0:	4b3b      	ldr	r3, [pc, #236]	; (8005fe0 <LCD_Init+0x3e50>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	60da      	str	r2, [r3, #12]
 8005ef6:	4b3b      	ldr	r3, [pc, #236]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ef8:	2280      	movs	r2, #128	; 0x80
 8005efa:	615a      	str	r2, [r3, #20]
 8005efc:	4b39      	ldr	r3, [pc, #228]	; (8005fe4 <LCD_Init+0x3e54>)
 8005efe:	2280      	movs	r2, #128	; 0x80
 8005f00:	611a      	str	r2, [r3, #16]
 8005f02:	4b38      	ldr	r3, [pc, #224]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f08:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005f0a:	4b36      	ldr	r3, [pc, #216]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f10:	611a      	str	r2, [r3, #16]
 8005f12:	4b34      	ldr	r3, [pc, #208]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f18:	615a      	str	r2, [r3, #20]
 8005f1a:	4b31      	ldr	r3, [pc, #196]	; (8005fe0 <LCD_Init+0x3e50>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	60da      	str	r2, [r3, #12]
 8005f20:	4b30      	ldr	r3, [pc, #192]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f22:	2280      	movs	r2, #128	; 0x80
 8005f24:	615a      	str	r2, [r3, #20]
 8005f26:	4b2f      	ldr	r3, [pc, #188]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f28:	2280      	movs	r2, #128	; 0x80
 8005f2a:	611a      	str	r2, [r3, #16]
 8005f2c:	4b2d      	ldr	r3, [pc, #180]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f32:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005f34:	20b8      	movs	r0, #184	; 0xb8
 8005f36:	f7fa fe33 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005f3a:	4b2a      	ldr	r3, [pc, #168]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f40:	611a      	str	r2, [r3, #16]
 8005f42:	4b28      	ldr	r3, [pc, #160]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f48:	615a      	str	r2, [r3, #20]
 8005f4a:	4b25      	ldr	r3, [pc, #148]	; (8005fe0 <LCD_Init+0x3e50>)
 8005f4c:	2203      	movs	r2, #3
 8005f4e:	60da      	str	r2, [r3, #12]
 8005f50:	4b24      	ldr	r3, [pc, #144]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f52:	2280      	movs	r2, #128	; 0x80
 8005f54:	615a      	str	r2, [r3, #20]
 8005f56:	4b23      	ldr	r3, [pc, #140]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f58:	2280      	movs	r2, #128	; 0x80
 8005f5a:	611a      	str	r2, [r3, #16]
 8005f5c:	4b21      	ldr	r3, [pc, #132]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f62:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005f64:	4b1f      	ldr	r3, [pc, #124]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f6a:	611a      	str	r2, [r3, #16]
 8005f6c:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f72:	615a      	str	r2, [r3, #20]
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <LCD_Init+0x3e50>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	60da      	str	r2, [r3, #12]
 8005f7a:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f7c:	2280      	movs	r2, #128	; 0x80
 8005f7e:	615a      	str	r2, [r3, #20]
 8005f80:	4b18      	ldr	r3, [pc, #96]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f82:	2280      	movs	r2, #128	; 0x80
 8005f84:	611a      	str	r2, [r3, #16]
 8005f86:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f8c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005f8e:	20ba      	movs	r0, #186	; 0xba
 8005f90:	f7fa fe06 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005f94:	4b13      	ldr	r3, [pc, #76]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f9a:	611a      	str	r2, [r3, #16]
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fa2:	615a      	str	r2, [r3, #20]
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <LCD_Init+0x3e50>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	60da      	str	r2, [r3, #12]
 8005faa:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <LCD_Init+0x3e54>)
 8005fac:	2280      	movs	r2, #128	; 0x80
 8005fae:	615a      	str	r2, [r3, #20]
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <LCD_Init+0x3e54>)
 8005fb2:	2280      	movs	r2, #128	; 0x80
 8005fb4:	611a      	str	r2, [r3, #16]
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <LCD_Init+0x3e54>)
 8005fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fbc:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005fbe:	2064      	movs	r0, #100	; 0x64
 8005fc0:	f7fb ff36 	bl	8001e30 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	f7fb ffd7 	bl	8001f78 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005fca:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <LCD_Init+0x3e58>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005fd0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005fd4:	f000 f80a 	bl	8005fec <LCD_Clear>
}
 8005fd8:	bf00      	nop
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40010c00 	.word	0x40010c00
 8005fe4:	40011000 	.word	0x40011000
 8005fe8:	422201a8 	.word	0x422201a8

08005fec <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005ffa:	4b2a      	ldr	r3, [pc, #168]	; (80060a4 <LCD_Clear+0xb8>)
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8006000:	4b28      	ldr	r3, [pc, #160]	; (80060a4 <LCD_Clear+0xb8>)
 8006002:	885b      	ldrh	r3, [r3, #2]
 8006004:	461a      	mov	r2, r3
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	fb02 f303 	mul.w	r3, r2, r3
 800600c:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 800600e:	4b25      	ldr	r3, [pc, #148]	; (80060a4 <LCD_Clear+0xb8>)
 8006010:	889b      	ldrh	r3, [r3, #4]
 8006012:	f646 0204 	movw	r2, #26628	; 0x6804
 8006016:	4293      	cmp	r3, r2
 8006018:	d11a      	bne.n	8006050 <LCD_Clear+0x64>
 800601a:	4b22      	ldr	r3, [pc, #136]	; (80060a4 <LCD_Clear+0xb8>)
 800601c:	799b      	ldrb	r3, [r3, #6]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d116      	bne.n	8006050 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8006022:	4b20      	ldr	r3, [pc, #128]	; (80060a4 <LCD_Clear+0xb8>)
 8006024:	2200      	movs	r2, #0
 8006026:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8006028:	4b1e      	ldr	r3, [pc, #120]	; (80060a4 <LCD_Clear+0xb8>)
 800602a:	222a      	movs	r2, #42	; 0x2a
 800602c:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 800602e:	4b1d      	ldr	r3, [pc, #116]	; (80060a4 <LCD_Clear+0xb8>)
 8006030:	222b      	movs	r2, #43	; 0x2b
 8006032:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8006034:	2100      	movs	r1, #0
 8006036:	2000      	movs	r0, #0
 8006038:	f7fa fe84 	bl	8000d44 <LCD_SetCursor>
		lcddev.dir = 1;
 800603c:	4b19      	ldr	r3, [pc, #100]	; (80060a4 <LCD_Clear+0xb8>)
 800603e:	2201      	movs	r2, #1
 8006040:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8006042:	4b18      	ldr	r3, [pc, #96]	; (80060a4 <LCD_Clear+0xb8>)
 8006044:	222b      	movs	r2, #43	; 0x2b
 8006046:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8006048:	4b16      	ldr	r3, [pc, #88]	; (80060a4 <LCD_Clear+0xb8>)
 800604a:	222a      	movs	r2, #42	; 0x2a
 800604c:	819a      	strh	r2, [r3, #12]
 800604e:	e003      	b.n	8006058 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8006050:	2100      	movs	r1, #0
 8006052:	2000      	movs	r0, #0
 8006054:	f7fa fe76 	bl	8000d44 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8006058:	f7fa fe68 	bl	8000d2c <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e017      	b.n	8006092 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8006062:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <LCD_Clear+0xbc>)
 8006064:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006068:	611a      	str	r2, [r3, #16]
 800606a:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <LCD_Clear+0xbc>)
 800606c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006070:	615a      	str	r2, [r3, #20]
 8006072:	4a0e      	ldr	r2, [pc, #56]	; (80060ac <LCD_Clear+0xc0>)
 8006074:	88fb      	ldrh	r3, [r7, #6]
 8006076:	60d3      	str	r3, [r2, #12]
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <LCD_Clear+0xbc>)
 800607a:	2280      	movs	r2, #128	; 0x80
 800607c:	615a      	str	r2, [r3, #20]
 800607e:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <LCD_Clear+0xbc>)
 8006080:	2280      	movs	r2, #128	; 0x80
 8006082:	611a      	str	r2, [r3, #16]
 8006084:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <LCD_Clear+0xbc>)
 8006086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800608a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	429a      	cmp	r2, r3
 8006098:	d3e3      	bcc.n	8006062 <LCD_Clear+0x76>
}
 800609a:	bf00      	nop
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	2000020c 	.word	0x2000020c
 80060a8:	40011000 	.word	0x40011000
 80060ac:	40010c00 	.word	0x40010c00

080060b0 <LCD_ShowWarning>:
	}
}

//Display 警告
void LCD_ShowWarning(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size) {
 80060b0:	b590      	push	{r4, r7, lr}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	4611      	mov	r1, r2
 80060bc:	461a      	mov	r2, r3
 80060be:	4623      	mov	r3, r4
 80060c0:	80fb      	strh	r3, [r7, #6]
 80060c2:	4603      	mov	r3, r0
 80060c4:	80bb      	strh	r3, [r7, #4]
 80060c6:	460b      	mov	r3, r1
 80060c8:	807b      	strh	r3, [r7, #2]
 80060ca:	4613      	mov	r3, r2
 80060cc:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	73bb      	strb	r3, [r7, #14]
	width += x;
 80060d2:	887a      	ldrh	r2, [r7, #2]
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	4413      	add	r3, r2
 80060d8:	807b      	strh	r3, [r7, #2]
	height += y;
 80060da:	883a      	ldrh	r2, [r7, #0]
 80060dc:	88bb      	ldrh	r3, [r7, #4]
 80060de:	4413      	add	r3, r2
 80060e0:	803b      	strh	r3, [r7, #0]
	for(uint8_t i = 0; i < 6; i++)	//判断是不是非法字符!
 80060e2:	2300      	movs	r3, #0
 80060e4:	73fb      	strb	r3, [r7, #15]
 80060e6:	e023      	b.n	8006130 <LCD_ShowWarning+0x80>
	{
		if (x >= width) {
 80060e8:	88fa      	ldrh	r2, [r7, #6]
 80060ea:	887b      	ldrh	r3, [r7, #2]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d307      	bcc.n	8006100 <LCD_ShowWarning+0x50>
			x = x0;
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
 80060f2:	80fb      	strh	r3, [r7, #6]
			y += size;
 80060f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	88bb      	ldrh	r3, [r7, #4]
 80060fc:	4413      	add	r3, r2
 80060fe:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8006100:	88ba      	ldrh	r2, [r7, #4]
 8006102:	883b      	ldrh	r3, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d217      	bcs.n	8006138 <LCD_ShowWarning+0x88>
			break;	//退出
		LCD_Showgraph(x, y, i, size, 0);
 8006108:	f897 3020 	ldrb.w	r3, [r7, #32]
 800610c:	7bfa      	ldrb	r2, [r7, #15]
 800610e:	88b9      	ldrh	r1, [r7, #4]
 8006110:	88f8      	ldrh	r0, [r7, #6]
 8006112:	2400      	movs	r4, #0
 8006114:	9400      	str	r4, [sp, #0]
 8006116:	f000 f815 	bl	8006144 <LCD_Showgraph>
		x += size / 2;
 800611a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800611e:	085b      	lsrs	r3, r3, #1
 8006120:	b2db      	uxtb	r3, r3
 8006122:	b29a      	uxth	r2, r3
 8006124:	88fb      	ldrh	r3, [r7, #6]
 8006126:	4413      	add	r3, r2
 8006128:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i = 0; i < 6; i++)	//判断是不是非法字符!
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	3301      	adds	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	2b05      	cmp	r3, #5
 8006134:	d9d8      	bls.n	80060e8 <LCD_ShowWarning+0x38>
	}
}
 8006136:	e000      	b.n	800613a <LCD_ShowWarning+0x8a>
			break;	//退出
 8006138:	bf00      	nop
}
 800613a:	bf00      	nop
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	bd90      	pop	{r4, r7, pc}
	...

08006144 <LCD_Showgraph>:

void LCD_Showgraph(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8006144:	b590      	push	{r4, r7, lr}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	4604      	mov	r4, r0
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4623      	mov	r3, r4
 8006154:	80fb      	strh	r3, [r7, #6]
 8006156:	4603      	mov	r3, r0
 8006158:	80bb      	strh	r3, [r7, #4]
 800615a:	460b      	mov	r3, r1
 800615c:	70fb      	strb	r3, [r7, #3]
 800615e:	4613      	mov	r3, r2
 8006160:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8006162:	88bb      	ldrh	r3, [r7, #4]
 8006164:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8006166:	78bb      	ldrb	r3, [r7, #2]
 8006168:	08db      	lsrs	r3, r3, #3
 800616a:	b2db      	uxtb	r3, r3
 800616c:	461a      	mov	r2, r3
 800616e:	78bb      	ldrb	r3, [r7, #2]
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	bf14      	ite	ne
 800617a:	2301      	movne	r3, #1
 800617c:	2300      	moveq	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	4413      	add	r3, r2
 8006182:	b2db      	uxtb	r3, r3
 8006184:	78ba      	ldrb	r2, [r7, #2]
 8006186:	0852      	lsrs	r2, r2, #1
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	fb02 f303 	mul.w	r3, r2, r3
 800618e:	727b      	strb	r3, [r7, #9]
	for (t = 0; t < csize; t++) {
 8006190:	2300      	movs	r3, #0
 8006192:	737b      	strb	r3, [r7, #13]
 8006194:	e069      	b.n	800626a <LCD_Showgraph+0x126>
		if (size == 12)
 8006196:	78bb      	ldrb	r3, [r7, #2]
 8006198:	2b0c      	cmp	r3, #12
 800619a:	d10b      	bne.n	80061b4 <LCD_Showgraph+0x70>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	7b79      	ldrb	r1, [r7, #13]
 80061a0:	4837      	ldr	r0, [pc, #220]	; (8006280 <LCD_Showgraph+0x13c>)
 80061a2:	4613      	mov	r3, r2
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	4413      	add	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4403      	add	r3, r0
 80061ac:	440b      	add	r3, r1
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	73fb      	strb	r3, [r7, #15]
 80061b2:	e019      	b.n	80061e8 <LCD_Showgraph+0xa4>
		else if (size == 16)
 80061b4:	78bb      	ldrb	r3, [r7, #2]
 80061b6:	2b10      	cmp	r3, #16
 80061b8:	d108      	bne.n	80061cc <LCD_Showgraph+0x88>
			temp = warning[num][t];
 80061ba:	78fa      	ldrb	r2, [r7, #3]
 80061bc:	7b7b      	ldrb	r3, [r7, #13]
 80061be:	4931      	ldr	r1, [pc, #196]	; (8006284 <LCD_Showgraph+0x140>)
 80061c0:	0112      	lsls	r2, r2, #4
 80061c2:	440a      	add	r2, r1
 80061c4:	4413      	add	r3, r2
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	73fb      	strb	r3, [r7, #15]
 80061ca:	e00d      	b.n	80061e8 <LCD_Showgraph+0xa4>
		else if (size == 24)
 80061cc:	78bb      	ldrb	r3, [r7, #2]
 80061ce:	2b18      	cmp	r3, #24
 80061d0:	d150      	bne.n	8006274 <LCD_Showgraph+0x130>
			temp = asc2_2412[num][t];	//调用2412字体
 80061d2:	78fa      	ldrb	r2, [r7, #3]
 80061d4:	7b79      	ldrb	r1, [r7, #13]
 80061d6:	482c      	ldr	r0, [pc, #176]	; (8006288 <LCD_Showgraph+0x144>)
 80061d8:	4613      	mov	r3, r2
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4403      	add	r3, r0
 80061e2:	440b      	add	r3, r1
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 80061e8:	2300      	movs	r3, #0
 80061ea:	73bb      	strb	r3, [r7, #14]
 80061ec:	e035      	b.n	800625a <LCD_Showgraph+0x116>
			if (temp & 0x80)
 80061ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	da07      	bge.n	8006206 <LCD_Showgraph+0xc2>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 80061f6:	4b25      	ldr	r3, [pc, #148]	; (800628c <LCD_Showgraph+0x148>)
 80061f8:	881a      	ldrh	r2, [r3, #0]
 80061fa:	88b9      	ldrh	r1, [r7, #4]
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fb fb7e 	bl	8001900 <LCD_Fast_DrawPoint>
 8006204:	e00a      	b.n	800621c <LCD_Showgraph+0xd8>
			else if (mode == 0)
 8006206:	f897 3020 	ldrb.w	r3, [r7, #32]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <LCD_Showgraph+0xd8>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 800620e:	4b20      	ldr	r3, [pc, #128]	; (8006290 <LCD_Showgraph+0x14c>)
 8006210:	881a      	ldrh	r2, [r3, #0]
 8006212:	88b9      	ldrh	r1, [r7, #4]
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	4618      	mov	r0, r3
 8006218:	f7fb fb72 	bl	8001900 <LCD_Fast_DrawPoint>
			temp <<= 1;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	73fb      	strb	r3, [r7, #15]
			y++;
 8006222:	88bb      	ldrh	r3, [r7, #4]
 8006224:	3301      	adds	r3, #1
 8006226:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8006228:	4b1a      	ldr	r3, [pc, #104]	; (8006294 <LCD_Showgraph+0x150>)
 800622a:	885b      	ldrh	r3, [r3, #2]
 800622c:	88ba      	ldrh	r2, [r7, #4]
 800622e:	429a      	cmp	r2, r3
 8006230:	d222      	bcs.n	8006278 <LCD_Showgraph+0x134>
				return;		//超区域了
			if ((y - y0) == size) {
 8006232:	88ba      	ldrh	r2, [r7, #4]
 8006234:	897b      	ldrh	r3, [r7, #10]
 8006236:	1ad2      	subs	r2, r2, r3
 8006238:	78bb      	ldrb	r3, [r7, #2]
 800623a:	429a      	cmp	r2, r3
 800623c:	d10a      	bne.n	8006254 <LCD_Showgraph+0x110>
				y = y0;
 800623e:	897b      	ldrh	r3, [r7, #10]
 8006240:	80bb      	strh	r3, [r7, #4]
				x++;
 8006242:	88fb      	ldrh	r3, [r7, #6]
 8006244:	3301      	adds	r3, #1
 8006246:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8006248:	4b12      	ldr	r3, [pc, #72]	; (8006294 <LCD_Showgraph+0x150>)
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	88fa      	ldrh	r2, [r7, #6]
 800624e:	429a      	cmp	r2, r3
 8006250:	d307      	bcc.n	8006262 <LCD_Showgraph+0x11e>
					return;	//超区域了
 8006252:	e012      	b.n	800627a <LCD_Showgraph+0x136>
		for (t1 = 0; t1 < 8; t1++) {
 8006254:	7bbb      	ldrb	r3, [r7, #14]
 8006256:	3301      	adds	r3, #1
 8006258:	73bb      	strb	r3, [r7, #14]
 800625a:	7bbb      	ldrb	r3, [r7, #14]
 800625c:	2b07      	cmp	r3, #7
 800625e:	d9c6      	bls.n	80061ee <LCD_Showgraph+0xaa>
 8006260:	e000      	b.n	8006264 <LCD_Showgraph+0x120>
				break;
 8006262:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8006264:	7b7b      	ldrb	r3, [r7, #13]
 8006266:	3301      	adds	r3, #1
 8006268:	737b      	strb	r3, [r7, #13]
 800626a:	7b7a      	ldrb	r2, [r7, #13]
 800626c:	7a7b      	ldrb	r3, [r7, #9]
 800626e:	429a      	cmp	r2, r3
 8006270:	d391      	bcc.n	8006196 <LCD_Showgraph+0x52>
 8006272:	e002      	b.n	800627a <LCD_Showgraph+0x136>
			return;								//没有的字库
 8006274:	bf00      	nop
 8006276:	e000      	b.n	800627a <LCD_Showgraph+0x136>
				return;		//超区域了
 8006278:	bf00      	nop
			}
		}
	}
}
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	bd90      	pop	{r4, r7, pc}
 8006280:	0800ccf0 	.word	0x0800ccf0
 8006284:	0800cc90 	.word	0x0800cc90
 8006288:	0800d754 	.word	0x0800d754
 800628c:	200001fc 	.word	0x200001fc
 8006290:	20000000 	.word	0x20000000
 8006294:	2000020c 	.word	0x2000020c

08006298 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	4604      	mov	r4, r0
 80062a0:	4608      	mov	r0, r1
 80062a2:	4611      	mov	r1, r2
 80062a4:	461a      	mov	r2, r3
 80062a6:	4623      	mov	r3, r4
 80062a8:	80fb      	strh	r3, [r7, #6]
 80062aa:	4603      	mov	r3, r0
 80062ac:	80bb      	strh	r3, [r7, #4]
 80062ae:	460b      	mov	r3, r1
 80062b0:	70fb      	strb	r3, [r7, #3]
 80062b2:	4613      	mov	r3, r2
 80062b4:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 80062b6:	88bb      	ldrh	r3, [r7, #4]
 80062b8:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 80062ba:	78bb      	ldrb	r3, [r7, #2]
 80062bc:	08db      	lsrs	r3, r3, #3
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	78bb      	ldrb	r3, [r7, #2]
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	bf14      	ite	ne
 80062ce:	2301      	movne	r3, #1
 80062d0:	2300      	moveq	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	4413      	add	r3, r2
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	78ba      	ldrb	r2, [r7, #2]
 80062da:	0852      	lsrs	r2, r2, #1
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	fb02 f303 	mul.w	r3, r2, r3
 80062e2:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	3b20      	subs	r3, #32
 80062e8:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 80062ea:	2300      	movs	r3, #0
 80062ec:	737b      	strb	r3, [r7, #13]
 80062ee:	e069      	b.n	80063c4 <LCD_ShowChar+0x12c>
		if (size == 12)
 80062f0:	78bb      	ldrb	r3, [r7, #2]
 80062f2:	2b0c      	cmp	r3, #12
 80062f4:	d10b      	bne.n	800630e <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 80062f6:	78fa      	ldrb	r2, [r7, #3]
 80062f8:	7b79      	ldrb	r1, [r7, #13]
 80062fa:	4838      	ldr	r0, [pc, #224]	; (80063dc <LCD_ShowChar+0x144>)
 80062fc:	4613      	mov	r3, r2
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4403      	add	r3, r0
 8006306:	440b      	add	r3, r1
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	73fb      	strb	r3, [r7, #15]
 800630c:	e019      	b.n	8006342 <LCD_ShowChar+0xaa>
		else if (size == 16)
 800630e:	78bb      	ldrb	r3, [r7, #2]
 8006310:	2b10      	cmp	r3, #16
 8006312:	d108      	bne.n	8006326 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	7b7b      	ldrb	r3, [r7, #13]
 8006318:	4931      	ldr	r1, [pc, #196]	; (80063e0 <LCD_ShowChar+0x148>)
 800631a:	0112      	lsls	r2, r2, #4
 800631c:	440a      	add	r2, r1
 800631e:	4413      	add	r3, r2
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	73fb      	strb	r3, [r7, #15]
 8006324:	e00d      	b.n	8006342 <LCD_ShowChar+0xaa>
		else if (size == 24)
 8006326:	78bb      	ldrb	r3, [r7, #2]
 8006328:	2b18      	cmp	r3, #24
 800632a:	d150      	bne.n	80063ce <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 800632c:	78fa      	ldrb	r2, [r7, #3]
 800632e:	7b79      	ldrb	r1, [r7, #13]
 8006330:	482c      	ldr	r0, [pc, #176]	; (80063e4 <LCD_ShowChar+0x14c>)
 8006332:	4613      	mov	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4403      	add	r3, r0
 800633c:	440b      	add	r3, r1
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8006342:	2300      	movs	r3, #0
 8006344:	73bb      	strb	r3, [r7, #14]
 8006346:	e035      	b.n	80063b4 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8006348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800634c:	2b00      	cmp	r3, #0
 800634e:	da07      	bge.n	8006360 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8006350:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <LCD_ShowChar+0x150>)
 8006352:	881a      	ldrh	r2, [r3, #0]
 8006354:	88b9      	ldrh	r1, [r7, #4]
 8006356:	88fb      	ldrh	r3, [r7, #6]
 8006358:	4618      	mov	r0, r3
 800635a:	f7fb fad1 	bl	8001900 <LCD_Fast_DrawPoint>
 800635e:	e00a      	b.n	8006376 <LCD_ShowChar+0xde>
			else if (mode == 0)
 8006360:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d106      	bne.n	8006376 <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8006368:	4b20      	ldr	r3, [pc, #128]	; (80063ec <LCD_ShowChar+0x154>)
 800636a:	881a      	ldrh	r2, [r3, #0]
 800636c:	88b9      	ldrh	r1, [r7, #4]
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	4618      	mov	r0, r3
 8006372:	f7fb fac5 	bl	8001900 <LCD_Fast_DrawPoint>
			temp <<= 1;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	73fb      	strb	r3, [r7, #15]
			y++;
 800637c:	88bb      	ldrh	r3, [r7, #4]
 800637e:	3301      	adds	r3, #1
 8006380:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8006382:	4b1b      	ldr	r3, [pc, #108]	; (80063f0 <LCD_ShowChar+0x158>)
 8006384:	885b      	ldrh	r3, [r3, #2]
 8006386:	88ba      	ldrh	r2, [r7, #4]
 8006388:	429a      	cmp	r2, r3
 800638a:	d222      	bcs.n	80063d2 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 800638c:	88ba      	ldrh	r2, [r7, #4]
 800638e:	897b      	ldrh	r3, [r7, #10]
 8006390:	1ad2      	subs	r2, r2, r3
 8006392:	78bb      	ldrb	r3, [r7, #2]
 8006394:	429a      	cmp	r2, r3
 8006396:	d10a      	bne.n	80063ae <LCD_ShowChar+0x116>
				y = y0;
 8006398:	897b      	ldrh	r3, [r7, #10]
 800639a:	80bb      	strh	r3, [r7, #4]
				x++;
 800639c:	88fb      	ldrh	r3, [r7, #6]
 800639e:	3301      	adds	r3, #1
 80063a0:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 80063a2:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <LCD_ShowChar+0x158>)
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	88fa      	ldrh	r2, [r7, #6]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d307      	bcc.n	80063bc <LCD_ShowChar+0x124>
					return;	//超区域了
 80063ac:	e012      	b.n	80063d4 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	3301      	adds	r3, #1
 80063b2:	73bb      	strb	r3, [r7, #14]
 80063b4:	7bbb      	ldrb	r3, [r7, #14]
 80063b6:	2b07      	cmp	r3, #7
 80063b8:	d9c6      	bls.n	8006348 <LCD_ShowChar+0xb0>
 80063ba:	e000      	b.n	80063be <LCD_ShowChar+0x126>
				break;
 80063bc:	bf00      	nop
	for (t = 0; t < csize; t++) {
 80063be:	7b7b      	ldrb	r3, [r7, #13]
 80063c0:	3301      	adds	r3, #1
 80063c2:	737b      	strb	r3, [r7, #13]
 80063c4:	7b7a      	ldrb	r2, [r7, #13]
 80063c6:	7a7b      	ldrb	r3, [r7, #9]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d391      	bcc.n	80062f0 <LCD_ShowChar+0x58>
 80063cc:	e002      	b.n	80063d4 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 80063ce:	bf00      	nop
 80063d0:	e000      	b.n	80063d4 <LCD_ShowChar+0x13c>
				return;		//超区域了
 80063d2:	bf00      	nop
			}
		}
	}
}
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd90      	pop	{r4, r7, pc}
 80063da:	bf00      	nop
 80063dc:	0800ccf0 	.word	0x0800ccf0
 80063e0:	0800d164 	.word	0x0800d164
 80063e4:	0800d754 	.word	0x0800d754
 80063e8:	200001fc 	.word	0x200001fc
 80063ec:	20000000 	.word	0x20000000
 80063f0:	2000020c 	.word	0x2000020c

080063f4 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 80063f4:	b590      	push	{r4, r7, lr}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	4604      	mov	r4, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	461a      	mov	r2, r3
 8006402:	4623      	mov	r3, r4
 8006404:	80fb      	strh	r3, [r7, #6]
 8006406:	4603      	mov	r3, r0
 8006408:	80bb      	strh	r3, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	807b      	strh	r3, [r7, #2]
 800640e:	4613      	mov	r3, r2
 8006410:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	73fb      	strb	r3, [r7, #15]
	width += x;
 8006416:	887a      	ldrh	r2, [r7, #2]
 8006418:	88fb      	ldrh	r3, [r7, #6]
 800641a:	4413      	add	r3, r2
 800641c:	807b      	strh	r3, [r7, #2]
	height += y;
 800641e:	883a      	ldrh	r2, [r7, #0]
 8006420:	88bb      	ldrh	r3, [r7, #4]
 8006422:	4413      	add	r3, r2
 8006424:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006426:	e024      	b.n	8006472 <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	887b      	ldrh	r3, [r7, #2]
 800642c:	429a      	cmp	r2, r3
 800642e:	d307      	bcc.n	8006440 <LCD_ShowString+0x4c>
			x = x0;
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	80fb      	strh	r3, [r7, #6]
			y += size;
 8006434:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006438:	b29a      	uxth	r2, r3
 800643a:	88bb      	ldrh	r3, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8006440:	88ba      	ldrh	r2, [r7, #4]
 8006442:	883b      	ldrh	r3, [r7, #0]
 8006444:	429a      	cmp	r2, r3
 8006446:	d21d      	bcs.n	8006484 <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	781a      	ldrb	r2, [r3, #0]
 800644c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006450:	88b9      	ldrh	r1, [r7, #4]
 8006452:	88f8      	ldrh	r0, [r7, #6]
 8006454:	2400      	movs	r4, #0
 8006456:	9400      	str	r4, [sp, #0]
 8006458:	f7ff ff1e 	bl	8006298 <LCD_ShowChar>
		x += size / 2;
 800645c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	b2db      	uxtb	r3, r3
 8006464:	b29a      	uxth	r2, r3
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	4413      	add	r3, r2
 800646a:	80fb      	strh	r3, [r7, #6]
		p++;
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	3301      	adds	r3, #1
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b7e      	cmp	r3, #126	; 0x7e
 8006478:	d805      	bhi.n	8006486 <LCD_ShowString+0x92>
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b1f      	cmp	r3, #31
 8006480:	d8d2      	bhi.n	8006428 <LCD_ShowString+0x34>
	}
}
 8006482:	e000      	b.n	8006486 <LCD_ShowString+0x92>
			break;	//退出
 8006484:	bf00      	nop
}
 8006486:	bf00      	nop
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	bd90      	pop	{r4, r7, pc}
	...

08006490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006494:	f000 fc4c 	bl	8006d30 <HAL_Init>

  /* USER CODE BEGIN Init */
  LCD_Init();
 8006498:	f7fb fe7a 	bl	8002190 <LCD_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800649c:	f000 f81e 	bl	80064dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80064a0:	f000 f952 	bl	8006748 <MX_GPIO_Init>
  MX_TIM3_Init();
 80064a4:	f000 f8d8 	bl	8006658 <MX_TIM3_Init>
  MX_ADC1_Init();
 80064a8:	f000 f876 	bl	8006598 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80064ac:	f000 f922 	bl	80066f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80064b0:	4807      	ldr	r0, [pc, #28]	; (80064d0 <main+0x40>)
 80064b2:	f002 fc2d 	bl	8008d10 <HAL_TIM_Base_Start_IT>
  LCD_Clear(CYAN);
 80064b6:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80064ba:	f7ff fd97 	bl	8005fec <LCD_Clear>
  BACK_COLOR = CYAN;
 80064be:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <main+0x44>)
 80064c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80064c4:	801a      	strh	r2, [r3, #0]
  POINT_COLOR = RED;
 80064c6:	4b04      	ldr	r3, [pc, #16]	; (80064d8 <main+0x48>)
 80064c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80064cc:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80064ce:	e7fe      	b.n	80064ce <main+0x3e>
 80064d0:	2000021c 	.word	0x2000021c
 80064d4:	20000000 	.word	0x20000000
 80064d8:	200001fc 	.word	0x200001fc

080064dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b096      	sub	sp, #88	; 0x58
 80064e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80064e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064e6:	2228      	movs	r2, #40	; 0x28
 80064e8:	2100      	movs	r1, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f003 fcf0 	bl	8009ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80064f0:	f107 031c 	add.w	r3, r7, #28
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	605a      	str	r2, [r3, #4]
 80064fa:	609a      	str	r2, [r3, #8]
 80064fc:	60da      	str	r2, [r3, #12]
 80064fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006500:	1d3b      	adds	r3, r7, #4
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	605a      	str	r2, [r3, #4]
 8006508:	609a      	str	r2, [r3, #8]
 800650a:	60da      	str	r2, [r3, #12]
 800650c:	611a      	str	r2, [r3, #16]
 800650e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006510:	2301      	movs	r3, #1
 8006512:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006518:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800651a:	2300      	movs	r3, #0
 800651c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800651e:	2301      	movs	r3, #1
 8006520:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006522:	2302      	movs	r3, #2
 8006524:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800652a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800652c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006530:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006536:	4618      	mov	r0, r3
 8006538:	f001 fde4 	bl	8008104 <HAL_RCC_OscConfig>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8006542:	f000 f9eb 	bl	800691c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006546:	230f      	movs	r3, #15
 8006548:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800654a:	2302      	movs	r3, #2
 800654c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800654e:	2300      	movs	r3, #0
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006556:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006558:	2300      	movs	r3, #0
 800655a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800655c:	f107 031c 	add.w	r3, r7, #28
 8006560:	2102      	movs	r1, #2
 8006562:	4618      	mov	r0, r3
 8006564:	f002 f84e 	bl	8008604 <HAL_RCC_ClockConfig>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800656e:	f000 f9d5 	bl	800691c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006572:	2302      	movs	r3, #2
 8006574:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8006576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800657c:	1d3b      	adds	r3, r7, #4
 800657e:	4618      	mov	r0, r3
 8006580:	f002 f9da 	bl	8008938 <HAL_RCCEx_PeriphCLKConfig>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800658a:	f000 f9c7 	bl	800691c <Error_Handler>
  }
}
 800658e:	bf00      	nop
 8006590:	3758      	adds	r7, #88	; 0x58
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08a      	sub	sp, #40	; 0x28
 800659c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800659e:	f107 0310 	add.w	r3, r7, #16
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	605a      	str	r2, [r3, #4]
 80065a8:	609a      	str	r2, [r3, #8]
 80065aa:	60da      	str	r2, [r3, #12]
 80065ac:	611a      	str	r2, [r3, #16]
 80065ae:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80065b0:	1d3b      	adds	r3, r7, #4
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	605a      	str	r2, [r3, #4]
 80065b8:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80065ba:	4b24      	ldr	r3, [pc, #144]	; (800664c <MX_ADC1_Init+0xb4>)
 80065bc:	4a24      	ldr	r2, [pc, #144]	; (8006650 <MX_ADC1_Init+0xb8>)
 80065be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80065c0:	4b22      	ldr	r3, [pc, #136]	; (800664c <MX_ADC1_Init+0xb4>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80065c6:	4b21      	ldr	r3, [pc, #132]	; (800664c <MX_ADC1_Init+0xb4>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80065cc:	4b1f      	ldr	r3, [pc, #124]	; (800664c <MX_ADC1_Init+0xb4>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80065d2:	4b1e      	ldr	r3, [pc, #120]	; (800664c <MX_ADC1_Init+0xb4>)
 80065d4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80065d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80065da:	4b1c      	ldr	r3, [pc, #112]	; (800664c <MX_ADC1_Init+0xb4>)
 80065dc:	2200      	movs	r2, #0
 80065de:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80065e0:	4b1a      	ldr	r3, [pc, #104]	; (800664c <MX_ADC1_Init+0xb4>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80065e6:	4819      	ldr	r0, [pc, #100]	; (800664c <MX_ADC1_Init+0xb4>)
 80065e8:	f000 fc28 	bl	8006e3c <HAL_ADC_Init>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 80065f2:	f000 f993 	bl	800691c <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80065f6:	4b17      	ldr	r3, [pc, #92]	; (8006654 <MX_ADC1_Init+0xbc>)
 80065f8:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 4095;
 80065fa:	f640 73ff 	movw	r3, #4095	; 0xfff
 80065fe:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 1791;
 8006600:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8006604:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006606:	2310      	movs	r3, #16
 8006608:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = ENABLE;
 800660a:	2301      	movs	r3, #1
 800660c:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800660e:	f107 0310 	add.w	r3, r7, #16
 8006612:	4619      	mov	r1, r3
 8006614:	480d      	ldr	r0, [pc, #52]	; (800664c <MX_ADC1_Init+0xb4>)
 8006616:	f001 f87f 	bl	8007718 <HAL_ADC_AnalogWDGConfig>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8006620:	f000 f97c 	bl	800691c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006624:	2310      	movs	r3, #16
 8006626:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006628:	2301      	movs	r3, #1
 800662a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006630:	1d3b      	adds	r3, r7, #4
 8006632:	4619      	mov	r1, r3
 8006634:	4805      	ldr	r0, [pc, #20]	; (800664c <MX_ADC1_Init+0xb4>)
 8006636:	f000 ff77 	bl	8007528 <HAL_ADC_ConfigChannel>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8006640:	f000 f96c 	bl	800691c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006644:	bf00      	nop
 8006646:	3728      	adds	r7, #40	; 0x28
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20000264 	.word	0x20000264
 8006650:	40012400 	.word	0x40012400
 8006654:	00800200 	.word	0x00800200

08006658 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800665e:	f107 0308 	add.w	r3, r7, #8
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	605a      	str	r2, [r3, #4]
 8006668:	609a      	str	r2, [r3, #8]
 800666a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800666c:	463b      	mov	r3, r7
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006674:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <MX_TIM3_Init+0x94>)
 8006676:	4a1e      	ldr	r2, [pc, #120]	; (80066f0 <MX_TIM3_Init+0x98>)
 8006678:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800667a:	4b1c      	ldr	r3, [pc, #112]	; (80066ec <MX_TIM3_Init+0x94>)
 800667c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8006680:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006682:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <MX_TIM3_Init+0x94>)
 8006684:	2200      	movs	r2, #0
 8006686:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8006688:	4b18      	ldr	r3, [pc, #96]	; (80066ec <MX_TIM3_Init+0x94>)
 800668a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800668e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006690:	4b16      	ldr	r3, [pc, #88]	; (80066ec <MX_TIM3_Init+0x94>)
 8006692:	2200      	movs	r2, #0
 8006694:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006696:	4b15      	ldr	r3, [pc, #84]	; (80066ec <MX_TIM3_Init+0x94>)
 8006698:	2200      	movs	r2, #0
 800669a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800669c:	4813      	ldr	r0, [pc, #76]	; (80066ec <MX_TIM3_Init+0x94>)
 800669e:	f002 fae7 	bl	8008c70 <HAL_TIM_Base_Init>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80066a8:	f000 f938 	bl	800691c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80066b2:	f107 0308 	add.w	r3, r7, #8
 80066b6:	4619      	mov	r1, r3
 80066b8:	480c      	ldr	r0, [pc, #48]	; (80066ec <MX_TIM3_Init+0x94>)
 80066ba:	f002 fc91 	bl	8008fe0 <HAL_TIM_ConfigClockSource>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80066c4:	f000 f92a 	bl	800691c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066c8:	2300      	movs	r3, #0
 80066ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066cc:	2300      	movs	r3, #0
 80066ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80066d0:	463b      	mov	r3, r7
 80066d2:	4619      	mov	r1, r3
 80066d4:	4805      	ldr	r0, [pc, #20]	; (80066ec <MX_TIM3_Init+0x94>)
 80066d6:	f002 fe7b 	bl	80093d0 <HAL_TIMEx_MasterConfigSynchronization>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80066e0:	f000 f91c 	bl	800691c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80066e4:	bf00      	nop
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	2000021c 	.word	0x2000021c
 80066f0:	40000400 	.word	0x40000400

080066f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80066f8:	4b11      	ldr	r3, [pc, #68]	; (8006740 <MX_USART1_UART_Init+0x4c>)
 80066fa:	4a12      	ldr	r2, [pc, #72]	; (8006744 <MX_USART1_UART_Init+0x50>)
 80066fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80066fe:	4b10      	ldr	r3, [pc, #64]	; (8006740 <MX_USART1_UART_Init+0x4c>)
 8006700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006706:	4b0e      	ldr	r3, [pc, #56]	; (8006740 <MX_USART1_UART_Init+0x4c>)
 8006708:	2200      	movs	r2, #0
 800670a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800670c:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <MX_USART1_UART_Init+0x4c>)
 800670e:	2200      	movs	r2, #0
 8006710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006712:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <MX_USART1_UART_Init+0x4c>)
 8006714:	2200      	movs	r2, #0
 8006716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006718:	4b09      	ldr	r3, [pc, #36]	; (8006740 <MX_USART1_UART_Init+0x4c>)
 800671a:	220c      	movs	r2, #12
 800671c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800671e:	4b08      	ldr	r3, [pc, #32]	; (8006740 <MX_USART1_UART_Init+0x4c>)
 8006720:	2200      	movs	r2, #0
 8006722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <MX_USART1_UART_Init+0x4c>)
 8006726:	2200      	movs	r2, #0
 8006728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800672a:	4805      	ldr	r0, [pc, #20]	; (8006740 <MX_USART1_UART_Init+0x4c>)
 800672c:	f002 fece 	bl	80094cc <HAL_UART_Init>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006736:	f000 f8f1 	bl	800691c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800673a:	bf00      	nop
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000294 	.word	0x20000294
 8006744:	40013800 	.word	0x40013800

08006748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800674e:	f107 0308 	add.w	r3, r7, #8
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	605a      	str	r2, [r3, #4]
 8006758:	609a      	str	r2, [r3, #8]
 800675a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800675c:	4b18      	ldr	r3, [pc, #96]	; (80067c0 <MX_GPIO_Init+0x78>)
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	4a17      	ldr	r2, [pc, #92]	; (80067c0 <MX_GPIO_Init+0x78>)
 8006762:	f043 0320 	orr.w	r3, r3, #32
 8006766:	6193      	str	r3, [r2, #24]
 8006768:	4b15      	ldr	r3, [pc, #84]	; (80067c0 <MX_GPIO_Init+0x78>)
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	607b      	str	r3, [r7, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006774:	4b12      	ldr	r3, [pc, #72]	; (80067c0 <MX_GPIO_Init+0x78>)
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	4a11      	ldr	r2, [pc, #68]	; (80067c0 <MX_GPIO_Init+0x78>)
 800677a:	f043 0304 	orr.w	r3, r3, #4
 800677e:	6193      	str	r3, [r2, #24]
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <MX_GPIO_Init+0x78>)
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	603b      	str	r3, [r7, #0]
 800678a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800678c:	2200      	movs	r2, #0
 800678e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006792:	480c      	ldr	r0, [pc, #48]	; (80067c4 <MX_GPIO_Init+0x7c>)
 8006794:	f001 fc9e 	bl	80080d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8006798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800679c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800679e:	2301      	movs	r3, #1
 80067a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067a6:	2302      	movs	r3, #2
 80067a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80067aa:	f107 0308 	add.w	r3, r7, #8
 80067ae:	4619      	mov	r1, r3
 80067b0:	4804      	ldr	r0, [pc, #16]	; (80067c4 <MX_GPIO_Init+0x7c>)
 80067b2:	f001 fafb 	bl	8007dac <HAL_GPIO_Init>

}
 80067b6:	bf00      	nop
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	40021000 	.word	0x40021000
 80067c4:	40010800 	.word	0x40010800

080067c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b0e0      	sub	sp, #384	; 0x180
 80067cc:	af02      	add	r7, sp, #8
 80067ce:	1d3b      	adds	r3, r7, #4
 80067d0:	6018      	str	r0, [r3, #0]
	uint16_t raw;
	char msg[350];
	double tem;
	HAL_ADC_Start(&hadc1);
 80067d2:	4839      	ldr	r0, [pc, #228]	; (80068b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80067d4:	f000 fc1c 	bl	8007010 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80067d8:	f04f 31ff 	mov.w	r1, #4294967295
 80067dc:	4836      	ldr	r0, [pc, #216]	; (80068b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80067de:	f000 fcc5 	bl	800716c <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 80067e2:	4835      	ldr	r0, [pc, #212]	; (80068b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80067e4:	f000 fdc8 	bl	8007378 <HAL_ADC_GetValue>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
	tem = (((1.43 - (double)raw * (3.3 / 4096)) / 0.0043) + 25);
 80067ee:	f8b7 3176 	ldrh.w	r3, [r7, #374]	; 0x176
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7f9 fe62 	bl	80004bc <__aeabi_ui2d>
 80067f8:	a329      	add	r3, pc, #164	; (adr r3, 80068a0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f7f9 fed7 	bl	80005b0 <__aeabi_dmul>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	a128      	add	r1, pc, #160	; (adr r1, 80068a8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8006808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800680c:	f7f9 fd18 	bl	8000240 <__aeabi_dsub>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4610      	mov	r0, r2
 8006816:	4619      	mov	r1, r3
 8006818:	a325      	add	r3, pc, #148	; (adr r3, 80068b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	f7f9 fff1 	bl	8000804 <__aeabi_ddiv>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4610      	mov	r0, r2
 8006828:	4619      	mov	r1, r3
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	4b23      	ldr	r3, [pc, #140]	; (80068bc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006830:	f7f9 fd08 	bl	8000244 <__adddf3>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
	sprintf(msg, "Temperature = %f\r\n", tem);
 800683c:	f107 0008 	add.w	r0, r7, #8
 8006840:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8006844:	491e      	ldr	r1, [pc, #120]	; (80068c0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8006846:	f003 ffab 	bl	800a7a0 <siprintf>
	LCD_Clear(CYAN);
 800684a:	f647 70ff 	movw	r0, #32767	; 0x7fff
 800684e:	f7ff fbcd 	bl	8005fec <LCD_Clear>
	BACK_COLOR = CYAN;
 8006852:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8006854:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006858:	801a      	strh	r2, [r3, #0]
	POINT_COLOR = RED;
 800685a:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800685c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006860:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8006862:	f107 0308 	add.w	r3, r7, #8
 8006866:	4618      	mov	r0, r3
 8006868:	f7f9 fcde 	bl	8000228 <strlen>
 800686c:	4603      	mov	r3, r0
 800686e:	b29a      	uxth	r2, r3
 8006870:	f107 0108 	add.w	r1, r7, #8
 8006874:	f04f 33ff 	mov.w	r3, #4294967295
 8006878:	4814      	ldr	r0, [pc, #80]	; (80068cc <HAL_TIM_PeriodElapsedCallback+0x104>)
 800687a:	f002 fe74 	bl	8009566 <HAL_UART_Transmit>
	LCD_ShowString(30, 40, 200, 24, 12, (uint8_t*) msg);
 800687e:	f107 0308 	add.w	r3, r7, #8
 8006882:	9301      	str	r3, [sp, #4]
 8006884:	230c      	movs	r3, #12
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	2318      	movs	r3, #24
 800688a:	22c8      	movs	r2, #200	; 0xc8
 800688c:	2128      	movs	r1, #40	; 0x28
 800688e:	201e      	movs	r0, #30
 8006890:	f7ff fdb0 	bl	80063f4 <LCD_ShowString>
}
 8006894:	bf00      	nop
 8006896:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	66666666 	.word	0x66666666
 80068a4:	3f4a6666 	.word	0x3f4a6666
 80068a8:	ae147ae1 	.word	0xae147ae1
 80068ac:	3ff6e147 	.word	0x3ff6e147
 80068b0:	75f6fd22 	.word	0x75f6fd22
 80068b4:	3f719ce0 	.word	0x3f719ce0
 80068b8:	20000264 	.word	0x20000264
 80068bc:	40390000 	.word	0x40390000
 80068c0:	0800cc30 	.word	0x0800cc30
 80068c4:	20000000 	.word	0x20000000
 80068c8:	200001fc 	.word	0x200001fc
 80068cc:	20000294 	.word	0x20000294

080068d0 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b0dc      	sub	sp, #368	; 0x170
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	1d3b      	adds	r3, r7, #4
 80068d8:	6018      	str	r0, [r3, #0]
	char msg[350];
	sprintf(msg, "ALARM!!! Temperature is above 22 degree.");
 80068da:	f107 0308 	add.w	r3, r7, #8
 80068de:	490e      	ldr	r1, [pc, #56]	; (8006918 <HAL_ADC_LevelOutOfWindowCallback+0x48>)
 80068e0:	4618      	mov	r0, r3
 80068e2:	f003 ff5d 	bl	800a7a0 <siprintf>
	LCD_ShowString(30, 70, 200, 24, 12, (uint8_t*) msg);
 80068e6:	f107 0308 	add.w	r3, r7, #8
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	230c      	movs	r3, #12
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	2318      	movs	r3, #24
 80068f2:	22c8      	movs	r2, #200	; 0xc8
 80068f4:	2146      	movs	r1, #70	; 0x46
 80068f6:	201e      	movs	r0, #30
 80068f8:	f7ff fd7c 	bl	80063f4 <LCD_ShowString>
	LCD_ShowWarning(100, 120, 200, 200, 16);
 80068fc:	2310      	movs	r3, #16
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	23c8      	movs	r3, #200	; 0xc8
 8006902:	22c8      	movs	r2, #200	; 0xc8
 8006904:	2178      	movs	r1, #120	; 0x78
 8006906:	2064      	movs	r0, #100	; 0x64
 8006908:	f7ff fbd2 	bl	80060b0 <LCD_ShowWarning>
}
 800690c:	bf00      	nop
 800690e:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	0800cc44 	.word	0x0800cc44

0800691c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006920:	b672      	cpsid	i
}
 8006922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006924:	e7fe      	b.n	8006924 <Error_Handler+0x8>
	...

08006928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800692e:	4b15      	ldr	r3, [pc, #84]	; (8006984 <HAL_MspInit+0x5c>)
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	4a14      	ldr	r2, [pc, #80]	; (8006984 <HAL_MspInit+0x5c>)
 8006934:	f043 0301 	orr.w	r3, r3, #1
 8006938:	6193      	str	r3, [r2, #24]
 800693a:	4b12      	ldr	r3, [pc, #72]	; (8006984 <HAL_MspInit+0x5c>)
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	60bb      	str	r3, [r7, #8]
 8006944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006946:	4b0f      	ldr	r3, [pc, #60]	; (8006984 <HAL_MspInit+0x5c>)
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	4a0e      	ldr	r2, [pc, #56]	; (8006984 <HAL_MspInit+0x5c>)
 800694c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006950:	61d3      	str	r3, [r2, #28]
 8006952:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <HAL_MspInit+0x5c>)
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695a:	607b      	str	r3, [r7, #4]
 800695c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800695e:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <HAL_MspInit+0x60>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	4a04      	ldr	r2, [pc, #16]	; (8006988 <HAL_MspInit+0x60>)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr
 8006984:	40021000 	.word	0x40021000
 8006988:	40010000 	.word	0x40010000

0800698c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a0d      	ldr	r2, [pc, #52]	; (80069d0 <HAL_ADC_MspInit+0x44>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d113      	bne.n	80069c6 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800699e:	4b0d      	ldr	r3, [pc, #52]	; (80069d4 <HAL_ADC_MspInit+0x48>)
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	4a0c      	ldr	r2, [pc, #48]	; (80069d4 <HAL_ADC_MspInit+0x48>)
 80069a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069a8:	6193      	str	r3, [r2, #24]
 80069aa:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <HAL_ADC_MspInit+0x48>)
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80069b6:	2200      	movs	r2, #0
 80069b8:	2101      	movs	r1, #1
 80069ba:	2012      	movs	r0, #18
 80069bc:	f001 f87d 	bl	8007aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80069c0:	2012      	movs	r0, #18
 80069c2:	f001 f896 	bl	8007af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80069c6:	bf00      	nop
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	40012400 	.word	0x40012400
 80069d4:	40021000 	.word	0x40021000

080069d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a0d      	ldr	r2, [pc, #52]	; (8006a1c <HAL_TIM_Base_MspInit+0x44>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d113      	bne.n	8006a12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80069ea:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <HAL_TIM_Base_MspInit+0x48>)
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	4a0c      	ldr	r2, [pc, #48]	; (8006a20 <HAL_TIM_Base_MspInit+0x48>)
 80069f0:	f043 0302 	orr.w	r3, r3, #2
 80069f4:	61d3      	str	r3, [r2, #28]
 80069f6:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <HAL_TIM_Base_MspInit+0x48>)
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8006a02:	2200      	movs	r2, #0
 8006a04:	2101      	movs	r1, #1
 8006a06:	201d      	movs	r0, #29
 8006a08:	f001 f857 	bl	8007aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006a0c:	201d      	movs	r0, #29
 8006a0e:	f001 f870 	bl	8007af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006a12:	bf00      	nop
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40000400 	.word	0x40000400
 8006a20:	40021000 	.word	0x40021000

08006a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a2c:	f107 0310 	add.w	r3, r7, #16
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	605a      	str	r2, [r3, #4]
 8006a36:	609a      	str	r2, [r3, #8]
 8006a38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a20      	ldr	r2, [pc, #128]	; (8006ac0 <HAL_UART_MspInit+0x9c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d139      	bne.n	8006ab8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a44:	4b1f      	ldr	r3, [pc, #124]	; (8006ac4 <HAL_UART_MspInit+0xa0>)
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	4a1e      	ldr	r2, [pc, #120]	; (8006ac4 <HAL_UART_MspInit+0xa0>)
 8006a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a4e:	6193      	str	r3, [r2, #24]
 8006a50:	4b1c      	ldr	r3, [pc, #112]	; (8006ac4 <HAL_UART_MspInit+0xa0>)
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a5c:	4b19      	ldr	r3, [pc, #100]	; (8006ac4 <HAL_UART_MspInit+0xa0>)
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	4a18      	ldr	r2, [pc, #96]	; (8006ac4 <HAL_UART_MspInit+0xa0>)
 8006a62:	f043 0304 	orr.w	r3, r3, #4
 8006a66:	6193      	str	r3, [r2, #24]
 8006a68:	4b16      	ldr	r3, [pc, #88]	; (8006ac4 <HAL_UART_MspInit+0xa0>)
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a82:	f107 0310 	add.w	r3, r7, #16
 8006a86:	4619      	mov	r1, r3
 8006a88:	480f      	ldr	r0, [pc, #60]	; (8006ac8 <HAL_UART_MspInit+0xa4>)
 8006a8a:	f001 f98f 	bl	8007dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a9c:	f107 0310 	add.w	r3, r7, #16
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4809      	ldr	r0, [pc, #36]	; (8006ac8 <HAL_UART_MspInit+0xa4>)
 8006aa4:	f001 f982 	bl	8007dac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2101      	movs	r1, #1
 8006aac:	2025      	movs	r0, #37	; 0x25
 8006aae:	f001 f804 	bl	8007aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006ab2:	2025      	movs	r0, #37	; 0x25
 8006ab4:	f001 f81d 	bl	8007af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006ab8:	bf00      	nop
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	40013800 	.word	0x40013800
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	40010800 	.word	0x40010800

08006acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006ad0:	e7fe      	b.n	8006ad0 <NMI_Handler+0x4>

08006ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ad6:	e7fe      	b.n	8006ad6 <HardFault_Handler+0x4>

08006ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006adc:	e7fe      	b.n	8006adc <MemManage_Handler+0x4>

08006ade <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ae2:	e7fe      	b.n	8006ae2 <BusFault_Handler+0x4>

08006ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ae8:	e7fe      	b.n	8006ae8 <UsageFault_Handler+0x4>

08006aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006aea:	b480      	push	{r7}
 8006aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006aee:	bf00      	nop
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr

08006af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006af6:	b480      	push	{r7}
 8006af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006afa:	bf00      	nop
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr

08006b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b02:	b480      	push	{r7}
 8006b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b06:	bf00      	nop
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	4770      	bx	lr

08006b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b12:	f000 f953 	bl	8006dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b16:	bf00      	nop
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006b20:	4802      	ldr	r0, [pc, #8]	; (8006b2c <ADC1_2_IRQHandler+0x10>)
 8006b22:	f000 fc35 	bl	8007390 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006b26:	bf00      	nop
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000264 	.word	0x20000264

08006b30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006b34:	4802      	ldr	r0, [pc, #8]	; (8006b40 <TIM3_IRQHandler+0x10>)
 8006b36:	f002 f94b 	bl	8008dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006b3a:	bf00      	nop
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	2000021c 	.word	0x2000021c

08006b44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006b48:	4802      	ldr	r0, [pc, #8]	; (8006b54 <USART1_IRQHandler+0x10>)
 8006b4a:	f002 fd9f 	bl	800968c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006b4e:	bf00      	nop
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20000294 	.word	0x20000294

08006b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	af00      	add	r7, sp, #0
	return 1;
 8006b5c:	2301      	movs	r3, #1
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr

08006b66 <_kill>:

int _kill(int pid, int sig)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006b70:	f003 f984 	bl	8009e7c <__errno>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2216      	movs	r2, #22
 8006b78:	601a      	str	r2, [r3, #0]
	return -1;
 8006b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <_exit>:

void _exit (int status)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006b8e:	f04f 31ff 	mov.w	r1, #4294967295
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff ffe7 	bl	8006b66 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006b98:	e7fe      	b.n	8006b98 <_exit+0x12>

08006b9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	e00a      	b.n	8006bc2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006bac:	f3af 8000 	nop.w
 8006bb0:	4601      	mov	r1, r0
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	60ba      	str	r2, [r7, #8]
 8006bb8:	b2ca      	uxtb	r2, r1
 8006bba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	dbf0      	blt.n	8006bac <_read+0x12>
	}

return len;
 8006bca:	687b      	ldr	r3, [r7, #4]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	e009      	b.n	8006bfa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	60ba      	str	r2, [r7, #8]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	dbf1      	blt.n	8006be6 <_write+0x12>
	}
	return len;
 8006c02:	687b      	ldr	r3, [r7, #4]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <_close>:

int _close(int file)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	return -1;
 8006c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr

08006c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c32:	605a      	str	r2, [r3, #4]
	return 0;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr

08006c40 <_isatty>:

int _isatty(int file)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	return 1;
 8006c48:	2301      	movs	r3, #1
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr

08006c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
	return 0;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr

08006c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c74:	4a14      	ldr	r2, [pc, #80]	; (8006cc8 <_sbrk+0x5c>)
 8006c76:	4b15      	ldr	r3, [pc, #84]	; (8006ccc <_sbrk+0x60>)
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c80:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <_sbrk+0x64>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c88:	4b11      	ldr	r3, [pc, #68]	; (8006cd0 <_sbrk+0x64>)
 8006c8a:	4a12      	ldr	r2, [pc, #72]	; (8006cd4 <_sbrk+0x68>)
 8006c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c8e:	4b10      	ldr	r3, [pc, #64]	; (8006cd0 <_sbrk+0x64>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4413      	add	r3, r2
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d207      	bcs.n	8006cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c9c:	f003 f8ee 	bl	8009e7c <__errno>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	220c      	movs	r2, #12
 8006ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8006caa:	e009      	b.n	8006cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006cac:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <_sbrk+0x64>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006cb2:	4b07      	ldr	r3, [pc, #28]	; (8006cd0 <_sbrk+0x64>)
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4413      	add	r3, r2
 8006cba:	4a05      	ldr	r2, [pc, #20]	; (8006cd0 <_sbrk+0x64>)
 8006cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	2000c000 	.word	0x2000c000
 8006ccc:	00000400 	.word	0x00000400
 8006cd0:	20000200 	.word	0x20000200
 8006cd4:	200002f0 	.word	0x200002f0

08006cd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006cdc:	bf00      	nop
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bc80      	pop	{r7}
 8006ce2:	4770      	bx	lr

08006ce4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ce4:	480c      	ldr	r0, [pc, #48]	; (8006d18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006ce6:	490d      	ldr	r1, [pc, #52]	; (8006d1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006ce8:	4a0d      	ldr	r2, [pc, #52]	; (8006d20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006cec:	e002      	b.n	8006cf4 <LoopCopyDataInit>

08006cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006cf2:	3304      	adds	r3, #4

08006cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006cf8:	d3f9      	bcc.n	8006cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cfa:	4a0a      	ldr	r2, [pc, #40]	; (8006d24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006cfc:	4c0a      	ldr	r4, [pc, #40]	; (8006d28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d00:	e001      	b.n	8006d06 <LoopFillZerobss>

08006d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d04:	3204      	adds	r2, #4

08006d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d08:	d3fb      	bcc.n	8006d02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006d0a:	f7ff ffe5 	bl	8006cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d0e:	f003 f8bb 	bl	8009e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006d12:	f7ff fbbd 	bl	8006490 <main>
  bx lr
 8006d16:	4770      	bx	lr
  ldr r0, =_sdata
 8006d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d1c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8006d20:	0800e8b4 	.word	0x0800e8b4
  ldr r2, =_sbss
 8006d24:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8006d28:	200002ec 	.word	0x200002ec

08006d2c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006d2c:	e7fe      	b.n	8006d2c <ADC3_IRQHandler>
	...

08006d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d34:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <HAL_Init+0x28>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a07      	ldr	r2, [pc, #28]	; (8006d58 <HAL_Init+0x28>)
 8006d3a:	f043 0310 	orr.w	r3, r3, #16
 8006d3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d40:	2003      	movs	r0, #3
 8006d42:	f000 feaf 	bl	8007aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d46:	2000      	movs	r0, #0
 8006d48:	f000 f808 	bl	8006d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d4c:	f7ff fdec 	bl	8006928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40022000 	.word	0x40022000

08006d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d64:	4b12      	ldr	r3, [pc, #72]	; (8006db0 <HAL_InitTick+0x54>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4b12      	ldr	r3, [pc, #72]	; (8006db4 <HAL_InitTick+0x58>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fec7 	bl	8007b0e <HAL_SYSTICK_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e00e      	b.n	8006da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b0f      	cmp	r3, #15
 8006d8e:	d80a      	bhi.n	8006da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d90:	2200      	movs	r2, #0
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295
 8006d98:	f000 fe8f 	bl	8007aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d9c:	4a06      	ldr	r2, [pc, #24]	; (8006db8 <HAL_InitTick+0x5c>)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	e000      	b.n	8006da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20000004 	.word	0x20000004
 8006db4:	2000000c 	.word	0x2000000c
 8006db8:	20000008 	.word	0x20000008

08006dbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006dc0:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <HAL_IncTick+0x1c>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <HAL_IncTick+0x20>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4413      	add	r3, r2
 8006dcc:	4a03      	ldr	r2, [pc, #12]	; (8006ddc <HAL_IncTick+0x20>)
 8006dce:	6013      	str	r3, [r2, #0]
}
 8006dd0:	bf00      	nop
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bc80      	pop	{r7}
 8006dd6:	4770      	bx	lr
 8006dd8:	2000000c 	.word	0x2000000c
 8006ddc:	200002d8 	.word	0x200002d8

08006de0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  return uwTick;
 8006de4:	4b02      	ldr	r3, [pc, #8]	; (8006df0 <HAL_GetTick+0x10>)
 8006de6:	681b      	ldr	r3, [r3, #0]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr
 8006df0:	200002d8 	.word	0x200002d8

08006df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006dfc:	f7ff fff0 	bl	8006de0 <HAL_GetTick>
 8006e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0c:	d005      	beq.n	8006e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e0e:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <HAL_Delay+0x44>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006e1a:	bf00      	nop
 8006e1c:	f7ff ffe0 	bl	8006de0 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d8f7      	bhi.n	8006e1c <HAL_Delay+0x28>
  {
  }
}
 8006e2c:	bf00      	nop
 8006e2e:	bf00      	nop
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	2000000c 	.word	0x2000000c

08006e3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e0ce      	b.n	8006ffc <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d109      	bne.n	8006e80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff fd86 	bl	800698c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fcf9 	bl	8007878 <ADC_ConversionStop_Disable>
 8006e86:	4603      	mov	r3, r0
 8006e88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	f003 0310 	and.w	r3, r3, #16
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f040 80a9 	bne.w	8006fea <HAL_ADC_Init+0x1ae>
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f040 80a5 	bne.w	8006fea <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ea8:	f023 0302 	bic.w	r3, r3, #2
 8006eac:	f043 0202 	orr.w	r2, r3, #2
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4951      	ldr	r1, [pc, #324]	; (8007004 <HAL_ADC_Init+0x1c8>)
 8006ebe:	428b      	cmp	r3, r1
 8006ec0:	d10a      	bne.n	8006ed8 <HAL_ADC_Init+0x9c>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006eca:	d002      	beq.n	8006ed2 <HAL_ADC_Init+0x96>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	e004      	b.n	8006edc <HAL_ADC_Init+0xa0>
 8006ed2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ed6:	e001      	b.n	8006edc <HAL_ADC_Init+0xa0>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006edc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	7b1b      	ldrb	r3, [r3, #12]
 8006ee2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006ee4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef4:	d003      	beq.n	8006efe <HAL_ADC_Init+0xc2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d102      	bne.n	8006f04 <HAL_ADC_Init+0xc8>
 8006efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f02:	e000      	b.n	8006f06 <HAL_ADC_Init+0xca>
 8006f04:	2300      	movs	r3, #0
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	7d1b      	ldrb	r3, [r3, #20]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d119      	bne.n	8006f48 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	7b1b      	ldrb	r3, [r3, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d109      	bne.n	8006f30 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	3b01      	subs	r3, #1
 8006f22:	035a      	lsls	r2, r3, #13
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f2c:	613b      	str	r3, [r7, #16]
 8006f2e:	e00b      	b.n	8006f48 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	f043 0220 	orr.w	r2, r3, #32
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	f043 0201 	orr.w	r2, r3, #1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	4b29      	ldr	r3, [pc, #164]	; (8007008 <HAL_ADC_Init+0x1cc>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6812      	ldr	r2, [r2, #0]
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f78:	d003      	beq.n	8006f82 <HAL_ADC_Init+0x146>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d104      	bne.n	8006f8c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	051b      	lsls	r3, r3, #20
 8006f8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	4b19      	ldr	r3, [pc, #100]	; (800700c <HAL_ADC_Init+0x1d0>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d10b      	bne.n	8006fc8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	f023 0303 	bic.w	r3, r3, #3
 8006fbe:	f043 0201 	orr.w	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006fc6:	e018      	b.n	8006ffa <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fcc:	f023 0312 	bic.w	r3, r3, #18
 8006fd0:	f043 0210 	orr.w	r2, r3, #16
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	f043 0201 	orr.w	r2, r3, #1
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006fe8:	e007      	b.n	8006ffa <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fee:	f043 0210 	orr.w	r2, r3, #16
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	40013c00 	.word	0x40013c00
 8007008:	ffe1f7fd 	.word	0xffe1f7fd
 800700c:	ff1f0efe 	.word	0xff1f0efe

08007010 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007022:	2b01      	cmp	r3, #1
 8007024:	d101      	bne.n	800702a <HAL_ADC_Start+0x1a>
 8007026:	2302      	movs	r3, #2
 8007028:	e098      	b.n	800715c <HAL_ADC_Start+0x14c>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fbc6 	bl	80077c4 <ADC_Enable>
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f040 8087 	bne.w	8007152 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800704c:	f023 0301 	bic.w	r3, r3, #1
 8007050:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a41      	ldr	r2, [pc, #260]	; (8007164 <HAL_ADC_Start+0x154>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d105      	bne.n	800706e <HAL_ADC_Start+0x5e>
 8007062:	4b41      	ldr	r3, [pc, #260]	; (8007168 <HAL_ADC_Start+0x158>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d115      	bne.n	800709a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007072:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007084:	2b00      	cmp	r3, #0
 8007086:	d026      	beq.n	80070d6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007090:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007098:	e01d      	b.n	80070d6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2f      	ldr	r2, [pc, #188]	; (8007168 <HAL_ADC_Start+0x158>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d004      	beq.n	80070ba <HAL_ADC_Start+0xaa>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a2b      	ldr	r2, [pc, #172]	; (8007164 <HAL_ADC_Start+0x154>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d10d      	bne.n	80070d6 <HAL_ADC_Start+0xc6>
 80070ba:	4b2b      	ldr	r3, [pc, #172]	; (8007168 <HAL_ADC_Start+0x158>)
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d007      	beq.n	80070d6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80070ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d006      	beq.n	80070f0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	f023 0206 	bic.w	r2, r3, #6
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80070ee:	e002      	b.n	80070f6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f06f 0202 	mvn.w	r2, #2
 8007106:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007112:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007116:	d113      	bne.n	8007140 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800711c:	4a11      	ldr	r2, [pc, #68]	; (8007164 <HAL_ADC_Start+0x154>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d105      	bne.n	800712e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007122:	4b11      	ldr	r3, [pc, #68]	; (8007168 <HAL_ADC_Start+0x158>)
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800712a:	2b00      	cmp	r3, #0
 800712c:	d108      	bne.n	8007140 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800713c:	609a      	str	r2, [r3, #8]
 800713e:	e00c      	b.n	800715a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800714e:	609a      	str	r2, [r3, #8]
 8007150:	e003      	b.n	800715a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800715a:	7bfb      	ldrb	r3, [r7, #15]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40012800 	.word	0x40012800
 8007168:	40012400 	.word	0x40012400

0800716c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800716c:	b590      	push	{r4, r7, lr}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8007182:	f7ff fe2d 	bl	8006de0 <HAL_GetTick>
 8007186:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00b      	beq.n	80071ae <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	f043 0220 	orr.w	r2, r3, #32
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e0d3      	b.n	8007356 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d131      	bne.n	8007220 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d12a      	bne.n	8007220 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80071ca:	e021      	b.n	8007210 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d2:	d01d      	beq.n	8007210 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d007      	beq.n	80071ea <HAL_ADC_PollForConversion+0x7e>
 80071da:	f7ff fe01 	bl	8006de0 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d212      	bcs.n	8007210 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10b      	bne.n	8007210 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	f043 0204 	orr.w	r2, r3, #4
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e0a2      	b.n	8007356 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0d6      	beq.n	80071cc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800721e:	e070      	b.n	8007302 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8007220:	4b4f      	ldr	r3, [pc, #316]	; (8007360 <HAL_ADC_PollForConversion+0x1f4>)
 8007222:	681c      	ldr	r4, [r3, #0]
 8007224:	2002      	movs	r0, #2
 8007226:	f001 fc3d 	bl	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq>
 800722a:	4603      	mov	r3, r0
 800722c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6919      	ldr	r1, [r3, #16]
 8007236:	4b4b      	ldr	r3, [pc, #300]	; (8007364 <HAL_ADC_PollForConversion+0x1f8>)
 8007238:	400b      	ands	r3, r1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d118      	bne.n	8007270 <HAL_ADC_PollForConversion+0x104>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68d9      	ldr	r1, [r3, #12]
 8007244:	4b48      	ldr	r3, [pc, #288]	; (8007368 <HAL_ADC_PollForConversion+0x1fc>)
 8007246:	400b      	ands	r3, r1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d111      	bne.n	8007270 <HAL_ADC_PollForConversion+0x104>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6919      	ldr	r1, [r3, #16]
 8007252:	4b46      	ldr	r3, [pc, #280]	; (800736c <HAL_ADC_PollForConversion+0x200>)
 8007254:	400b      	ands	r3, r1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d108      	bne.n	800726c <HAL_ADC_PollForConversion+0x100>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68d9      	ldr	r1, [r3, #12]
 8007260:	4b43      	ldr	r3, [pc, #268]	; (8007370 <HAL_ADC_PollForConversion+0x204>)
 8007262:	400b      	ands	r3, r1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <HAL_ADC_PollForConversion+0x100>
 8007268:	2314      	movs	r3, #20
 800726a:	e020      	b.n	80072ae <HAL_ADC_PollForConversion+0x142>
 800726c:	2329      	movs	r3, #41	; 0x29
 800726e:	e01e      	b.n	80072ae <HAL_ADC_PollForConversion+0x142>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6919      	ldr	r1, [r3, #16]
 8007276:	4b3d      	ldr	r3, [pc, #244]	; (800736c <HAL_ADC_PollForConversion+0x200>)
 8007278:	400b      	ands	r3, r1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d106      	bne.n	800728c <HAL_ADC_PollForConversion+0x120>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68d9      	ldr	r1, [r3, #12]
 8007284:	4b3a      	ldr	r3, [pc, #232]	; (8007370 <HAL_ADC_PollForConversion+0x204>)
 8007286:	400b      	ands	r3, r1
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00d      	beq.n	80072a8 <HAL_ADC_PollForConversion+0x13c>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6919      	ldr	r1, [r3, #16]
 8007292:	4b38      	ldr	r3, [pc, #224]	; (8007374 <HAL_ADC_PollForConversion+0x208>)
 8007294:	400b      	ands	r3, r1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d108      	bne.n	80072ac <HAL_ADC_PollForConversion+0x140>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68d9      	ldr	r1, [r3, #12]
 80072a0:	4b34      	ldr	r3, [pc, #208]	; (8007374 <HAL_ADC_PollForConversion+0x208>)
 80072a2:	400b      	ands	r3, r1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_ADC_PollForConversion+0x140>
 80072a8:	2354      	movs	r3, #84	; 0x54
 80072aa:	e000      	b.n	80072ae <HAL_ADC_PollForConversion+0x142>
 80072ac:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80072ae:	fb02 f303 	mul.w	r3, r2, r3
 80072b2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80072b4:	e021      	b.n	80072fa <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072bc:	d01a      	beq.n	80072f4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d007      	beq.n	80072d4 <HAL_ADC_PollForConversion+0x168>
 80072c4:	f7ff fd8c 	bl	8006de0 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d20f      	bcs.n	80072f4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d90b      	bls.n	80072f4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e0:	f043 0204 	orr.w	r2, r3, #4
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e030      	b.n	8007356 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3301      	adds	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d8d9      	bhi.n	80072b6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f06f 0212 	mvn.w	r2, #18
 800730a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007322:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007326:	d115      	bne.n	8007354 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800732c:	2b00      	cmp	r3, #0
 800732e:	d111      	bne.n	8007354 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d105      	bne.n	8007354 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734c:	f043 0201 	orr.w	r2, r3, #1
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	bd90      	pop	{r4, r7, pc}
 800735e:	bf00      	nop
 8007360:	20000004 	.word	0x20000004
 8007364:	24924924 	.word	0x24924924
 8007368:	00924924 	.word	0x00924924
 800736c:	12492492 	.word	0x12492492
 8007370:	00492492 	.word	0x00492492
 8007374:	00249249 	.word	0x00249249

08007378 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr

08007390 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b20      	cmp	r3, #32
 80073a4:	d140      	bne.n	8007428 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d139      	bne.n	8007428 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d105      	bne.n	80073cc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80073d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80073da:	d11d      	bne.n	8007418 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d119      	bne.n	8007418 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0220 	bic.w	r2, r2, #32
 80073f2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d105      	bne.n	8007418 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007410:	f043 0201 	orr.w	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f87c 	bl	8007516 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f06f 0212 	mvn.w	r2, #18
 8007426:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007432:	2b80      	cmp	r3, #128	; 0x80
 8007434:	d14f      	bne.n	80074d6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0304 	and.w	r3, r3, #4
 8007440:	2b04      	cmp	r3, #4
 8007442:	d148      	bne.n	80074d6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	d105      	bne.n	800745c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007466:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800746a:	d012      	beq.n	8007492 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8007476:	2b00      	cmp	r3, #0
 8007478:	d125      	bne.n	80074c6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8007484:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007488:	d11d      	bne.n	80074c6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800748e:	2b00      	cmp	r3, #0
 8007490:	d119      	bne.n	80074c6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074a0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d105      	bne.n	80074c6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074be:	f043 0201 	orr.w	r2, r3, #1
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fa17 	bl	80078fa <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f06f 020c 	mvn.w	r2, #12
 80074d4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e0:	2b40      	cmp	r3, #64	; 0x40
 80074e2:	d114      	bne.n	800750e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d10d      	bne.n	800750e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff f9e6 	bl	80068d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0201 	mvn.w	r2, #1
 800750c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr

08007528 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <HAL_ADC_ConfigChannel+0x20>
 8007544:	2302      	movs	r3, #2
 8007546:	e0dc      	b.n	8007702 <HAL_ADC_ConfigChannel+0x1da>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	2b06      	cmp	r3, #6
 8007556:	d81c      	bhi.n	8007592 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	4613      	mov	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	3b05      	subs	r3, #5
 800756a:	221f      	movs	r2, #31
 800756c:	fa02 f303 	lsl.w	r3, r2, r3
 8007570:	43db      	mvns	r3, r3
 8007572:	4019      	ands	r1, r3
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	6818      	ldr	r0, [r3, #0]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	4613      	mov	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	3b05      	subs	r3, #5
 8007584:	fa00 f203 	lsl.w	r2, r0, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	635a      	str	r2, [r3, #52]	; 0x34
 8007590:	e03c      	b.n	800760c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2b0c      	cmp	r3, #12
 8007598:	d81c      	bhi.n	80075d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	4613      	mov	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	3b23      	subs	r3, #35	; 0x23
 80075ac:	221f      	movs	r2, #31
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	43db      	mvns	r3, r3
 80075b4:	4019      	ands	r1, r3
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	3b23      	subs	r3, #35	; 0x23
 80075c6:	fa00 f203 	lsl.w	r2, r0, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	631a      	str	r2, [r3, #48]	; 0x30
 80075d2:	e01b      	b.n	800760c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	3b41      	subs	r3, #65	; 0x41
 80075e6:	221f      	movs	r2, #31
 80075e8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ec:	43db      	mvns	r3, r3
 80075ee:	4019      	ands	r1, r3
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	4613      	mov	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	3b41      	subs	r3, #65	; 0x41
 8007600:	fa00 f203 	lsl.w	r2, r0, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	430a      	orrs	r2, r1
 800760a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b09      	cmp	r3, #9
 8007612:	d91c      	bls.n	800764e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68d9      	ldr	r1, [r3, #12]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	4613      	mov	r3, r2
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	4413      	add	r3, r2
 8007624:	3b1e      	subs	r3, #30
 8007626:	2207      	movs	r2, #7
 8007628:	fa02 f303 	lsl.w	r3, r2, r3
 800762c:	43db      	mvns	r3, r3
 800762e:	4019      	ands	r1, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	6898      	ldr	r0, [r3, #8]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	4613      	mov	r3, r2
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	4413      	add	r3, r2
 800763e:	3b1e      	subs	r3, #30
 8007640:	fa00 f203 	lsl.w	r2, r0, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	60da      	str	r2, [r3, #12]
 800764c:	e019      	b.n	8007682 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6919      	ldr	r1, [r3, #16]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	4613      	mov	r3, r2
 800765a:	005b      	lsls	r3, r3, #1
 800765c:	4413      	add	r3, r2
 800765e:	2207      	movs	r2, #7
 8007660:	fa02 f303 	lsl.w	r3, r2, r3
 8007664:	43db      	mvns	r3, r3
 8007666:	4019      	ands	r1, r3
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	6898      	ldr	r0, [r3, #8]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	4613      	mov	r3, r2
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	4413      	add	r3, r2
 8007676:	fa00 f203 	lsl.w	r2, r0, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b10      	cmp	r3, #16
 8007688:	d003      	beq.n	8007692 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800768e:	2b11      	cmp	r3, #17
 8007690:	d132      	bne.n	80076f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1d      	ldr	r2, [pc, #116]	; (800770c <HAL_ADC_ConfigChannel+0x1e4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d125      	bne.n	80076e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d126      	bne.n	80076f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80076b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b10      	cmp	r3, #16
 80076c0:	d11a      	bne.n	80076f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80076c2:	4b13      	ldr	r3, [pc, #76]	; (8007710 <HAL_ADC_ConfigChannel+0x1e8>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a13      	ldr	r2, [pc, #76]	; (8007714 <HAL_ADC_ConfigChannel+0x1ec>)
 80076c8:	fba2 2303 	umull	r2, r3, r2, r3
 80076cc:	0c9a      	lsrs	r2, r3, #18
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80076d8:	e002      	b.n	80076e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	3b01      	subs	r3, #1
 80076de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1f9      	bne.n	80076da <HAL_ADC_ConfigChannel+0x1b2>
 80076e6:	e007      	b.n	80076f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	f043 0220 	orr.w	r2, r3, #32
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	bc80      	pop	{r7}
 800770a:	4770      	bx	lr
 800770c:	40012400 	.word	0x40012400
 8007710:	20000004 	.word	0x20000004
 8007714:	431bde83 	.word	0x431bde83

08007718 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a24      	ldr	r2, [pc, #144]	; (80077b8 <HAL_ADC_AnalogWDGConfig+0xa0>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d003      	beq.n	8007734 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007730:	4a22      	ldr	r2, [pc, #136]	; (80077bc <HAL_ADC_AnalogWDGConfig+0xa4>)
 8007732:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800773a:	2b01      	cmp	r3, #1
 800773c:	d101      	bne.n	8007742 <HAL_ADC_AnalogWDGConfig+0x2a>
 800773e:	2302      	movs	r3, #2
 8007740:	e035      	b.n	80077ae <HAL_ADC_AnalogWDGConfig+0x96>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	7a1b      	ldrb	r3, [r3, #8]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d108      	bne.n	8007764 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007760:	605a      	str	r2, [r3, #4]
 8007762:	e007      	b.n	8007774 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007772:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	4b11      	ldr	r3, [pc, #68]	; (80077c0 <HAL_ADC_AnalogWDGConfig+0xa8>)
 800777c:	4013      	ands	r3, r2
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	6811      	ldr	r1, [r2, #0]
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	6852      	ldr	r2, [r2, #4]
 8007786:	4311      	orrs	r1, r2
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6812      	ldr	r2, [r2, #0]
 800778c:	430b      	orrs	r3, r1
 800778e:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	68d2      	ldr	r2, [r2, #12]
 8007798:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	6912      	ldr	r2, [r2, #16]
 80077a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr
 80077b8:	00800200 	.word	0x00800200
 80077bc:	00400200 	.word	0x00400200
 80077c0:	ff3ffde0 	.word	0xff3ffde0

080077c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d040      	beq.n	8007864 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f042 0201 	orr.w	r2, r2, #1
 80077f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80077f2:	4b1f      	ldr	r3, [pc, #124]	; (8007870 <ADC_Enable+0xac>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a1f      	ldr	r2, [pc, #124]	; (8007874 <ADC_Enable+0xb0>)
 80077f8:	fba2 2303 	umull	r2, r3, r2, r3
 80077fc:	0c9b      	lsrs	r3, r3, #18
 80077fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007800:	e002      	b.n	8007808 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	3b01      	subs	r3, #1
 8007806:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1f9      	bne.n	8007802 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800780e:	f7ff fae7 	bl	8006de0 <HAL_GetTick>
 8007812:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007814:	e01f      	b.n	8007856 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007816:	f7ff fae3 	bl	8006de0 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d918      	bls.n	8007856 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b01      	cmp	r3, #1
 8007830:	d011      	beq.n	8007856 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	f043 0210 	orr.w	r2, r3, #16
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	f043 0201 	orr.w	r2, r3, #1
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e007      	b.n	8007866 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b01      	cmp	r3, #1
 8007862:	d1d8      	bne.n	8007816 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20000004 	.word	0x20000004
 8007874:	431bde83 	.word	0x431bde83

08007878 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b01      	cmp	r3, #1
 8007890:	d12e      	bne.n	80078f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 0201 	bic.w	r2, r2, #1
 80078a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80078a2:	f7ff fa9d 	bl	8006de0 <HAL_GetTick>
 80078a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80078a8:	e01b      	b.n	80078e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80078aa:	f7ff fa99 	bl	8006de0 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d914      	bls.n	80078e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d10d      	bne.n	80078e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	f043 0210 	orr.w	r2, r3, #16
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d6:	f043 0201 	orr.w	r2, r3, #1
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e007      	b.n	80078f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d0dc      	beq.n	80078aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	bc80      	pop	{r7}
 800790a:	4770      	bx	lr

0800790c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800791c:	4b0c      	ldr	r3, [pc, #48]	; (8007950 <__NVIC_SetPriorityGrouping+0x44>)
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007928:	4013      	ands	r3, r2
 800792a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800793c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800793e:	4a04      	ldr	r2, [pc, #16]	; (8007950 <__NVIC_SetPriorityGrouping+0x44>)
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	60d3      	str	r3, [r2, #12]
}
 8007944:	bf00      	nop
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	bc80      	pop	{r7}
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	e000ed00 	.word	0xe000ed00

08007954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007958:	4b04      	ldr	r3, [pc, #16]	; (800796c <__NVIC_GetPriorityGrouping+0x18>)
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	0a1b      	lsrs	r3, r3, #8
 800795e:	f003 0307 	and.w	r3, r3, #7
}
 8007962:	4618      	mov	r0, r3
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	e000ed00 	.word	0xe000ed00

08007970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	4603      	mov	r3, r0
 8007978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800797a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800797e:	2b00      	cmp	r3, #0
 8007980:	db0b      	blt.n	800799a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	f003 021f 	and.w	r2, r3, #31
 8007988:	4906      	ldr	r1, [pc, #24]	; (80079a4 <__NVIC_EnableIRQ+0x34>)
 800798a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800798e:	095b      	lsrs	r3, r3, #5
 8007990:	2001      	movs	r0, #1
 8007992:	fa00 f202 	lsl.w	r2, r0, r2
 8007996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	bc80      	pop	{r7}
 80079a2:	4770      	bx	lr
 80079a4:	e000e100 	.word	0xe000e100

080079a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	6039      	str	r1, [r7, #0]
 80079b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	db0a      	blt.n	80079d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	490c      	ldr	r1, [pc, #48]	; (80079f4 <__NVIC_SetPriority+0x4c>)
 80079c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079c6:	0112      	lsls	r2, r2, #4
 80079c8:	b2d2      	uxtb	r2, r2
 80079ca:	440b      	add	r3, r1
 80079cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079d0:	e00a      	b.n	80079e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	4908      	ldr	r1, [pc, #32]	; (80079f8 <__NVIC_SetPriority+0x50>)
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	3b04      	subs	r3, #4
 80079e0:	0112      	lsls	r2, r2, #4
 80079e2:	b2d2      	uxtb	r2, r2
 80079e4:	440b      	add	r3, r1
 80079e6:	761a      	strb	r2, [r3, #24]
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bc80      	pop	{r7}
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	e000e100 	.word	0xe000e100
 80079f8:	e000ed00 	.word	0xe000ed00

080079fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b089      	sub	sp, #36	; 0x24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	f1c3 0307 	rsb	r3, r3, #7
 8007a16:	2b04      	cmp	r3, #4
 8007a18:	bf28      	it	cs
 8007a1a:	2304      	movcs	r3, #4
 8007a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	3304      	adds	r3, #4
 8007a22:	2b06      	cmp	r3, #6
 8007a24:	d902      	bls.n	8007a2c <NVIC_EncodePriority+0x30>
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	3b03      	subs	r3, #3
 8007a2a:	e000      	b.n	8007a2e <NVIC_EncodePriority+0x32>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a30:	f04f 32ff 	mov.w	r2, #4294967295
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3a:	43da      	mvns	r2, r3
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	401a      	ands	r2, r3
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a44:	f04f 31ff 	mov.w	r1, #4294967295
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a4e:	43d9      	mvns	r1, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a54:	4313      	orrs	r3, r2
         );
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3724      	adds	r7, #36	; 0x24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bc80      	pop	{r7}
 8007a5e:	4770      	bx	lr

08007a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a70:	d301      	bcc.n	8007a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a72:	2301      	movs	r3, #1
 8007a74:	e00f      	b.n	8007a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a76:	4a0a      	ldr	r2, [pc, #40]	; (8007aa0 <SysTick_Config+0x40>)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a7e:	210f      	movs	r1, #15
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295
 8007a84:	f7ff ff90 	bl	80079a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a88:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <SysTick_Config+0x40>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a8e:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <SysTick_Config+0x40>)
 8007a90:	2207      	movs	r2, #7
 8007a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	e000e010 	.word	0xe000e010

08007aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff ff2d 	bl	800790c <__NVIC_SetPriorityGrouping>
}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b086      	sub	sp, #24
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	60b9      	str	r1, [r7, #8]
 8007ac4:	607a      	str	r2, [r7, #4]
 8007ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007acc:	f7ff ff42 	bl	8007954 <__NVIC_GetPriorityGrouping>
 8007ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	68b9      	ldr	r1, [r7, #8]
 8007ad6:	6978      	ldr	r0, [r7, #20]
 8007ad8:	f7ff ff90 	bl	80079fc <NVIC_EncodePriority>
 8007adc:	4602      	mov	r2, r0
 8007ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff ff5f 	bl	80079a8 <__NVIC_SetPriority>
}
 8007aea:	bf00      	nop
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b082      	sub	sp, #8
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	4603      	mov	r3, r0
 8007afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff ff35 	bl	8007970 <__NVIC_EnableIRQ>
}
 8007b06:	bf00      	nop
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff ffa2 	bl	8007a60 <SysTick_Config>
 8007b1c:	4603      	mov	r3, r0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b085      	sub	sp, #20
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d008      	beq.n	8007b4e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2204      	movs	r2, #4
 8007b40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e020      	b.n	8007b90 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 020e 	bic.w	r2, r2, #14
 8007b5c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0201 	bic.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b76:	2101      	movs	r1, #1
 8007b78:	fa01 f202 	lsl.w	r2, r1, r2
 8007b7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bc80      	pop	{r7}
 8007b98:	4770      	bx	lr
	...

08007b9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d005      	beq.n	8007bbe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	73fb      	strb	r3, [r7, #15]
 8007bbc:	e0d6      	b.n	8007d6c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 020e 	bic.w	r2, r2, #14
 8007bcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0201 	bic.w	r2, r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	4b64      	ldr	r3, [pc, #400]	; (8007d78 <HAL_DMA_Abort_IT+0x1dc>)
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d958      	bls.n	8007c9c <HAL_DMA_Abort_IT+0x100>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a63      	ldr	r2, [pc, #396]	; (8007d7c <HAL_DMA_Abort_IT+0x1e0>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d04f      	beq.n	8007c94 <HAL_DMA_Abort_IT+0xf8>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a61      	ldr	r2, [pc, #388]	; (8007d80 <HAL_DMA_Abort_IT+0x1e4>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d048      	beq.n	8007c90 <HAL_DMA_Abort_IT+0xf4>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a60      	ldr	r2, [pc, #384]	; (8007d84 <HAL_DMA_Abort_IT+0x1e8>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d040      	beq.n	8007c8a <HAL_DMA_Abort_IT+0xee>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a5e      	ldr	r2, [pc, #376]	; (8007d88 <HAL_DMA_Abort_IT+0x1ec>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d038      	beq.n	8007c84 <HAL_DMA_Abort_IT+0xe8>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a5d      	ldr	r2, [pc, #372]	; (8007d8c <HAL_DMA_Abort_IT+0x1f0>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d030      	beq.n	8007c7e <HAL_DMA_Abort_IT+0xe2>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a5b      	ldr	r2, [pc, #364]	; (8007d90 <HAL_DMA_Abort_IT+0x1f4>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d028      	beq.n	8007c78 <HAL_DMA_Abort_IT+0xdc>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a53      	ldr	r2, [pc, #332]	; (8007d78 <HAL_DMA_Abort_IT+0x1dc>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d020      	beq.n	8007c72 <HAL_DMA_Abort_IT+0xd6>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a57      	ldr	r2, [pc, #348]	; (8007d94 <HAL_DMA_Abort_IT+0x1f8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d019      	beq.n	8007c6e <HAL_DMA_Abort_IT+0xd2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a56      	ldr	r2, [pc, #344]	; (8007d98 <HAL_DMA_Abort_IT+0x1fc>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d012      	beq.n	8007c6a <HAL_DMA_Abort_IT+0xce>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a54      	ldr	r2, [pc, #336]	; (8007d9c <HAL_DMA_Abort_IT+0x200>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00a      	beq.n	8007c64 <HAL_DMA_Abort_IT+0xc8>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a53      	ldr	r2, [pc, #332]	; (8007da0 <HAL_DMA_Abort_IT+0x204>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d102      	bne.n	8007c5e <HAL_DMA_Abort_IT+0xc2>
 8007c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c5c:	e01b      	b.n	8007c96 <HAL_DMA_Abort_IT+0xfa>
 8007c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c62:	e018      	b.n	8007c96 <HAL_DMA_Abort_IT+0xfa>
 8007c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c68:	e015      	b.n	8007c96 <HAL_DMA_Abort_IT+0xfa>
 8007c6a:	2310      	movs	r3, #16
 8007c6c:	e013      	b.n	8007c96 <HAL_DMA_Abort_IT+0xfa>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e011      	b.n	8007c96 <HAL_DMA_Abort_IT+0xfa>
 8007c72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c76:	e00e      	b.n	8007c96 <HAL_DMA_Abort_IT+0xfa>
 8007c78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007c7c:	e00b      	b.n	8007c96 <HAL_DMA_Abort_IT+0xfa>
 8007c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c82:	e008      	b.n	8007c96 <HAL_DMA_Abort_IT+0xfa>
 8007c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c88:	e005      	b.n	8007c96 <HAL_DMA_Abort_IT+0xfa>
 8007c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c8e:	e002      	b.n	8007c96 <HAL_DMA_Abort_IT+0xfa>
 8007c90:	2310      	movs	r3, #16
 8007c92:	e000      	b.n	8007c96 <HAL_DMA_Abort_IT+0xfa>
 8007c94:	2301      	movs	r3, #1
 8007c96:	4a43      	ldr	r2, [pc, #268]	; (8007da4 <HAL_DMA_Abort_IT+0x208>)
 8007c98:	6053      	str	r3, [r2, #4]
 8007c9a:	e057      	b.n	8007d4c <HAL_DMA_Abort_IT+0x1b0>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a36      	ldr	r2, [pc, #216]	; (8007d7c <HAL_DMA_Abort_IT+0x1e0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d04f      	beq.n	8007d46 <HAL_DMA_Abort_IT+0x1aa>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a35      	ldr	r2, [pc, #212]	; (8007d80 <HAL_DMA_Abort_IT+0x1e4>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d048      	beq.n	8007d42 <HAL_DMA_Abort_IT+0x1a6>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a33      	ldr	r2, [pc, #204]	; (8007d84 <HAL_DMA_Abort_IT+0x1e8>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d040      	beq.n	8007d3c <HAL_DMA_Abort_IT+0x1a0>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a32      	ldr	r2, [pc, #200]	; (8007d88 <HAL_DMA_Abort_IT+0x1ec>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d038      	beq.n	8007d36 <HAL_DMA_Abort_IT+0x19a>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a30      	ldr	r2, [pc, #192]	; (8007d8c <HAL_DMA_Abort_IT+0x1f0>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d030      	beq.n	8007d30 <HAL_DMA_Abort_IT+0x194>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a2f      	ldr	r2, [pc, #188]	; (8007d90 <HAL_DMA_Abort_IT+0x1f4>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d028      	beq.n	8007d2a <HAL_DMA_Abort_IT+0x18e>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a26      	ldr	r2, [pc, #152]	; (8007d78 <HAL_DMA_Abort_IT+0x1dc>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d020      	beq.n	8007d24 <HAL_DMA_Abort_IT+0x188>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a2b      	ldr	r2, [pc, #172]	; (8007d94 <HAL_DMA_Abort_IT+0x1f8>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d019      	beq.n	8007d20 <HAL_DMA_Abort_IT+0x184>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a29      	ldr	r2, [pc, #164]	; (8007d98 <HAL_DMA_Abort_IT+0x1fc>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d012      	beq.n	8007d1c <HAL_DMA_Abort_IT+0x180>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a28      	ldr	r2, [pc, #160]	; (8007d9c <HAL_DMA_Abort_IT+0x200>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00a      	beq.n	8007d16 <HAL_DMA_Abort_IT+0x17a>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a26      	ldr	r2, [pc, #152]	; (8007da0 <HAL_DMA_Abort_IT+0x204>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d102      	bne.n	8007d10 <HAL_DMA_Abort_IT+0x174>
 8007d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d0e:	e01b      	b.n	8007d48 <HAL_DMA_Abort_IT+0x1ac>
 8007d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d14:	e018      	b.n	8007d48 <HAL_DMA_Abort_IT+0x1ac>
 8007d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d1a:	e015      	b.n	8007d48 <HAL_DMA_Abort_IT+0x1ac>
 8007d1c:	2310      	movs	r3, #16
 8007d1e:	e013      	b.n	8007d48 <HAL_DMA_Abort_IT+0x1ac>
 8007d20:	2301      	movs	r3, #1
 8007d22:	e011      	b.n	8007d48 <HAL_DMA_Abort_IT+0x1ac>
 8007d24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d28:	e00e      	b.n	8007d48 <HAL_DMA_Abort_IT+0x1ac>
 8007d2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d2e:	e00b      	b.n	8007d48 <HAL_DMA_Abort_IT+0x1ac>
 8007d30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d34:	e008      	b.n	8007d48 <HAL_DMA_Abort_IT+0x1ac>
 8007d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d3a:	e005      	b.n	8007d48 <HAL_DMA_Abort_IT+0x1ac>
 8007d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d40:	e002      	b.n	8007d48 <HAL_DMA_Abort_IT+0x1ac>
 8007d42:	2310      	movs	r3, #16
 8007d44:	e000      	b.n	8007d48 <HAL_DMA_Abort_IT+0x1ac>
 8007d46:	2301      	movs	r3, #1
 8007d48:	4a17      	ldr	r2, [pc, #92]	; (8007da8 <HAL_DMA_Abort_IT+0x20c>)
 8007d4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d003      	beq.n	8007d6c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	4798      	blx	r3
    } 
  }
  return status;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	40020080 	.word	0x40020080
 8007d7c:	40020008 	.word	0x40020008
 8007d80:	4002001c 	.word	0x4002001c
 8007d84:	40020030 	.word	0x40020030
 8007d88:	40020044 	.word	0x40020044
 8007d8c:	40020058 	.word	0x40020058
 8007d90:	4002006c 	.word	0x4002006c
 8007d94:	40020408 	.word	0x40020408
 8007d98:	4002041c 	.word	0x4002041c
 8007d9c:	40020430 	.word	0x40020430
 8007da0:	40020444 	.word	0x40020444
 8007da4:	40020400 	.word	0x40020400
 8007da8:	40020000 	.word	0x40020000

08007dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b08b      	sub	sp, #44	; 0x2c
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007db6:	2300      	movs	r3, #0
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007dbe:	e179      	b.n	80080b4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	f040 8168 	bne.w	80080ae <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	4aa0      	ldr	r2, [pc, #640]	; (8008064 <HAL_GPIO_Init+0x2b8>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d05e      	beq.n	8007ea6 <HAL_GPIO_Init+0xfa>
 8007de8:	4a9e      	ldr	r2, [pc, #632]	; (8008064 <HAL_GPIO_Init+0x2b8>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d875      	bhi.n	8007eda <HAL_GPIO_Init+0x12e>
 8007dee:	4a9e      	ldr	r2, [pc, #632]	; (8008068 <HAL_GPIO_Init+0x2bc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d058      	beq.n	8007ea6 <HAL_GPIO_Init+0xfa>
 8007df4:	4a9c      	ldr	r2, [pc, #624]	; (8008068 <HAL_GPIO_Init+0x2bc>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d86f      	bhi.n	8007eda <HAL_GPIO_Init+0x12e>
 8007dfa:	4a9c      	ldr	r2, [pc, #624]	; (800806c <HAL_GPIO_Init+0x2c0>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d052      	beq.n	8007ea6 <HAL_GPIO_Init+0xfa>
 8007e00:	4a9a      	ldr	r2, [pc, #616]	; (800806c <HAL_GPIO_Init+0x2c0>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d869      	bhi.n	8007eda <HAL_GPIO_Init+0x12e>
 8007e06:	4a9a      	ldr	r2, [pc, #616]	; (8008070 <HAL_GPIO_Init+0x2c4>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d04c      	beq.n	8007ea6 <HAL_GPIO_Init+0xfa>
 8007e0c:	4a98      	ldr	r2, [pc, #608]	; (8008070 <HAL_GPIO_Init+0x2c4>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d863      	bhi.n	8007eda <HAL_GPIO_Init+0x12e>
 8007e12:	4a98      	ldr	r2, [pc, #608]	; (8008074 <HAL_GPIO_Init+0x2c8>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d046      	beq.n	8007ea6 <HAL_GPIO_Init+0xfa>
 8007e18:	4a96      	ldr	r2, [pc, #600]	; (8008074 <HAL_GPIO_Init+0x2c8>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d85d      	bhi.n	8007eda <HAL_GPIO_Init+0x12e>
 8007e1e:	2b12      	cmp	r3, #18
 8007e20:	d82a      	bhi.n	8007e78 <HAL_GPIO_Init+0xcc>
 8007e22:	2b12      	cmp	r3, #18
 8007e24:	d859      	bhi.n	8007eda <HAL_GPIO_Init+0x12e>
 8007e26:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <HAL_GPIO_Init+0x80>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007ea7 	.word	0x08007ea7
 8007e30:	08007e81 	.word	0x08007e81
 8007e34:	08007e93 	.word	0x08007e93
 8007e38:	08007ed5 	.word	0x08007ed5
 8007e3c:	08007edb 	.word	0x08007edb
 8007e40:	08007edb 	.word	0x08007edb
 8007e44:	08007edb 	.word	0x08007edb
 8007e48:	08007edb 	.word	0x08007edb
 8007e4c:	08007edb 	.word	0x08007edb
 8007e50:	08007edb 	.word	0x08007edb
 8007e54:	08007edb 	.word	0x08007edb
 8007e58:	08007edb 	.word	0x08007edb
 8007e5c:	08007edb 	.word	0x08007edb
 8007e60:	08007edb 	.word	0x08007edb
 8007e64:	08007edb 	.word	0x08007edb
 8007e68:	08007edb 	.word	0x08007edb
 8007e6c:	08007edb 	.word	0x08007edb
 8007e70:	08007e89 	.word	0x08007e89
 8007e74:	08007e9d 	.word	0x08007e9d
 8007e78:	4a7f      	ldr	r2, [pc, #508]	; (8008078 <HAL_GPIO_Init+0x2cc>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d013      	beq.n	8007ea6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007e7e:	e02c      	b.n	8007eda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	623b      	str	r3, [r7, #32]
          break;
 8007e86:	e029      	b.n	8007edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	623b      	str	r3, [r7, #32]
          break;
 8007e90:	e024      	b.n	8007edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	3308      	adds	r3, #8
 8007e98:	623b      	str	r3, [r7, #32]
          break;
 8007e9a:	e01f      	b.n	8007edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	330c      	adds	r3, #12
 8007ea2:	623b      	str	r3, [r7, #32]
          break;
 8007ea4:	e01a      	b.n	8007edc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d102      	bne.n	8007eb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007eae:	2304      	movs	r3, #4
 8007eb0:	623b      	str	r3, [r7, #32]
          break;
 8007eb2:	e013      	b.n	8007edc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d105      	bne.n	8007ec8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69fa      	ldr	r2, [r7, #28]
 8007ec4:	611a      	str	r2, [r3, #16]
          break;
 8007ec6:	e009      	b.n	8007edc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007ec8:	2308      	movs	r3, #8
 8007eca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	69fa      	ldr	r2, [r7, #28]
 8007ed0:	615a      	str	r2, [r3, #20]
          break;
 8007ed2:	e003      	b.n	8007edc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	623b      	str	r3, [r7, #32]
          break;
 8007ed8:	e000      	b.n	8007edc <HAL_GPIO_Init+0x130>
          break;
 8007eda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	2bff      	cmp	r3, #255	; 0xff
 8007ee0:	d801      	bhi.n	8007ee6 <HAL_GPIO_Init+0x13a>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	e001      	b.n	8007eea <HAL_GPIO_Init+0x13e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	3304      	adds	r3, #4
 8007eea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	2bff      	cmp	r3, #255	; 0xff
 8007ef0:	d802      	bhi.n	8007ef8 <HAL_GPIO_Init+0x14c>
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	e002      	b.n	8007efe <HAL_GPIO_Init+0x152>
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	3b08      	subs	r3, #8
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	210f      	movs	r1, #15
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	fa01 f303 	lsl.w	r3, r1, r3
 8007f0c:	43db      	mvns	r3, r3
 8007f0e:	401a      	ands	r2, r3
 8007f10:	6a39      	ldr	r1, [r7, #32]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	fa01 f303 	lsl.w	r3, r1, r3
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 80c1 	beq.w	80080ae <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007f2c:	4b53      	ldr	r3, [pc, #332]	; (800807c <HAL_GPIO_Init+0x2d0>)
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	4a52      	ldr	r2, [pc, #328]	; (800807c <HAL_GPIO_Init+0x2d0>)
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	6193      	str	r3, [r2, #24]
 8007f38:	4b50      	ldr	r3, [pc, #320]	; (800807c <HAL_GPIO_Init+0x2d0>)
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	60bb      	str	r3, [r7, #8]
 8007f42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007f44:	4a4e      	ldr	r2, [pc, #312]	; (8008080 <HAL_GPIO_Init+0x2d4>)
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	089b      	lsrs	r3, r3, #2
 8007f4a:	3302      	adds	r3, #2
 8007f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	f003 0303 	and.w	r3, r3, #3
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	220f      	movs	r2, #15
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	43db      	mvns	r3, r3
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	4013      	ands	r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a46      	ldr	r2, [pc, #280]	; (8008084 <HAL_GPIO_Init+0x2d8>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d01f      	beq.n	8007fb0 <HAL_GPIO_Init+0x204>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a45      	ldr	r2, [pc, #276]	; (8008088 <HAL_GPIO_Init+0x2dc>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d019      	beq.n	8007fac <HAL_GPIO_Init+0x200>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a44      	ldr	r2, [pc, #272]	; (800808c <HAL_GPIO_Init+0x2e0>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d013      	beq.n	8007fa8 <HAL_GPIO_Init+0x1fc>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a43      	ldr	r2, [pc, #268]	; (8008090 <HAL_GPIO_Init+0x2e4>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d00d      	beq.n	8007fa4 <HAL_GPIO_Init+0x1f8>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a42      	ldr	r2, [pc, #264]	; (8008094 <HAL_GPIO_Init+0x2e8>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d007      	beq.n	8007fa0 <HAL_GPIO_Init+0x1f4>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a41      	ldr	r2, [pc, #260]	; (8008098 <HAL_GPIO_Init+0x2ec>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d101      	bne.n	8007f9c <HAL_GPIO_Init+0x1f0>
 8007f98:	2305      	movs	r3, #5
 8007f9a:	e00a      	b.n	8007fb2 <HAL_GPIO_Init+0x206>
 8007f9c:	2306      	movs	r3, #6
 8007f9e:	e008      	b.n	8007fb2 <HAL_GPIO_Init+0x206>
 8007fa0:	2304      	movs	r3, #4
 8007fa2:	e006      	b.n	8007fb2 <HAL_GPIO_Init+0x206>
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e004      	b.n	8007fb2 <HAL_GPIO_Init+0x206>
 8007fa8:	2302      	movs	r3, #2
 8007faa:	e002      	b.n	8007fb2 <HAL_GPIO_Init+0x206>
 8007fac:	2301      	movs	r3, #1
 8007fae:	e000      	b.n	8007fb2 <HAL_GPIO_Init+0x206>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb4:	f002 0203 	and.w	r2, r2, #3
 8007fb8:	0092      	lsls	r2, r2, #2
 8007fba:	4093      	lsls	r3, r2
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007fc2:	492f      	ldr	r1, [pc, #188]	; (8008080 <HAL_GPIO_Init+0x2d4>)
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	089b      	lsrs	r3, r3, #2
 8007fc8:	3302      	adds	r3, #2
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d006      	beq.n	8007fea <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007fdc:	4b2f      	ldr	r3, [pc, #188]	; (800809c <HAL_GPIO_Init+0x2f0>)
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	492e      	ldr	r1, [pc, #184]	; (800809c <HAL_GPIO_Init+0x2f0>)
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	600b      	str	r3, [r1, #0]
 8007fe8:	e006      	b.n	8007ff8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007fea:	4b2c      	ldr	r3, [pc, #176]	; (800809c <HAL_GPIO_Init+0x2f0>)
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	492a      	ldr	r1, [pc, #168]	; (800809c <HAL_GPIO_Init+0x2f0>)
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d006      	beq.n	8008012 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008004:	4b25      	ldr	r3, [pc, #148]	; (800809c <HAL_GPIO_Init+0x2f0>)
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	4924      	ldr	r1, [pc, #144]	; (800809c <HAL_GPIO_Init+0x2f0>)
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	4313      	orrs	r3, r2
 800800e:	604b      	str	r3, [r1, #4]
 8008010:	e006      	b.n	8008020 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008012:	4b22      	ldr	r3, [pc, #136]	; (800809c <HAL_GPIO_Init+0x2f0>)
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	43db      	mvns	r3, r3
 800801a:	4920      	ldr	r1, [pc, #128]	; (800809c <HAL_GPIO_Init+0x2f0>)
 800801c:	4013      	ands	r3, r2
 800801e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d006      	beq.n	800803a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800802c:	4b1b      	ldr	r3, [pc, #108]	; (800809c <HAL_GPIO_Init+0x2f0>)
 800802e:	689a      	ldr	r2, [r3, #8]
 8008030:	491a      	ldr	r1, [pc, #104]	; (800809c <HAL_GPIO_Init+0x2f0>)
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	4313      	orrs	r3, r2
 8008036:	608b      	str	r3, [r1, #8]
 8008038:	e006      	b.n	8008048 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800803a:	4b18      	ldr	r3, [pc, #96]	; (800809c <HAL_GPIO_Init+0x2f0>)
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	43db      	mvns	r3, r3
 8008042:	4916      	ldr	r1, [pc, #88]	; (800809c <HAL_GPIO_Init+0x2f0>)
 8008044:	4013      	ands	r3, r2
 8008046:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d025      	beq.n	80080a0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008054:	4b11      	ldr	r3, [pc, #68]	; (800809c <HAL_GPIO_Init+0x2f0>)
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	4910      	ldr	r1, [pc, #64]	; (800809c <HAL_GPIO_Init+0x2f0>)
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	4313      	orrs	r3, r2
 800805e:	60cb      	str	r3, [r1, #12]
 8008060:	e025      	b.n	80080ae <HAL_GPIO_Init+0x302>
 8008062:	bf00      	nop
 8008064:	10320000 	.word	0x10320000
 8008068:	10310000 	.word	0x10310000
 800806c:	10220000 	.word	0x10220000
 8008070:	10210000 	.word	0x10210000
 8008074:	10120000 	.word	0x10120000
 8008078:	10110000 	.word	0x10110000
 800807c:	40021000 	.word	0x40021000
 8008080:	40010000 	.word	0x40010000
 8008084:	40010800 	.word	0x40010800
 8008088:	40010c00 	.word	0x40010c00
 800808c:	40011000 	.word	0x40011000
 8008090:	40011400 	.word	0x40011400
 8008094:	40011800 	.word	0x40011800
 8008098:	40011c00 	.word	0x40011c00
 800809c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80080a0:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <HAL_GPIO_Init+0x324>)
 80080a2:	68da      	ldr	r2, [r3, #12]
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	43db      	mvns	r3, r3
 80080a8:	4909      	ldr	r1, [pc, #36]	; (80080d0 <HAL_GPIO_Init+0x324>)
 80080aa:	4013      	ands	r3, r2
 80080ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	3301      	adds	r3, #1
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	fa22 f303 	lsr.w	r3, r2, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f47f ae7e 	bne.w	8007dc0 <HAL_GPIO_Init+0x14>
  }
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop
 80080c8:	372c      	adds	r7, #44	; 0x2c
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bc80      	pop	{r7}
 80080ce:	4770      	bx	lr
 80080d0:	40010400 	.word	0x40010400

080080d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	807b      	strh	r3, [r7, #2]
 80080e0:	4613      	mov	r3, r2
 80080e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080e4:	787b      	ldrb	r3, [r7, #1]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080ea:	887a      	ldrh	r2, [r7, #2]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80080f0:	e003      	b.n	80080fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80080f2:	887b      	ldrh	r3, [r7, #2]
 80080f4:	041a      	lsls	r2, r3, #16
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	611a      	str	r2, [r3, #16]
}
 80080fa:	bf00      	nop
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	bc80      	pop	{r7}
 8008102:	4770      	bx	lr

08008104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e26c      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 8087 	beq.w	8008232 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008124:	4b92      	ldr	r3, [pc, #584]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f003 030c 	and.w	r3, r3, #12
 800812c:	2b04      	cmp	r3, #4
 800812e:	d00c      	beq.n	800814a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008130:	4b8f      	ldr	r3, [pc, #572]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f003 030c 	and.w	r3, r3, #12
 8008138:	2b08      	cmp	r3, #8
 800813a:	d112      	bne.n	8008162 <HAL_RCC_OscConfig+0x5e>
 800813c:	4b8c      	ldr	r3, [pc, #560]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008148:	d10b      	bne.n	8008162 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800814a:	4b89      	ldr	r3, [pc, #548]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d06c      	beq.n	8008230 <HAL_RCC_OscConfig+0x12c>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d168      	bne.n	8008230 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e246      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800816a:	d106      	bne.n	800817a <HAL_RCC_OscConfig+0x76>
 800816c:	4b80      	ldr	r3, [pc, #512]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a7f      	ldr	r2, [pc, #508]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 8008172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	e02e      	b.n	80081d8 <HAL_RCC_OscConfig+0xd4>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10c      	bne.n	800819c <HAL_RCC_OscConfig+0x98>
 8008182:	4b7b      	ldr	r3, [pc, #492]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a7a      	ldr	r2, [pc, #488]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 8008188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	4b78      	ldr	r3, [pc, #480]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a77      	ldr	r2, [pc, #476]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 8008194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	e01d      	b.n	80081d8 <HAL_RCC_OscConfig+0xd4>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081a4:	d10c      	bne.n	80081c0 <HAL_RCC_OscConfig+0xbc>
 80081a6:	4b72      	ldr	r3, [pc, #456]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a71      	ldr	r2, [pc, #452]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 80081ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	4b6f      	ldr	r3, [pc, #444]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a6e      	ldr	r2, [pc, #440]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 80081b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	e00b      	b.n	80081d8 <HAL_RCC_OscConfig+0xd4>
 80081c0:	4b6b      	ldr	r3, [pc, #428]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a6a      	ldr	r2, [pc, #424]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 80081c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	4b68      	ldr	r3, [pc, #416]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a67      	ldr	r2, [pc, #412]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 80081d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d013      	beq.n	8008208 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081e0:	f7fe fdfe 	bl	8006de0 <HAL_GetTick>
 80081e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081e8:	f7fe fdfa 	bl	8006de0 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b64      	cmp	r3, #100	; 0x64
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e1fa      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081fa:	4b5d      	ldr	r3, [pc, #372]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0f0      	beq.n	80081e8 <HAL_RCC_OscConfig+0xe4>
 8008206:	e014      	b.n	8008232 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008208:	f7fe fdea 	bl	8006de0 <HAL_GetTick>
 800820c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800820e:	e008      	b.n	8008222 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008210:	f7fe fde6 	bl	8006de0 <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	2b64      	cmp	r3, #100	; 0x64
 800821c:	d901      	bls.n	8008222 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e1e6      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008222:	4b53      	ldr	r3, [pc, #332]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1f0      	bne.n	8008210 <HAL_RCC_OscConfig+0x10c>
 800822e:	e000      	b.n	8008232 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d063      	beq.n	8008306 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800823e:	4b4c      	ldr	r3, [pc, #304]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f003 030c 	and.w	r3, r3, #12
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800824a:	4b49      	ldr	r3, [pc, #292]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f003 030c 	and.w	r3, r3, #12
 8008252:	2b08      	cmp	r3, #8
 8008254:	d11c      	bne.n	8008290 <HAL_RCC_OscConfig+0x18c>
 8008256:	4b46      	ldr	r3, [pc, #280]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d116      	bne.n	8008290 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008262:	4b43      	ldr	r3, [pc, #268]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d005      	beq.n	800827a <HAL_RCC_OscConfig+0x176>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d001      	beq.n	800827a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e1ba      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800827a:	4b3d      	ldr	r3, [pc, #244]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	4939      	ldr	r1, [pc, #228]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 800828a:	4313      	orrs	r3, r2
 800828c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800828e:	e03a      	b.n	8008306 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d020      	beq.n	80082da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008298:	4b36      	ldr	r3, [pc, #216]	; (8008374 <HAL_RCC_OscConfig+0x270>)
 800829a:	2201      	movs	r2, #1
 800829c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800829e:	f7fe fd9f 	bl	8006de0 <HAL_GetTick>
 80082a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082a4:	e008      	b.n	80082b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082a6:	f7fe fd9b 	bl	8006de0 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e19b      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082b8:	4b2d      	ldr	r3, [pc, #180]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0f0      	beq.n	80082a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082c4:	4b2a      	ldr	r3, [pc, #168]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	00db      	lsls	r3, r3, #3
 80082d2:	4927      	ldr	r1, [pc, #156]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	600b      	str	r3, [r1, #0]
 80082d8:	e015      	b.n	8008306 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082da:	4b26      	ldr	r3, [pc, #152]	; (8008374 <HAL_RCC_OscConfig+0x270>)
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082e0:	f7fe fd7e 	bl	8006de0 <HAL_GetTick>
 80082e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082e6:	e008      	b.n	80082fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082e8:	f7fe fd7a 	bl	8006de0 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e17a      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082fa:	4b1d      	ldr	r3, [pc, #116]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1f0      	bne.n	80082e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0308 	and.w	r3, r3, #8
 800830e:	2b00      	cmp	r3, #0
 8008310:	d03a      	beq.n	8008388 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d019      	beq.n	800834e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800831a:	4b17      	ldr	r3, [pc, #92]	; (8008378 <HAL_RCC_OscConfig+0x274>)
 800831c:	2201      	movs	r2, #1
 800831e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008320:	f7fe fd5e 	bl	8006de0 <HAL_GetTick>
 8008324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008326:	e008      	b.n	800833a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008328:	f7fe fd5a 	bl	8006de0 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b02      	cmp	r3, #2
 8008334:	d901      	bls.n	800833a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e15a      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800833a:	4b0d      	ldr	r3, [pc, #52]	; (8008370 <HAL_RCC_OscConfig+0x26c>)
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	f003 0302 	and.w	r3, r3, #2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0f0      	beq.n	8008328 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008346:	2001      	movs	r0, #1
 8008348:	f000 fad8 	bl	80088fc <RCC_Delay>
 800834c:	e01c      	b.n	8008388 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800834e:	4b0a      	ldr	r3, [pc, #40]	; (8008378 <HAL_RCC_OscConfig+0x274>)
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008354:	f7fe fd44 	bl	8006de0 <HAL_GetTick>
 8008358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800835a:	e00f      	b.n	800837c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800835c:	f7fe fd40 	bl	8006de0 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b02      	cmp	r3, #2
 8008368:	d908      	bls.n	800837c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e140      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
 800836e:	bf00      	nop
 8008370:	40021000 	.word	0x40021000
 8008374:	42420000 	.word	0x42420000
 8008378:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800837c:	4b9e      	ldr	r3, [pc, #632]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e9      	bne.n	800835c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 80a6 	beq.w	80084e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008396:	2300      	movs	r3, #0
 8008398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800839a:	4b97      	ldr	r3, [pc, #604]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10d      	bne.n	80083c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083a6:	4b94      	ldr	r3, [pc, #592]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	4a93      	ldr	r2, [pc, #588]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 80083ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083b0:	61d3      	str	r3, [r2, #28]
 80083b2:	4b91      	ldr	r3, [pc, #580]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ba:	60bb      	str	r3, [r7, #8]
 80083bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083be:	2301      	movs	r3, #1
 80083c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083c2:	4b8e      	ldr	r3, [pc, #568]	; (80085fc <HAL_RCC_OscConfig+0x4f8>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d118      	bne.n	8008400 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083ce:	4b8b      	ldr	r3, [pc, #556]	; (80085fc <HAL_RCC_OscConfig+0x4f8>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a8a      	ldr	r2, [pc, #552]	; (80085fc <HAL_RCC_OscConfig+0x4f8>)
 80083d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083da:	f7fe fd01 	bl	8006de0 <HAL_GetTick>
 80083de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083e0:	e008      	b.n	80083f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083e2:	f7fe fcfd 	bl	8006de0 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	2b64      	cmp	r3, #100	; 0x64
 80083ee:	d901      	bls.n	80083f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e0fd      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083f4:	4b81      	ldr	r3, [pc, #516]	; (80085fc <HAL_RCC_OscConfig+0x4f8>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0f0      	beq.n	80083e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d106      	bne.n	8008416 <HAL_RCC_OscConfig+0x312>
 8008408:	4b7b      	ldr	r3, [pc, #492]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	4a7a      	ldr	r2, [pc, #488]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 800840e:	f043 0301 	orr.w	r3, r3, #1
 8008412:	6213      	str	r3, [r2, #32]
 8008414:	e02d      	b.n	8008472 <HAL_RCC_OscConfig+0x36e>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10c      	bne.n	8008438 <HAL_RCC_OscConfig+0x334>
 800841e:	4b76      	ldr	r3, [pc, #472]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	4a75      	ldr	r2, [pc, #468]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 8008424:	f023 0301 	bic.w	r3, r3, #1
 8008428:	6213      	str	r3, [r2, #32]
 800842a:	4b73      	ldr	r3, [pc, #460]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	4a72      	ldr	r2, [pc, #456]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 8008430:	f023 0304 	bic.w	r3, r3, #4
 8008434:	6213      	str	r3, [r2, #32]
 8008436:	e01c      	b.n	8008472 <HAL_RCC_OscConfig+0x36e>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	2b05      	cmp	r3, #5
 800843e:	d10c      	bne.n	800845a <HAL_RCC_OscConfig+0x356>
 8008440:	4b6d      	ldr	r3, [pc, #436]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	4a6c      	ldr	r2, [pc, #432]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 8008446:	f043 0304 	orr.w	r3, r3, #4
 800844a:	6213      	str	r3, [r2, #32]
 800844c:	4b6a      	ldr	r3, [pc, #424]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	4a69      	ldr	r2, [pc, #420]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 8008452:	f043 0301 	orr.w	r3, r3, #1
 8008456:	6213      	str	r3, [r2, #32]
 8008458:	e00b      	b.n	8008472 <HAL_RCC_OscConfig+0x36e>
 800845a:	4b67      	ldr	r3, [pc, #412]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	4a66      	ldr	r2, [pc, #408]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 8008460:	f023 0301 	bic.w	r3, r3, #1
 8008464:	6213      	str	r3, [r2, #32]
 8008466:	4b64      	ldr	r3, [pc, #400]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	4a63      	ldr	r2, [pc, #396]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 800846c:	f023 0304 	bic.w	r3, r3, #4
 8008470:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d015      	beq.n	80084a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800847a:	f7fe fcb1 	bl	8006de0 <HAL_GetTick>
 800847e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008480:	e00a      	b.n	8008498 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008482:	f7fe fcad 	bl	8006de0 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008490:	4293      	cmp	r3, r2
 8008492:	d901      	bls.n	8008498 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e0ab      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008498:	4b57      	ldr	r3, [pc, #348]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	f003 0302 	and.w	r3, r3, #2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d0ee      	beq.n	8008482 <HAL_RCC_OscConfig+0x37e>
 80084a4:	e014      	b.n	80084d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084a6:	f7fe fc9b 	bl	8006de0 <HAL_GetTick>
 80084aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084ac:	e00a      	b.n	80084c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084ae:	f7fe fc97 	bl	8006de0 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80084bc:	4293      	cmp	r3, r2
 80084be:	d901      	bls.n	80084c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e095      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084c4:	4b4c      	ldr	r3, [pc, #304]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1ee      	bne.n	80084ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80084d0:	7dfb      	ldrb	r3, [r7, #23]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d105      	bne.n	80084e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084d6:	4b48      	ldr	r3, [pc, #288]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	4a47      	ldr	r2, [pc, #284]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 80084dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 8081 	beq.w	80085ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084ec:	4b42      	ldr	r3, [pc, #264]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f003 030c 	and.w	r3, r3, #12
 80084f4:	2b08      	cmp	r3, #8
 80084f6:	d061      	beq.n	80085bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d146      	bne.n	800858e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008500:	4b3f      	ldr	r3, [pc, #252]	; (8008600 <HAL_RCC_OscConfig+0x4fc>)
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008506:	f7fe fc6b 	bl	8006de0 <HAL_GetTick>
 800850a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800850c:	e008      	b.n	8008520 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800850e:	f7fe fc67 	bl	8006de0 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	2b02      	cmp	r3, #2
 800851a:	d901      	bls.n	8008520 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e067      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008520:	4b35      	ldr	r3, [pc, #212]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1f0      	bne.n	800850e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008534:	d108      	bne.n	8008548 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008536:	4b30      	ldr	r3, [pc, #192]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	492d      	ldr	r1, [pc, #180]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 8008544:	4313      	orrs	r3, r2
 8008546:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008548:	4b2b      	ldr	r3, [pc, #172]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a19      	ldr	r1, [r3, #32]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	430b      	orrs	r3, r1
 800855a:	4927      	ldr	r1, [pc, #156]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 800855c:	4313      	orrs	r3, r2
 800855e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008560:	4b27      	ldr	r3, [pc, #156]	; (8008600 <HAL_RCC_OscConfig+0x4fc>)
 8008562:	2201      	movs	r2, #1
 8008564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008566:	f7fe fc3b 	bl	8006de0 <HAL_GetTick>
 800856a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800856c:	e008      	b.n	8008580 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800856e:	f7fe fc37 	bl	8006de0 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b02      	cmp	r3, #2
 800857a:	d901      	bls.n	8008580 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e037      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008580:	4b1d      	ldr	r3, [pc, #116]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0f0      	beq.n	800856e <HAL_RCC_OscConfig+0x46a>
 800858c:	e02f      	b.n	80085ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800858e:	4b1c      	ldr	r3, [pc, #112]	; (8008600 <HAL_RCC_OscConfig+0x4fc>)
 8008590:	2200      	movs	r2, #0
 8008592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008594:	f7fe fc24 	bl	8006de0 <HAL_GetTick>
 8008598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800859a:	e008      	b.n	80085ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800859c:	f7fe fc20 	bl	8006de0 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d901      	bls.n	80085ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e020      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80085ae:	4b12      	ldr	r3, [pc, #72]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1f0      	bne.n	800859c <HAL_RCC_OscConfig+0x498>
 80085ba:	e018      	b.n	80085ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e013      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80085c8:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <HAL_RCC_OscConfig+0x4f4>)
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d106      	bne.n	80085ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d001      	beq.n	80085ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e000      	b.n	80085f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	40021000 	.word	0x40021000
 80085fc:	40007000 	.word	0x40007000
 8008600:	42420060 	.word	0x42420060

08008604 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e0d0      	b.n	80087ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008618:	4b6a      	ldr	r3, [pc, #424]	; (80087c4 <HAL_RCC_ClockConfig+0x1c0>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0307 	and.w	r3, r3, #7
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	429a      	cmp	r2, r3
 8008624:	d910      	bls.n	8008648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008626:	4b67      	ldr	r3, [pc, #412]	; (80087c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f023 0207 	bic.w	r2, r3, #7
 800862e:	4965      	ldr	r1, [pc, #404]	; (80087c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	4313      	orrs	r3, r2
 8008634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008636:	4b63      	ldr	r3, [pc, #396]	; (80087c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0307 	and.w	r3, r3, #7
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d001      	beq.n	8008648 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e0b8      	b.n	80087ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0302 	and.w	r3, r3, #2
 8008650:	2b00      	cmp	r3, #0
 8008652:	d020      	beq.n	8008696 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0304 	and.w	r3, r3, #4
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008660:	4b59      	ldr	r3, [pc, #356]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	4a58      	ldr	r2, [pc, #352]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008666:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800866a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0308 	and.w	r3, r3, #8
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008678:	4b53      	ldr	r3, [pc, #332]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	4a52      	ldr	r2, [pc, #328]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 800867e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008682:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008684:	4b50      	ldr	r3, [pc, #320]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	494d      	ldr	r1, [pc, #308]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008692:	4313      	orrs	r3, r2
 8008694:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d040      	beq.n	8008724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d107      	bne.n	80086ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086aa:	4b47      	ldr	r3, [pc, #284]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d115      	bne.n	80086e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e07f      	b.n	80087ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d107      	bne.n	80086d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086c2:	4b41      	ldr	r3, [pc, #260]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d109      	bne.n	80086e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e073      	b.n	80087ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086d2:	4b3d      	ldr	r3, [pc, #244]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e06b      	b.n	80087ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086e2:	4b39      	ldr	r3, [pc, #228]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f023 0203 	bic.w	r2, r3, #3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	4936      	ldr	r1, [pc, #216]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80086f4:	f7fe fb74 	bl	8006de0 <HAL_GetTick>
 80086f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086fa:	e00a      	b.n	8008712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086fc:	f7fe fb70 	bl	8006de0 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	f241 3288 	movw	r2, #5000	; 0x1388
 800870a:	4293      	cmp	r3, r2
 800870c:	d901      	bls.n	8008712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e053      	b.n	80087ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008712:	4b2d      	ldr	r3, [pc, #180]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f003 020c 	and.w	r2, r3, #12
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	429a      	cmp	r2, r3
 8008722:	d1eb      	bne.n	80086fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008724:	4b27      	ldr	r3, [pc, #156]	; (80087c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0307 	and.w	r3, r3, #7
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	429a      	cmp	r2, r3
 8008730:	d210      	bcs.n	8008754 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008732:	4b24      	ldr	r3, [pc, #144]	; (80087c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f023 0207 	bic.w	r2, r3, #7
 800873a:	4922      	ldr	r1, [pc, #136]	; (80087c4 <HAL_RCC_ClockConfig+0x1c0>)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	4313      	orrs	r3, r2
 8008740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008742:	4b20      	ldr	r3, [pc, #128]	; (80087c4 <HAL_RCC_ClockConfig+0x1c0>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	429a      	cmp	r2, r3
 800874e:	d001      	beq.n	8008754 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e032      	b.n	80087ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d008      	beq.n	8008772 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008760:	4b19      	ldr	r3, [pc, #100]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	4916      	ldr	r1, [pc, #88]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 800876e:	4313      	orrs	r3, r2
 8008770:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 0308 	and.w	r3, r3, #8
 800877a:	2b00      	cmp	r3, #0
 800877c:	d009      	beq.n	8008792 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800877e:	4b12      	ldr	r3, [pc, #72]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	00db      	lsls	r3, r3, #3
 800878c:	490e      	ldr	r1, [pc, #56]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 800878e:	4313      	orrs	r3, r2
 8008790:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008792:	f000 f821 	bl	80087d8 <HAL_RCC_GetSysClockFreq>
 8008796:	4602      	mov	r2, r0
 8008798:	4b0b      	ldr	r3, [pc, #44]	; (80087c8 <HAL_RCC_ClockConfig+0x1c4>)
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	091b      	lsrs	r3, r3, #4
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	490a      	ldr	r1, [pc, #40]	; (80087cc <HAL_RCC_ClockConfig+0x1c8>)
 80087a4:	5ccb      	ldrb	r3, [r1, r3]
 80087a6:	fa22 f303 	lsr.w	r3, r2, r3
 80087aa:	4a09      	ldr	r2, [pc, #36]	; (80087d0 <HAL_RCC_ClockConfig+0x1cc>)
 80087ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80087ae:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <HAL_RCC_ClockConfig+0x1d0>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe fad2 	bl	8006d5c <HAL_InitTick>

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	40022000 	.word	0x40022000
 80087c8:	40021000 	.word	0x40021000
 80087cc:	0800e4b0 	.word	0x0800e4b0
 80087d0:	20000004 	.word	0x20000004
 80087d4:	20000008 	.word	0x20000008

080087d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087d8:	b490      	push	{r4, r7}
 80087da:	b08a      	sub	sp, #40	; 0x28
 80087dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80087de:	4b2a      	ldr	r3, [pc, #168]	; (8008888 <HAL_RCC_GetSysClockFreq+0xb0>)
 80087e0:	1d3c      	adds	r4, r7, #4
 80087e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80087e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80087e8:	f240 2301 	movw	r3, #513	; 0x201
 80087ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	61fb      	str	r3, [r7, #28]
 80087f2:	2300      	movs	r3, #0
 80087f4:	61bb      	str	r3, [r7, #24]
 80087f6:	2300      	movs	r3, #0
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24
 80087fa:	2300      	movs	r3, #0
 80087fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008802:	4b22      	ldr	r3, [pc, #136]	; (800888c <HAL_RCC_GetSysClockFreq+0xb4>)
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	f003 030c 	and.w	r3, r3, #12
 800880e:	2b04      	cmp	r3, #4
 8008810:	d002      	beq.n	8008818 <HAL_RCC_GetSysClockFreq+0x40>
 8008812:	2b08      	cmp	r3, #8
 8008814:	d003      	beq.n	800881e <HAL_RCC_GetSysClockFreq+0x46>
 8008816:	e02d      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008818:	4b1d      	ldr	r3, [pc, #116]	; (8008890 <HAL_RCC_GetSysClockFreq+0xb8>)
 800881a:	623b      	str	r3, [r7, #32]
      break;
 800881c:	e02d      	b.n	800887a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	0c9b      	lsrs	r3, r3, #18
 8008822:	f003 030f 	and.w	r3, r3, #15
 8008826:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800882a:	4413      	add	r3, r2
 800882c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008830:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d013      	beq.n	8008864 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800883c:	4b13      	ldr	r3, [pc, #76]	; (800888c <HAL_RCC_GetSysClockFreq+0xb4>)
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	0c5b      	lsrs	r3, r3, #17
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800884a:	4413      	add	r3, r2
 800884c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008850:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	4a0e      	ldr	r2, [pc, #56]	; (8008890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008856:	fb02 f203 	mul.w	r2, r2, r3
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
 8008862:	e004      	b.n	800886e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	4a0b      	ldr	r2, [pc, #44]	; (8008894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008868:	fb02 f303 	mul.w	r3, r2, r3
 800886c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	623b      	str	r3, [r7, #32]
      break;
 8008872:	e002      	b.n	800887a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008874:	4b06      	ldr	r3, [pc, #24]	; (8008890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008876:	623b      	str	r3, [r7, #32]
      break;
 8008878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800887a:	6a3b      	ldr	r3, [r7, #32]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3728      	adds	r7, #40	; 0x28
 8008880:	46bd      	mov	sp, r7
 8008882:	bc90      	pop	{r4, r7}
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	0800cc70 	.word	0x0800cc70
 800888c:	40021000 	.word	0x40021000
 8008890:	007a1200 	.word	0x007a1200
 8008894:	003d0900 	.word	0x003d0900

08008898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008898:	b480      	push	{r7}
 800889a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800889c:	4b02      	ldr	r3, [pc, #8]	; (80088a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800889e:	681b      	ldr	r3, [r3, #0]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bc80      	pop	{r7}
 80088a6:	4770      	bx	lr
 80088a8:	20000004 	.word	0x20000004

080088ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80088b0:	f7ff fff2 	bl	8008898 <HAL_RCC_GetHCLKFreq>
 80088b4:	4602      	mov	r2, r0
 80088b6:	4b05      	ldr	r3, [pc, #20]	; (80088cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	0a1b      	lsrs	r3, r3, #8
 80088bc:	f003 0307 	and.w	r3, r3, #7
 80088c0:	4903      	ldr	r1, [pc, #12]	; (80088d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80088c2:	5ccb      	ldrb	r3, [r1, r3]
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	40021000 	.word	0x40021000
 80088d0:	0800e4c0 	.word	0x0800e4c0

080088d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80088d8:	f7ff ffde 	bl	8008898 <HAL_RCC_GetHCLKFreq>
 80088dc:	4602      	mov	r2, r0
 80088de:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	0adb      	lsrs	r3, r3, #11
 80088e4:	f003 0307 	and.w	r3, r3, #7
 80088e8:	4903      	ldr	r1, [pc, #12]	; (80088f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088ea:	5ccb      	ldrb	r3, [r1, r3]
 80088ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	40021000 	.word	0x40021000
 80088f8:	0800e4c0 	.word	0x0800e4c0

080088fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008904:	4b0a      	ldr	r3, [pc, #40]	; (8008930 <RCC_Delay+0x34>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a0a      	ldr	r2, [pc, #40]	; (8008934 <RCC_Delay+0x38>)
 800890a:	fba2 2303 	umull	r2, r3, r2, r3
 800890e:	0a5b      	lsrs	r3, r3, #9
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	fb02 f303 	mul.w	r3, r2, r3
 8008916:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008918:	bf00      	nop
  }
  while (Delay --);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	1e5a      	subs	r2, r3, #1
 800891e:	60fa      	str	r2, [r7, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1f9      	bne.n	8008918 <RCC_Delay+0x1c>
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	bc80      	pop	{r7}
 800892e:	4770      	bx	lr
 8008930:	20000004 	.word	0x20000004
 8008934:	10624dd3 	.word	0x10624dd3

08008938 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	613b      	str	r3, [r7, #16]
 8008944:	2300      	movs	r3, #0
 8008946:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b00      	cmp	r3, #0
 8008952:	d07d      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008954:	2300      	movs	r3, #0
 8008956:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008958:	4b4f      	ldr	r3, [pc, #316]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800895a:	69db      	ldr	r3, [r3, #28]
 800895c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10d      	bne.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008964:	4b4c      	ldr	r3, [pc, #304]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008966:	69db      	ldr	r3, [r3, #28]
 8008968:	4a4b      	ldr	r2, [pc, #300]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800896a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800896e:	61d3      	str	r3, [r2, #28]
 8008970:	4b49      	ldr	r3, [pc, #292]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008978:	60bb      	str	r3, [r7, #8]
 800897a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800897c:	2301      	movs	r3, #1
 800897e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008980:	4b46      	ldr	r3, [pc, #280]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008988:	2b00      	cmp	r3, #0
 800898a:	d118      	bne.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800898c:	4b43      	ldr	r3, [pc, #268]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a42      	ldr	r2, [pc, #264]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008996:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008998:	f7fe fa22 	bl	8006de0 <HAL_GetTick>
 800899c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800899e:	e008      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089a0:	f7fe fa1e 	bl	8006de0 <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	2b64      	cmp	r3, #100	; 0x64
 80089ac:	d901      	bls.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e06d      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089b2:	4b3a      	ldr	r3, [pc, #232]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0f0      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80089be:	4b36      	ldr	r3, [pc, #216]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d02e      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d027      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089dc:	4b2e      	ldr	r3, [pc, #184]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089de:	6a1b      	ldr	r3, [r3, #32]
 80089e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80089e6:	4b2e      	ldr	r3, [pc, #184]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80089e8:	2201      	movs	r2, #1
 80089ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80089ec:	4b2c      	ldr	r3, [pc, #176]	; (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80089f2:	4a29      	ldr	r2, [pc, #164]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d014      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a02:	f7fe f9ed 	bl	8006de0 <HAL_GetTick>
 8008a06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a08:	e00a      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a0a:	f7fe f9e9 	bl	8006de0 <HAL_GetTick>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d901      	bls.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e036      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a20:	4b1d      	ldr	r3, [pc, #116]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	f003 0302 	and.w	r3, r3, #2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d0ee      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a2c:	4b1a      	ldr	r3, [pc, #104]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	4917      	ldr	r1, [pc, #92]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008a3e:	7dfb      	ldrb	r3, [r7, #23]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d105      	bne.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a44:	4b14      	ldr	r3, [pc, #80]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a46:	69db      	ldr	r3, [r3, #28]
 8008a48:	4a13      	ldr	r2, [pc, #76]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d008      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a5c:	4b0e      	ldr	r3, [pc, #56]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	490b      	ldr	r1, [pc, #44]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0310 	and.w	r3, r3, #16
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d008      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a7a:	4b07      	ldr	r3, [pc, #28]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	4904      	ldr	r1, [pc, #16]	; (8008a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	40021000 	.word	0x40021000
 8008a9c:	40007000 	.word	0x40007000
 8008aa0:	42420440 	.word	0x42420440

08008aa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008aa4:	b590      	push	{r4, r7, lr}
 8008aa6:	b08d      	sub	sp, #52	; 0x34
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008aac:	4b6b      	ldr	r3, [pc, #428]	; (8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8008aae:	f107 040c 	add.w	r4, r7, #12
 8008ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008ab8:	f240 2301 	movw	r3, #513	; 0x201
 8008abc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008aca:	2300      	movs	r3, #0
 8008acc:	61fb      	str	r3, [r7, #28]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	2b0f      	cmp	r3, #15
 8008ad8:	f200 80b6 	bhi.w	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008adc:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8008ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae2:	bf00      	nop
 8008ae4:	08008bc7 	.word	0x08008bc7
 8008ae8:	08008c2d 	.word	0x08008c2d
 8008aec:	08008c49 	.word	0x08008c49
 8008af0:	08008bb7 	.word	0x08008bb7
 8008af4:	08008c49 	.word	0x08008c49
 8008af8:	08008c49 	.word	0x08008c49
 8008afc:	08008c49 	.word	0x08008c49
 8008b00:	08008bbf 	.word	0x08008bbf
 8008b04:	08008c49 	.word	0x08008c49
 8008b08:	08008c49 	.word	0x08008c49
 8008b0c:	08008c49 	.word	0x08008c49
 8008b10:	08008c49 	.word	0x08008c49
 8008b14:	08008c49 	.word	0x08008c49
 8008b18:	08008c49 	.word	0x08008c49
 8008b1c:	08008c49 	.word	0x08008c49
 8008b20:	08008b25 	.word	0x08008b25
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8008b24:	4b4e      	ldr	r3, [pc, #312]	; (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008b2a:	4b4d      	ldr	r3, [pc, #308]	; (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 808a 	beq.w	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	0c9b      	lsrs	r3, r3, #18
 8008b3c:	f003 030f 	and.w	r3, r3, #15
 8008b40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008b44:	4413      	add	r3, r2
 8008b46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008b4a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d018      	beq.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008b56:	4b42      	ldr	r3, [pc, #264]	; (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	0c5b      	lsrs	r3, r3, #17
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008b64:	4413      	add	r3, r2
 8008b66:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00d      	beq.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008b76:	4a3b      	ldr	r2, [pc, #236]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	fb02 f303 	mul.w	r3, r2, r3
 8008b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b86:	e004      	b.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	4a37      	ldr	r2, [pc, #220]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8008b8c:	fb02 f303 	mul.w	r3, r2, r3
 8008b90:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008b92:	4b33      	ldr	r3, [pc, #204]	; (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b9e:	d102      	bne.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8008ba4:	e052      	b.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8008ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba8:	005b      	lsls	r3, r3, #1
 8008baa:	4a30      	ldr	r2, [pc, #192]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8008bac:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb0:	085b      	lsrs	r3, r3, #1
 8008bb2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008bb4:	e04a      	b.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8008bb6:	f7ff fe0f 	bl	80087d8 <HAL_RCC_GetSysClockFreq>
 8008bba:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008bbc:	e049      	b.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8008bbe:	f7ff fe0b 	bl	80087d8 <HAL_RCC_GetSysClockFreq>
 8008bc2:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008bc4:	e045      	b.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8008bc6:	4b26      	ldr	r3, [pc, #152]	; (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bd6:	d108      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8008be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008be8:	e01f      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bf4:	d109      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008bf6:	4b1a      	ldr	r3, [pc, #104]	; (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8008c02:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c08:	e00f      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c14:	d11c      	bne.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008c16:	4b12      	ldr	r3, [pc, #72]	; (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d016      	beq.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8008c22:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008c26:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8008c28:	e012      	b.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008c2a:	e011      	b.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008c2c:	f7ff fe52 	bl	80088d4 <HAL_RCC_GetPCLK2Freq>
 8008c30:	4602      	mov	r2, r0
 8008c32:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	0b9b      	lsrs	r3, r3, #14
 8008c38:	f003 0303 	and.w	r3, r3, #3
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	005b      	lsls	r3, r3, #1
 8008c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c44:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008c46:	e004      	b.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8008c48:	bf00      	nop
 8008c4a:	e002      	b.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8008c4c:	bf00      	nop
 8008c4e:	e000      	b.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8008c50:	bf00      	nop
    }
  }
  return (frequency);
 8008c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3734      	adds	r7, #52	; 0x34
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd90      	pop	{r4, r7, pc}
 8008c5c:	0800cc80 	.word	0x0800cc80
 8008c60:	40021000 	.word	0x40021000
 8008c64:	007a1200 	.word	0x007a1200
 8008c68:	003d0900 	.word	0x003d0900
 8008c6c:	aaaaaaab 	.word	0xaaaaaaab

08008c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e041      	b.n	8008d06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d106      	bne.n	8008c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7fd fe9e 	bl	80069d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3304      	adds	r3, #4
 8008cac:	4619      	mov	r1, r3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	f000 fa7e 	bl	80091b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
	...

08008d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d001      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e044      	b.n	8008db2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f042 0201 	orr.w	r2, r2, #1
 8008d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a1d      	ldr	r2, [pc, #116]	; (8008dbc <HAL_TIM_Base_Start_IT+0xac>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d018      	beq.n	8008d7c <HAL_TIM_Base_Start_IT+0x6c>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a1c      	ldr	r2, [pc, #112]	; (8008dc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d013      	beq.n	8008d7c <HAL_TIM_Base_Start_IT+0x6c>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d5c:	d00e      	beq.n	8008d7c <HAL_TIM_Base_Start_IT+0x6c>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a18      	ldr	r2, [pc, #96]	; (8008dc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d009      	beq.n	8008d7c <HAL_TIM_Base_Start_IT+0x6c>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a16      	ldr	r2, [pc, #88]	; (8008dc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d004      	beq.n	8008d7c <HAL_TIM_Base_Start_IT+0x6c>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a15      	ldr	r2, [pc, #84]	; (8008dcc <HAL_TIM_Base_Start_IT+0xbc>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d111      	bne.n	8008da0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2b06      	cmp	r3, #6
 8008d8c:	d010      	beq.n	8008db0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f042 0201 	orr.w	r2, r2, #1
 8008d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d9e:	e007      	b.n	8008db0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0201 	orr.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bc80      	pop	{r7}
 8008dba:	4770      	bx	lr
 8008dbc:	40012c00 	.word	0x40012c00
 8008dc0:	40013400 	.word	0x40013400
 8008dc4:	40000400 	.word	0x40000400
 8008dc8:	40000800 	.word	0x40000800
 8008dcc:	40000c00 	.word	0x40000c00

08008dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	f003 0302 	and.w	r3, r3, #2
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d122      	bne.n	8008e2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d11b      	bne.n	8008e2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f06f 0202 	mvn.w	r2, #2
 8008dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	f003 0303 	and.w	r3, r3, #3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f9b1 	bl	800917a <HAL_TIM_IC_CaptureCallback>
 8008e18:	e005      	b.n	8008e26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f9a4 	bl	8009168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f9b3 	bl	800918c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	f003 0304 	and.w	r3, r3, #4
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d122      	bne.n	8008e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d11b      	bne.n	8008e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f06f 0204 	mvn.w	r2, #4
 8008e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2202      	movs	r2, #2
 8008e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f987 	bl	800917a <HAL_TIM_IC_CaptureCallback>
 8008e6c:	e005      	b.n	8008e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f97a 	bl	8009168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f989 	bl	800918c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	f003 0308 	and.w	r3, r3, #8
 8008e8a:	2b08      	cmp	r3, #8
 8008e8c:	d122      	bne.n	8008ed4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f003 0308 	and.w	r3, r3, #8
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d11b      	bne.n	8008ed4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f06f 0208 	mvn.w	r2, #8
 8008ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2204      	movs	r2, #4
 8008eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f95d 	bl	800917a <HAL_TIM_IC_CaptureCallback>
 8008ec0:	e005      	b.n	8008ece <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f950 	bl	8009168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f95f 	bl	800918c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	f003 0310 	and.w	r3, r3, #16
 8008ede:	2b10      	cmp	r3, #16
 8008ee0:	d122      	bne.n	8008f28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	f003 0310 	and.w	r3, r3, #16
 8008eec:	2b10      	cmp	r3, #16
 8008eee:	d11b      	bne.n	8008f28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f06f 0210 	mvn.w	r2, #16
 8008ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2208      	movs	r2, #8
 8008efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f933 	bl	800917a <HAL_TIM_IC_CaptureCallback>
 8008f14:	e005      	b.n	8008f22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f926 	bl	8009168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f935 	bl	800918c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d10e      	bne.n	8008f54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d107      	bne.n	8008f54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f06f 0201 	mvn.w	r2, #1
 8008f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7fd fc3a 	bl	80067c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f5e:	2b80      	cmp	r3, #128	; 0x80
 8008f60:	d10e      	bne.n	8008f80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f6c:	2b80      	cmp	r3, #128	; 0x80
 8008f6e:	d107      	bne.n	8008f80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa9d 	bl	80094ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8a:	2b40      	cmp	r3, #64	; 0x40
 8008f8c:	d10e      	bne.n	8008fac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f98:	2b40      	cmp	r3, #64	; 0x40
 8008f9a:	d107      	bne.n	8008fac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f8f9 	bl	800919e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f003 0320 	and.w	r3, r3, #32
 8008fb6:	2b20      	cmp	r3, #32
 8008fb8:	d10e      	bne.n	8008fd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b20      	cmp	r3, #32
 8008fc6:	d107      	bne.n	8008fd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f06f 0220 	mvn.w	r2, #32
 8008fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fa68 	bl	80094a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_TIM_ConfigClockSource+0x18>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e0b3      	b.n	8009160 <HAL_TIM_ConfigClockSource+0x180>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2202      	movs	r2, #2
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009016:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800901e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009030:	d03e      	beq.n	80090b0 <HAL_TIM_ConfigClockSource+0xd0>
 8009032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009036:	f200 8087 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x168>
 800903a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800903e:	f000 8085 	beq.w	800914c <HAL_TIM_ConfigClockSource+0x16c>
 8009042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009046:	d87f      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x168>
 8009048:	2b70      	cmp	r3, #112	; 0x70
 800904a:	d01a      	beq.n	8009082 <HAL_TIM_ConfigClockSource+0xa2>
 800904c:	2b70      	cmp	r3, #112	; 0x70
 800904e:	d87b      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x168>
 8009050:	2b60      	cmp	r3, #96	; 0x60
 8009052:	d050      	beq.n	80090f6 <HAL_TIM_ConfigClockSource+0x116>
 8009054:	2b60      	cmp	r3, #96	; 0x60
 8009056:	d877      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x168>
 8009058:	2b50      	cmp	r3, #80	; 0x50
 800905a:	d03c      	beq.n	80090d6 <HAL_TIM_ConfigClockSource+0xf6>
 800905c:	2b50      	cmp	r3, #80	; 0x50
 800905e:	d873      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x168>
 8009060:	2b40      	cmp	r3, #64	; 0x40
 8009062:	d058      	beq.n	8009116 <HAL_TIM_ConfigClockSource+0x136>
 8009064:	2b40      	cmp	r3, #64	; 0x40
 8009066:	d86f      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x168>
 8009068:	2b30      	cmp	r3, #48	; 0x30
 800906a:	d064      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x156>
 800906c:	2b30      	cmp	r3, #48	; 0x30
 800906e:	d86b      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x168>
 8009070:	2b20      	cmp	r3, #32
 8009072:	d060      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x156>
 8009074:	2b20      	cmp	r3, #32
 8009076:	d867      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x168>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d05c      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x156>
 800907c:	2b10      	cmp	r3, #16
 800907e:	d05a      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009080:	e062      	b.n	8009148 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6818      	ldr	r0, [r3, #0]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	6899      	ldr	r1, [r3, #8]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	f000 f97e 	bl	8009392 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	609a      	str	r2, [r3, #8]
      break;
 80090ae:	e04e      	b.n	800914e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6818      	ldr	r0, [r3, #0]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	6899      	ldr	r1, [r3, #8]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	f000 f967 	bl	8009392 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090d2:	609a      	str	r2, [r3, #8]
      break;
 80090d4:	e03b      	b.n	800914e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	6859      	ldr	r1, [r3, #4]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	461a      	mov	r2, r3
 80090e4:	f000 f8de 	bl	80092a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2150      	movs	r1, #80	; 0x50
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f935 	bl	800935e <TIM_ITRx_SetConfig>
      break;
 80090f4:	e02b      	b.n	800914e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6818      	ldr	r0, [r3, #0]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	6859      	ldr	r1, [r3, #4]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	461a      	mov	r2, r3
 8009104:	f000 f8fc 	bl	8009300 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2160      	movs	r1, #96	; 0x60
 800910e:	4618      	mov	r0, r3
 8009110:	f000 f925 	bl	800935e <TIM_ITRx_SetConfig>
      break;
 8009114:	e01b      	b.n	800914e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6818      	ldr	r0, [r3, #0]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	6859      	ldr	r1, [r3, #4]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	461a      	mov	r2, r3
 8009124:	f000 f8be 	bl	80092a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2140      	movs	r1, #64	; 0x40
 800912e:	4618      	mov	r0, r3
 8009130:	f000 f915 	bl	800935e <TIM_ITRx_SetConfig>
      break;
 8009134:	e00b      	b.n	800914e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f000 f90c 	bl	800935e <TIM_ITRx_SetConfig>
        break;
 8009146:	e002      	b.n	800914e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009148:	bf00      	nop
 800914a:	e000      	b.n	800914e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800914c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	bc80      	pop	{r7}
 8009178:	4770      	bx	lr

0800917a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	bc80      	pop	{r7}
 800918a:	4770      	bx	lr

0800918c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	bc80      	pop	{r7}
 800919c:	4770      	bx	lr

0800919e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091a6:	bf00      	nop
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bc80      	pop	{r7}
 80091ae:	4770      	bx	lr

080091b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a33      	ldr	r2, [pc, #204]	; (8009290 <TIM_Base_SetConfig+0xe0>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d013      	beq.n	80091f0 <TIM_Base_SetConfig+0x40>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a32      	ldr	r2, [pc, #200]	; (8009294 <TIM_Base_SetConfig+0xe4>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d00f      	beq.n	80091f0 <TIM_Base_SetConfig+0x40>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d6:	d00b      	beq.n	80091f0 <TIM_Base_SetConfig+0x40>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a2f      	ldr	r2, [pc, #188]	; (8009298 <TIM_Base_SetConfig+0xe8>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d007      	beq.n	80091f0 <TIM_Base_SetConfig+0x40>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a2e      	ldr	r2, [pc, #184]	; (800929c <TIM_Base_SetConfig+0xec>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d003      	beq.n	80091f0 <TIM_Base_SetConfig+0x40>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a2d      	ldr	r2, [pc, #180]	; (80092a0 <TIM_Base_SetConfig+0xf0>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d108      	bne.n	8009202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a22      	ldr	r2, [pc, #136]	; (8009290 <TIM_Base_SetConfig+0xe0>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d013      	beq.n	8009232 <TIM_Base_SetConfig+0x82>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a21      	ldr	r2, [pc, #132]	; (8009294 <TIM_Base_SetConfig+0xe4>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d00f      	beq.n	8009232 <TIM_Base_SetConfig+0x82>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009218:	d00b      	beq.n	8009232 <TIM_Base_SetConfig+0x82>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a1e      	ldr	r2, [pc, #120]	; (8009298 <TIM_Base_SetConfig+0xe8>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d007      	beq.n	8009232 <TIM_Base_SetConfig+0x82>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a1d      	ldr	r2, [pc, #116]	; (800929c <TIM_Base_SetConfig+0xec>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d003      	beq.n	8009232 <TIM_Base_SetConfig+0x82>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a1c      	ldr	r2, [pc, #112]	; (80092a0 <TIM_Base_SetConfig+0xf0>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d108      	bne.n	8009244 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	4313      	orrs	r3, r2
 8009242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	4313      	orrs	r3, r2
 8009250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a09      	ldr	r2, [pc, #36]	; (8009290 <TIM_Base_SetConfig+0xe0>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d003      	beq.n	8009278 <TIM_Base_SetConfig+0xc8>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a08      	ldr	r2, [pc, #32]	; (8009294 <TIM_Base_SetConfig+0xe4>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d103      	bne.n	8009280 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	691a      	ldr	r2, [r3, #16]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	615a      	str	r2, [r3, #20]
}
 8009286:	bf00      	nop
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	bc80      	pop	{r7}
 800928e:	4770      	bx	lr
 8009290:	40012c00 	.word	0x40012c00
 8009294:	40013400 	.word	0x40013400
 8009298:	40000400 	.word	0x40000400
 800929c:	40000800 	.word	0x40000800
 80092a0:	40000c00 	.word	0x40000c00

080092a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6a1b      	ldr	r3, [r3, #32]
 80092b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	f023 0201 	bic.w	r2, r3, #1
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	011b      	lsls	r3, r3, #4
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f023 030a 	bic.w	r3, r3, #10
 80092e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	621a      	str	r2, [r3, #32]
}
 80092f6:	bf00      	nop
 80092f8:	371c      	adds	r7, #28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bc80      	pop	{r7}
 80092fe:	4770      	bx	lr

08009300 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	f023 0210 	bic.w	r2, r3, #16
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800932a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	031b      	lsls	r3, r3, #12
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	4313      	orrs	r3, r2
 8009334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800933c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	011b      	lsls	r3, r3, #4
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	4313      	orrs	r3, r2
 8009346:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	621a      	str	r2, [r3, #32]
}
 8009354:	bf00      	nop
 8009356:	371c      	adds	r7, #28
 8009358:	46bd      	mov	sp, r7
 800935a:	bc80      	pop	{r7}
 800935c:	4770      	bx	lr

0800935e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800935e:	b480      	push	{r7}
 8009360:	b085      	sub	sp, #20
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	4313      	orrs	r3, r2
 800937c:	f043 0307 	orr.w	r3, r3, #7
 8009380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	609a      	str	r2, [r3, #8]
}
 8009388:	bf00      	nop
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	bc80      	pop	{r7}
 8009390:	4770      	bx	lr

08009392 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009392:	b480      	push	{r7}
 8009394:	b087      	sub	sp, #28
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
 800939e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	021a      	lsls	r2, r3, #8
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	431a      	orrs	r2, r3
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	4313      	orrs	r3, r2
 80093be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	609a      	str	r2, [r3, #8]
}
 80093c6:	bf00      	nop
 80093c8:	371c      	adds	r7, #28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bc80      	pop	{r7}
 80093ce:	4770      	bx	lr

080093d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d101      	bne.n	80093e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093e4:	2302      	movs	r3, #2
 80093e6:	e050      	b.n	800948a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2202      	movs	r2, #2
 80093f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800940e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	4313      	orrs	r3, r2
 8009418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a1b      	ldr	r2, [pc, #108]	; (8009494 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d018      	beq.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a19      	ldr	r2, [pc, #100]	; (8009498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d013      	beq.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943e:	d00e      	beq.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a15      	ldr	r2, [pc, #84]	; (800949c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d009      	beq.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a14      	ldr	r2, [pc, #80]	; (80094a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d004      	beq.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a12      	ldr	r2, [pc, #72]	; (80094a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d10c      	bne.n	8009478 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009464:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	4313      	orrs	r3, r2
 800946e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	bc80      	pop	{r7}
 8009492:	4770      	bx	lr
 8009494:	40012c00 	.word	0x40012c00
 8009498:	40013400 	.word	0x40013400
 800949c:	40000400 	.word	0x40000400
 80094a0:	40000800 	.word	0x40000800
 80094a4:	40000c00 	.word	0x40000c00

080094a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bc80      	pop	{r7}
 80094b8:	4770      	bx	lr

080094ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094c2:	bf00      	nop
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bc80      	pop	{r7}
 80094ca:	4770      	bx	lr

080094cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e03f      	b.n	800955e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d106      	bne.n	80094f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7fd fa96 	bl	8006a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2224      	movs	r2, #36	; 0x24
 80094fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800950e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fc25 	bl	8009d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	691a      	ldr	r2, [r3, #16]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	695a      	ldr	r2, [r3, #20]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2220      	movs	r2, #32
 8009550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2220      	movs	r2, #32
 8009558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b08a      	sub	sp, #40	; 0x28
 800956a:	af02      	add	r7, sp, #8
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	603b      	str	r3, [r7, #0]
 8009572:	4613      	mov	r3, r2
 8009574:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b20      	cmp	r3, #32
 8009584:	d17c      	bne.n	8009680 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <HAL_UART_Transmit+0x2c>
 800958c:	88fb      	ldrh	r3, [r7, #6]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e075      	b.n	8009682 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800959c:	2b01      	cmp	r3, #1
 800959e:	d101      	bne.n	80095a4 <HAL_UART_Transmit+0x3e>
 80095a0:	2302      	movs	r3, #2
 80095a2:	e06e      	b.n	8009682 <HAL_UART_Transmit+0x11c>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2200      	movs	r2, #0
 80095b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2221      	movs	r2, #33	; 0x21
 80095b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095ba:	f7fd fc11 	bl	8006de0 <HAL_GetTick>
 80095be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	88fa      	ldrh	r2, [r7, #6]
 80095c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	88fa      	ldrh	r2, [r7, #6]
 80095ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095d4:	d108      	bne.n	80095e8 <HAL_UART_Transmit+0x82>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d104      	bne.n	80095e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80095de:	2300      	movs	r3, #0
 80095e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	61bb      	str	r3, [r7, #24]
 80095e6:	e003      	b.n	80095f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095ec:	2300      	movs	r3, #0
 80095ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80095f8:	e02a      	b.n	8009650 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2200      	movs	r2, #0
 8009602:	2180      	movs	r1, #128	; 0x80
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 fa11 	bl	8009a2c <UART_WaitOnFlagUntilTimeout>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e036      	b.n	8009682 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10b      	bne.n	8009632 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009628:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	3302      	adds	r3, #2
 800962e:	61bb      	str	r3, [r7, #24]
 8009630:	e007      	b.n	8009642 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	781a      	ldrb	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	3301      	adds	r3, #1
 8009640:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009646:	b29b      	uxth	r3, r3
 8009648:	3b01      	subs	r3, #1
 800964a:	b29a      	uxth	r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009654:	b29b      	uxth	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1cf      	bne.n	80095fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2200      	movs	r2, #0
 8009662:	2140      	movs	r1, #64	; 0x40
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 f9e1 	bl	8009a2c <UART_WaitOnFlagUntilTimeout>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009670:	2303      	movs	r3, #3
 8009672:	e006      	b.n	8009682 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2220      	movs	r2, #32
 8009678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	e000      	b.n	8009682 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009680:	2302      	movs	r3, #2
  }
}
 8009682:	4618      	mov	r0, r3
 8009684:	3720      	adds	r7, #32
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b08a      	sub	sp, #40	; 0x28
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80096b0:	2300      	movs	r3, #0
 80096b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	f003 030f 	and.w	r3, r3, #15
 80096ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10d      	bne.n	80096de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	f003 0320 	and.w	r3, r3, #32
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d008      	beq.n	80096de <HAL_UART_IRQHandler+0x52>
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	f003 0320 	and.w	r3, r3, #32
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fa99 	bl	8009c0e <UART_Receive_IT>
      return;
 80096dc:	e17b      	b.n	80099d6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 80b1 	beq.w	8009848 <HAL_UART_IRQHandler+0x1bc>
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	f003 0301 	and.w	r3, r3, #1
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d105      	bne.n	80096fc <HAL_UART_IRQHandler+0x70>
 80096f0:	6a3b      	ldr	r3, [r7, #32]
 80096f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 80a6 	beq.w	8009848 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	f003 0301 	and.w	r3, r3, #1
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00a      	beq.n	800971c <HAL_UART_IRQHandler+0x90>
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800970c:	2b00      	cmp	r3, #0
 800970e:	d005      	beq.n	800971c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009714:	f043 0201 	orr.w	r2, r3, #1
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800971c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971e:	f003 0304 	and.w	r3, r3, #4
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00a      	beq.n	800973c <HAL_UART_IRQHandler+0xb0>
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	2b00      	cmp	r3, #0
 800972e:	d005      	beq.n	800973c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009734:	f043 0202 	orr.w	r2, r3, #2
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	f003 0302 	and.w	r3, r3, #2
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00a      	beq.n	800975c <HAL_UART_IRQHandler+0xd0>
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d005      	beq.n	800975c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009754:	f043 0204 	orr.w	r2, r3, #4
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	f003 0308 	and.w	r3, r3, #8
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00f      	beq.n	8009786 <HAL_UART_IRQHandler+0xfa>
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	f003 0320 	and.w	r3, r3, #32
 800976c:	2b00      	cmp	r3, #0
 800976e:	d104      	bne.n	800977a <HAL_UART_IRQHandler+0xee>
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d005      	beq.n	8009786 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977e:	f043 0208 	orr.w	r2, r3, #8
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978a:	2b00      	cmp	r3, #0
 800978c:	f000 811e 	beq.w	80099cc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	f003 0320 	and.w	r3, r3, #32
 8009796:	2b00      	cmp	r3, #0
 8009798:	d007      	beq.n	80097aa <HAL_UART_IRQHandler+0x11e>
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	f003 0320 	and.w	r3, r3, #32
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fa32 	bl	8009c0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	bf14      	ite	ne
 80097b8:	2301      	movne	r3, #1
 80097ba:	2300      	moveq	r3, #0
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c4:	f003 0308 	and.w	r3, r3, #8
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d102      	bne.n	80097d2 <HAL_UART_IRQHandler+0x146>
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d031      	beq.n	8009836 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f974 	bl	8009ac0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d023      	beq.n	800982e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	695a      	ldr	r2, [r3, #20]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d013      	beq.n	8009826 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009802:	4a76      	ldr	r2, [pc, #472]	; (80099dc <HAL_UART_IRQHandler+0x350>)
 8009804:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980a:	4618      	mov	r0, r3
 800980c:	f7fe f9c6 	bl	8007b9c <HAL_DMA_Abort_IT>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d016      	beq.n	8009844 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009820:	4610      	mov	r0, r2
 8009822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009824:	e00e      	b.n	8009844 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f8ec 	bl	8009a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800982c:	e00a      	b.n	8009844 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f8e8 	bl	8009a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009834:	e006      	b.n	8009844 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f8e4 	bl	8009a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009842:	e0c3      	b.n	80099cc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009844:	bf00      	nop
    return;
 8009846:	e0c1      	b.n	80099cc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984c:	2b01      	cmp	r3, #1
 800984e:	f040 80a1 	bne.w	8009994 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	f003 0310 	and.w	r3, r3, #16
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 809b 	beq.w	8009994 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	f003 0310 	and.w	r3, r3, #16
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 8095 	beq.w	8009994 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	60fb      	str	r3, [r7, #12]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988a:	2b00      	cmp	r3, #0
 800988c:	d04e      	beq.n	800992c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009898:	8a3b      	ldrh	r3, [r7, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 8098 	beq.w	80099d0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098a4:	8a3a      	ldrh	r2, [r7, #16]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	f080 8092 	bcs.w	80099d0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	8a3a      	ldrh	r2, [r7, #16]
 80098b0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	2b20      	cmp	r3, #32
 80098ba:	d02b      	beq.n	8009914 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68da      	ldr	r2, [r3, #12]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098ca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	695a      	ldr	r2, [r3, #20]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f022 0201 	bic.w	r2, r2, #1
 80098da:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	695a      	ldr	r2, [r3, #20]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098ea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2220      	movs	r2, #32
 80098f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68da      	ldr	r2, [r3, #12]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f022 0210 	bic.w	r2, r2, #16
 8009908:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe f909 	bl	8007b26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800991c:	b29b      	uxth	r3, r3
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	b29b      	uxth	r3, r3
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f876 	bl	8009a16 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800992a:	e051      	b.n	80099d0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009934:	b29b      	uxth	r3, r3
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800993e:	b29b      	uxth	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	d047      	beq.n	80099d4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009944:	8a7b      	ldrh	r3, [r7, #18]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d044      	beq.n	80099d4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68da      	ldr	r2, [r3, #12]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009958:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	695a      	ldr	r2, [r3, #20]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f022 0201 	bic.w	r2, r2, #1
 8009968:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2220      	movs	r2, #32
 800996e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68da      	ldr	r2, [r3, #12]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f022 0210 	bic.w	r2, r2, #16
 8009986:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009988:	8a7b      	ldrh	r3, [r7, #18]
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f842 	bl	8009a16 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009992:	e01f      	b.n	80099d4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800999a:	2b00      	cmp	r3, #0
 800999c:	d008      	beq.n	80099b0 <HAL_UART_IRQHandler+0x324>
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d003      	beq.n	80099b0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f8c9 	bl	8009b40 <UART_Transmit_IT>
    return;
 80099ae:	e012      	b.n	80099d6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00d      	beq.n	80099d6 <HAL_UART_IRQHandler+0x34a>
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d008      	beq.n	80099d6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f90a 	bl	8009bde <UART_EndTransmit_IT>
    return;
 80099ca:	e004      	b.n	80099d6 <HAL_UART_IRQHandler+0x34a>
    return;
 80099cc:	bf00      	nop
 80099ce:	e002      	b.n	80099d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80099d0:	bf00      	nop
 80099d2:	e000      	b.n	80099d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80099d4:	bf00      	nop
  }
}
 80099d6:	3728      	adds	r7, #40	; 0x28
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	08009b19 	.word	0x08009b19

080099e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bc80      	pop	{r7}
 80099f0:	4770      	bx	lr

080099f2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b083      	sub	sp, #12
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80099fa:	bf00      	nop
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bc80      	pop	{r7}
 8009a02:	4770      	bx	lr

08009a04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bc80      	pop	{r7}
 8009a14:	4770      	bx	lr

08009a16 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b083      	sub	sp, #12
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a22:	bf00      	nop
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bc80      	pop	{r7}
 8009a2a:	4770      	bx	lr

08009a2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a3c:	e02c      	b.n	8009a98 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a44:	d028      	beq.n	8009a98 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d007      	beq.n	8009a5c <UART_WaitOnFlagUntilTimeout+0x30>
 8009a4c:	f7fd f9c8 	bl	8006de0 <HAL_GetTick>
 8009a50:	4602      	mov	r2, r0
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	69ba      	ldr	r2, [r7, #24]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d21d      	bcs.n	8009a98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a6a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	695a      	ldr	r2, [r3, #20]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f022 0201 	bic.w	r2, r2, #1
 8009a7a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2220      	movs	r2, #32
 8009a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e00f      	b.n	8009ab8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	bf0c      	ite	eq
 8009aa8:	2301      	moveq	r3, #1
 8009aaa:	2300      	movne	r3, #0
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	461a      	mov	r2, r3
 8009ab0:	79fb      	ldrb	r3, [r7, #7]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d0c3      	beq.n	8009a3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68da      	ldr	r2, [r3, #12]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009ad6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	695a      	ldr	r2, [r3, #20]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f022 0201 	bic.w	r2, r2, #1
 8009ae6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d107      	bne.n	8009b00 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68da      	ldr	r2, [r3, #12]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f022 0210 	bic.w	r2, r2, #16
 8009afe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2220      	movs	r2, #32
 8009b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009b0e:	bf00      	nop
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bc80      	pop	{r7}
 8009b16:	4770      	bx	lr

08009b18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f7ff ff66 	bl	8009a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b38:	bf00      	nop
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	2b21      	cmp	r3, #33	; 0x21
 8009b52:	d13e      	bne.n	8009bd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b5c:	d114      	bne.n	8009b88 <UART_Transmit_IT+0x48>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d110      	bne.n	8009b88 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	461a      	mov	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a1b      	ldr	r3, [r3, #32]
 8009b80:	1c9a      	adds	r2, r3, #2
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	621a      	str	r2, [r3, #32]
 8009b86:	e008      	b.n	8009b9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a1b      	ldr	r3, [r3, #32]
 8009b8c:	1c59      	adds	r1, r3, #1
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	6211      	str	r1, [r2, #32]
 8009b92:	781a      	ldrb	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10f      	bne.n	8009bce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68da      	ldr	r2, [r3, #12]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68da      	ldr	r2, [r3, #12]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bcc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	e000      	b.n	8009bd4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009bd2:	2302      	movs	r3, #2
  }
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bc80      	pop	{r7}
 8009bdc:	4770      	bx	lr

08009bde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b082      	sub	sp, #8
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68da      	ldr	r2, [r3, #12]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2220      	movs	r2, #32
 8009bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7ff feee 	bl	80099e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b086      	sub	sp, #24
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	2b22      	cmp	r3, #34	; 0x22
 8009c20:	f040 8099 	bne.w	8009d56 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c2c:	d117      	bne.n	8009c5e <UART_Receive_IT+0x50>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d113      	bne.n	8009c5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009c36:	2300      	movs	r3, #0
 8009c38:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c56:	1c9a      	adds	r2, r3, #2
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	629a      	str	r2, [r3, #40]	; 0x28
 8009c5c:	e026      	b.n	8009cac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c62:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009c64:	2300      	movs	r3, #0
 8009c66:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c70:	d007      	beq.n	8009c82 <UART_Receive_IT+0x74>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10a      	bne.n	8009c90 <UART_Receive_IT+0x82>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d106      	bne.n	8009c90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	b2da      	uxtb	r2, r3
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	701a      	strb	r2, [r3, #0]
 8009c8e:	e008      	b.n	8009ca2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca6:	1c5a      	adds	r2, r3, #1
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d148      	bne.n	8009d52 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68da      	ldr	r2, [r3, #12]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 0220 	bic.w	r2, r2, #32
 8009cce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68da      	ldr	r2, [r3, #12]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	695a      	ldr	r2, [r3, #20]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f022 0201 	bic.w	r2, r2, #1
 8009cee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d123      	bne.n	8009d48 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68da      	ldr	r2, [r3, #12]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f022 0210 	bic.w	r2, r2, #16
 8009d14:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0310 	and.w	r3, r3, #16
 8009d20:	2b10      	cmp	r3, #16
 8009d22:	d10a      	bne.n	8009d3a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d24:	2300      	movs	r3, #0
 8009d26:	60fb      	str	r3, [r7, #12]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	60fb      	str	r3, [r7, #12]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	60fb      	str	r3, [r7, #12]
 8009d38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d3e:	4619      	mov	r1, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7ff fe68 	bl	8009a16 <HAL_UARTEx_RxEventCallback>
 8009d46:	e002      	b.n	8009d4e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff fe52 	bl	80099f2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	e002      	b.n	8009d58 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	e000      	b.n	8009d58 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009d56:	2302      	movs	r3, #2
  }
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68da      	ldr	r2, [r3, #12]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689a      	ldr	r2, [r3, #8]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	431a      	orrs	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009d9a:	f023 030c 	bic.w	r3, r3, #12
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	6812      	ldr	r2, [r2, #0]
 8009da2:	68b9      	ldr	r1, [r7, #8]
 8009da4:	430b      	orrs	r3, r1
 8009da6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	699a      	ldr	r2, [r3, #24]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	430a      	orrs	r2, r1
 8009dbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a2c      	ldr	r2, [pc, #176]	; (8009e74 <UART_SetConfig+0x114>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d103      	bne.n	8009dd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009dc8:	f7fe fd84 	bl	80088d4 <HAL_RCC_GetPCLK2Freq>
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	e002      	b.n	8009dd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009dd0:	f7fe fd6c 	bl	80088ac <HAL_RCC_GetPCLK1Freq>
 8009dd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	009a      	lsls	r2, r3, #2
 8009de0:	441a      	add	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dec:	4a22      	ldr	r2, [pc, #136]	; (8009e78 <UART_SetConfig+0x118>)
 8009dee:	fba2 2303 	umull	r2, r3, r2, r3
 8009df2:	095b      	lsrs	r3, r3, #5
 8009df4:	0119      	lsls	r1, r3, #4
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	009a      	lsls	r2, r3, #2
 8009e00:	441a      	add	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e0c:	4b1a      	ldr	r3, [pc, #104]	; (8009e78 <UART_SetConfig+0x118>)
 8009e0e:	fba3 0302 	umull	r0, r3, r3, r2
 8009e12:	095b      	lsrs	r3, r3, #5
 8009e14:	2064      	movs	r0, #100	; 0x64
 8009e16:	fb00 f303 	mul.w	r3, r0, r3
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	011b      	lsls	r3, r3, #4
 8009e1e:	3332      	adds	r3, #50	; 0x32
 8009e20:	4a15      	ldr	r2, [pc, #84]	; (8009e78 <UART_SetConfig+0x118>)
 8009e22:	fba2 2303 	umull	r2, r3, r2, r3
 8009e26:	095b      	lsrs	r3, r3, #5
 8009e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e2c:	4419      	add	r1, r3
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	4613      	mov	r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4413      	add	r3, r2
 8009e36:	009a      	lsls	r2, r3, #2
 8009e38:	441a      	add	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e44:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <UART_SetConfig+0x118>)
 8009e46:	fba3 0302 	umull	r0, r3, r3, r2
 8009e4a:	095b      	lsrs	r3, r3, #5
 8009e4c:	2064      	movs	r0, #100	; 0x64
 8009e4e:	fb00 f303 	mul.w	r3, r0, r3
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	011b      	lsls	r3, r3, #4
 8009e56:	3332      	adds	r3, #50	; 0x32
 8009e58:	4a07      	ldr	r2, [pc, #28]	; (8009e78 <UART_SetConfig+0x118>)
 8009e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e5e:	095b      	lsrs	r3, r3, #5
 8009e60:	f003 020f 	and.w	r2, r3, #15
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	440a      	add	r2, r1
 8009e6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009e6c:	bf00      	nop
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	40013800 	.word	0x40013800
 8009e78:	51eb851f 	.word	0x51eb851f

08009e7c <__errno>:
 8009e7c:	4b01      	ldr	r3, [pc, #4]	; (8009e84 <__errno+0x8>)
 8009e7e:	6818      	ldr	r0, [r3, #0]
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20000010 	.word	0x20000010

08009e88 <__libc_init_array>:
 8009e88:	b570      	push	{r4, r5, r6, lr}
 8009e8a:	2600      	movs	r6, #0
 8009e8c:	4d0c      	ldr	r5, [pc, #48]	; (8009ec0 <__libc_init_array+0x38>)
 8009e8e:	4c0d      	ldr	r4, [pc, #52]	; (8009ec4 <__libc_init_array+0x3c>)
 8009e90:	1b64      	subs	r4, r4, r5
 8009e92:	10a4      	asrs	r4, r4, #2
 8009e94:	42a6      	cmp	r6, r4
 8009e96:	d109      	bne.n	8009eac <__libc_init_array+0x24>
 8009e98:	f002 febc 	bl	800cc14 <_init>
 8009e9c:	2600      	movs	r6, #0
 8009e9e:	4d0a      	ldr	r5, [pc, #40]	; (8009ec8 <__libc_init_array+0x40>)
 8009ea0:	4c0a      	ldr	r4, [pc, #40]	; (8009ecc <__libc_init_array+0x44>)
 8009ea2:	1b64      	subs	r4, r4, r5
 8009ea4:	10a4      	asrs	r4, r4, #2
 8009ea6:	42a6      	cmp	r6, r4
 8009ea8:	d105      	bne.n	8009eb6 <__libc_init_array+0x2e>
 8009eaa:	bd70      	pop	{r4, r5, r6, pc}
 8009eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eb0:	4798      	blx	r3
 8009eb2:	3601      	adds	r6, #1
 8009eb4:	e7ee      	b.n	8009e94 <__libc_init_array+0xc>
 8009eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eba:	4798      	blx	r3
 8009ebc:	3601      	adds	r6, #1
 8009ebe:	e7f2      	b.n	8009ea6 <__libc_init_array+0x1e>
 8009ec0:	0800e8ac 	.word	0x0800e8ac
 8009ec4:	0800e8ac 	.word	0x0800e8ac
 8009ec8:	0800e8ac 	.word	0x0800e8ac
 8009ecc:	0800e8b0 	.word	0x0800e8b0

08009ed0 <memset>:
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	4402      	add	r2, r0
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d100      	bne.n	8009eda <memset+0xa>
 8009ed8:	4770      	bx	lr
 8009eda:	f803 1b01 	strb.w	r1, [r3], #1
 8009ede:	e7f9      	b.n	8009ed4 <memset+0x4>

08009ee0 <__cvt>:
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee6:	461f      	mov	r7, r3
 8009ee8:	bfbb      	ittet	lt
 8009eea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009eee:	461f      	movlt	r7, r3
 8009ef0:	2300      	movge	r3, #0
 8009ef2:	232d      	movlt	r3, #45	; 0x2d
 8009ef4:	b088      	sub	sp, #32
 8009ef6:	4614      	mov	r4, r2
 8009ef8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009efa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009efc:	7013      	strb	r3, [r2, #0]
 8009efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f00:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009f04:	f023 0820 	bic.w	r8, r3, #32
 8009f08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f0c:	d005      	beq.n	8009f1a <__cvt+0x3a>
 8009f0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f12:	d100      	bne.n	8009f16 <__cvt+0x36>
 8009f14:	3501      	adds	r5, #1
 8009f16:	2302      	movs	r3, #2
 8009f18:	e000      	b.n	8009f1c <__cvt+0x3c>
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	aa07      	add	r2, sp, #28
 8009f1e:	9204      	str	r2, [sp, #16]
 8009f20:	aa06      	add	r2, sp, #24
 8009f22:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009f26:	e9cd 3500 	strd	r3, r5, [sp]
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	463b      	mov	r3, r7
 8009f2e:	f000 fce7 	bl	800a900 <_dtoa_r>
 8009f32:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f36:	4606      	mov	r6, r0
 8009f38:	d102      	bne.n	8009f40 <__cvt+0x60>
 8009f3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f3c:	07db      	lsls	r3, r3, #31
 8009f3e:	d522      	bpl.n	8009f86 <__cvt+0xa6>
 8009f40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f44:	eb06 0905 	add.w	r9, r6, r5
 8009f48:	d110      	bne.n	8009f6c <__cvt+0x8c>
 8009f4a:	7833      	ldrb	r3, [r6, #0]
 8009f4c:	2b30      	cmp	r3, #48	; 0x30
 8009f4e:	d10a      	bne.n	8009f66 <__cvt+0x86>
 8009f50:	2200      	movs	r2, #0
 8009f52:	2300      	movs	r3, #0
 8009f54:	4620      	mov	r0, r4
 8009f56:	4639      	mov	r1, r7
 8009f58:	f7f6 fd92 	bl	8000a80 <__aeabi_dcmpeq>
 8009f5c:	b918      	cbnz	r0, 8009f66 <__cvt+0x86>
 8009f5e:	f1c5 0501 	rsb	r5, r5, #1
 8009f62:	f8ca 5000 	str.w	r5, [sl]
 8009f66:	f8da 3000 	ldr.w	r3, [sl]
 8009f6a:	4499      	add	r9, r3
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	2300      	movs	r3, #0
 8009f70:	4620      	mov	r0, r4
 8009f72:	4639      	mov	r1, r7
 8009f74:	f7f6 fd84 	bl	8000a80 <__aeabi_dcmpeq>
 8009f78:	b108      	cbz	r0, 8009f7e <__cvt+0x9e>
 8009f7a:	f8cd 901c 	str.w	r9, [sp, #28]
 8009f7e:	2230      	movs	r2, #48	; 0x30
 8009f80:	9b07      	ldr	r3, [sp, #28]
 8009f82:	454b      	cmp	r3, r9
 8009f84:	d307      	bcc.n	8009f96 <__cvt+0xb6>
 8009f86:	4630      	mov	r0, r6
 8009f88:	9b07      	ldr	r3, [sp, #28]
 8009f8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f8c:	1b9b      	subs	r3, r3, r6
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	b008      	add	sp, #32
 8009f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f96:	1c59      	adds	r1, r3, #1
 8009f98:	9107      	str	r1, [sp, #28]
 8009f9a:	701a      	strb	r2, [r3, #0]
 8009f9c:	e7f0      	b.n	8009f80 <__cvt+0xa0>

08009f9e <__exponent>:
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fa2:	2900      	cmp	r1, #0
 8009fa4:	f803 2b02 	strb.w	r2, [r3], #2
 8009fa8:	bfb6      	itet	lt
 8009faa:	222d      	movlt	r2, #45	; 0x2d
 8009fac:	222b      	movge	r2, #43	; 0x2b
 8009fae:	4249      	neglt	r1, r1
 8009fb0:	2909      	cmp	r1, #9
 8009fb2:	7042      	strb	r2, [r0, #1]
 8009fb4:	dd2b      	ble.n	800a00e <__exponent+0x70>
 8009fb6:	f10d 0407 	add.w	r4, sp, #7
 8009fba:	46a4      	mov	ip, r4
 8009fbc:	270a      	movs	r7, #10
 8009fbe:	fb91 f6f7 	sdiv	r6, r1, r7
 8009fc2:	460a      	mov	r2, r1
 8009fc4:	46a6      	mov	lr, r4
 8009fc6:	fb07 1516 	mls	r5, r7, r6, r1
 8009fca:	2a63      	cmp	r2, #99	; 0x63
 8009fcc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	f104 34ff 	add.w	r4, r4, #4294967295
 8009fd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009fda:	dcf0      	bgt.n	8009fbe <__exponent+0x20>
 8009fdc:	3130      	adds	r1, #48	; 0x30
 8009fde:	f1ae 0502 	sub.w	r5, lr, #2
 8009fe2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009fe6:	4629      	mov	r1, r5
 8009fe8:	1c44      	adds	r4, r0, #1
 8009fea:	4561      	cmp	r1, ip
 8009fec:	d30a      	bcc.n	800a004 <__exponent+0x66>
 8009fee:	f10d 0209 	add.w	r2, sp, #9
 8009ff2:	eba2 020e 	sub.w	r2, r2, lr
 8009ff6:	4565      	cmp	r5, ip
 8009ff8:	bf88      	it	hi
 8009ffa:	2200      	movhi	r2, #0
 8009ffc:	4413      	add	r3, r2
 8009ffe:	1a18      	subs	r0, r3, r0
 800a000:	b003      	add	sp, #12
 800a002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a004:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a008:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a00c:	e7ed      	b.n	8009fea <__exponent+0x4c>
 800a00e:	2330      	movs	r3, #48	; 0x30
 800a010:	3130      	adds	r1, #48	; 0x30
 800a012:	7083      	strb	r3, [r0, #2]
 800a014:	70c1      	strb	r1, [r0, #3]
 800a016:	1d03      	adds	r3, r0, #4
 800a018:	e7f1      	b.n	8009ffe <__exponent+0x60>
	...

0800a01c <_printf_float>:
 800a01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	b091      	sub	sp, #68	; 0x44
 800a022:	460c      	mov	r4, r1
 800a024:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a028:	4616      	mov	r6, r2
 800a02a:	461f      	mov	r7, r3
 800a02c:	4605      	mov	r5, r0
 800a02e:	f001 fa55 	bl	800b4dc <_localeconv_r>
 800a032:	6803      	ldr	r3, [r0, #0]
 800a034:	4618      	mov	r0, r3
 800a036:	9309      	str	r3, [sp, #36]	; 0x24
 800a038:	f7f6 f8f6 	bl	8000228 <strlen>
 800a03c:	2300      	movs	r3, #0
 800a03e:	930e      	str	r3, [sp, #56]	; 0x38
 800a040:	f8d8 3000 	ldr.w	r3, [r8]
 800a044:	900a      	str	r0, [sp, #40]	; 0x28
 800a046:	3307      	adds	r3, #7
 800a048:	f023 0307 	bic.w	r3, r3, #7
 800a04c:	f103 0208 	add.w	r2, r3, #8
 800a050:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a054:	f8d4 b000 	ldr.w	fp, [r4]
 800a058:	f8c8 2000 	str.w	r2, [r8]
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a064:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a068:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a06c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a06e:	f04f 32ff 	mov.w	r2, #4294967295
 800a072:	4640      	mov	r0, r8
 800a074:	4b9c      	ldr	r3, [pc, #624]	; (800a2e8 <_printf_float+0x2cc>)
 800a076:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a078:	f7f6 fd34 	bl	8000ae4 <__aeabi_dcmpun>
 800a07c:	bb70      	cbnz	r0, 800a0dc <_printf_float+0xc0>
 800a07e:	f04f 32ff 	mov.w	r2, #4294967295
 800a082:	4640      	mov	r0, r8
 800a084:	4b98      	ldr	r3, [pc, #608]	; (800a2e8 <_printf_float+0x2cc>)
 800a086:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a088:	f7f6 fd0e 	bl	8000aa8 <__aeabi_dcmple>
 800a08c:	bb30      	cbnz	r0, 800a0dc <_printf_float+0xc0>
 800a08e:	2200      	movs	r2, #0
 800a090:	2300      	movs	r3, #0
 800a092:	4640      	mov	r0, r8
 800a094:	4651      	mov	r1, sl
 800a096:	f7f6 fcfd 	bl	8000a94 <__aeabi_dcmplt>
 800a09a:	b110      	cbz	r0, 800a0a2 <_printf_float+0x86>
 800a09c:	232d      	movs	r3, #45	; 0x2d
 800a09e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0a2:	4b92      	ldr	r3, [pc, #584]	; (800a2ec <_printf_float+0x2d0>)
 800a0a4:	4892      	ldr	r0, [pc, #584]	; (800a2f0 <_printf_float+0x2d4>)
 800a0a6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a0aa:	bf94      	ite	ls
 800a0ac:	4698      	movls	r8, r3
 800a0ae:	4680      	movhi	r8, r0
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	f04f 0a00 	mov.w	sl, #0
 800a0b6:	6123      	str	r3, [r4, #16]
 800a0b8:	f02b 0304 	bic.w	r3, fp, #4
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	4633      	mov	r3, r6
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	9700      	str	r7, [sp, #0]
 800a0c6:	aa0f      	add	r2, sp, #60	; 0x3c
 800a0c8:	f000 f9d4 	bl	800a474 <_printf_common>
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	f040 8090 	bne.w	800a1f2 <_printf_float+0x1d6>
 800a0d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d6:	b011      	add	sp, #68	; 0x44
 800a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0dc:	4642      	mov	r2, r8
 800a0de:	4653      	mov	r3, sl
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	4651      	mov	r1, sl
 800a0e4:	f7f6 fcfe 	bl	8000ae4 <__aeabi_dcmpun>
 800a0e8:	b148      	cbz	r0, 800a0fe <_printf_float+0xe2>
 800a0ea:	f1ba 0f00 	cmp.w	sl, #0
 800a0ee:	bfb8      	it	lt
 800a0f0:	232d      	movlt	r3, #45	; 0x2d
 800a0f2:	4880      	ldr	r0, [pc, #512]	; (800a2f4 <_printf_float+0x2d8>)
 800a0f4:	bfb8      	it	lt
 800a0f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a0fa:	4b7f      	ldr	r3, [pc, #508]	; (800a2f8 <_printf_float+0x2dc>)
 800a0fc:	e7d3      	b.n	800a0a6 <_printf_float+0x8a>
 800a0fe:	6863      	ldr	r3, [r4, #4]
 800a100:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a104:	1c5a      	adds	r2, r3, #1
 800a106:	d142      	bne.n	800a18e <_printf_float+0x172>
 800a108:	2306      	movs	r3, #6
 800a10a:	6063      	str	r3, [r4, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	9206      	str	r2, [sp, #24]
 800a110:	aa0e      	add	r2, sp, #56	; 0x38
 800a112:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a116:	aa0d      	add	r2, sp, #52	; 0x34
 800a118:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a11c:	9203      	str	r2, [sp, #12]
 800a11e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a122:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a126:	6023      	str	r3, [r4, #0]
 800a128:	6863      	ldr	r3, [r4, #4]
 800a12a:	4642      	mov	r2, r8
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	4628      	mov	r0, r5
 800a130:	4653      	mov	r3, sl
 800a132:	910b      	str	r1, [sp, #44]	; 0x2c
 800a134:	f7ff fed4 	bl	8009ee0 <__cvt>
 800a138:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a13a:	4680      	mov	r8, r0
 800a13c:	2947      	cmp	r1, #71	; 0x47
 800a13e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a140:	d108      	bne.n	800a154 <_printf_float+0x138>
 800a142:	1cc8      	adds	r0, r1, #3
 800a144:	db02      	blt.n	800a14c <_printf_float+0x130>
 800a146:	6863      	ldr	r3, [r4, #4]
 800a148:	4299      	cmp	r1, r3
 800a14a:	dd40      	ble.n	800a1ce <_printf_float+0x1b2>
 800a14c:	f1a9 0902 	sub.w	r9, r9, #2
 800a150:	fa5f f989 	uxtb.w	r9, r9
 800a154:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a158:	d81f      	bhi.n	800a19a <_printf_float+0x17e>
 800a15a:	464a      	mov	r2, r9
 800a15c:	3901      	subs	r1, #1
 800a15e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a162:	910d      	str	r1, [sp, #52]	; 0x34
 800a164:	f7ff ff1b 	bl	8009f9e <__exponent>
 800a168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a16a:	4682      	mov	sl, r0
 800a16c:	1813      	adds	r3, r2, r0
 800a16e:	2a01      	cmp	r2, #1
 800a170:	6123      	str	r3, [r4, #16]
 800a172:	dc02      	bgt.n	800a17a <_printf_float+0x15e>
 800a174:	6822      	ldr	r2, [r4, #0]
 800a176:	07d2      	lsls	r2, r2, #31
 800a178:	d501      	bpl.n	800a17e <_printf_float+0x162>
 800a17a:	3301      	adds	r3, #1
 800a17c:	6123      	str	r3, [r4, #16]
 800a17e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a182:	2b00      	cmp	r3, #0
 800a184:	d09b      	beq.n	800a0be <_printf_float+0xa2>
 800a186:	232d      	movs	r3, #45	; 0x2d
 800a188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a18c:	e797      	b.n	800a0be <_printf_float+0xa2>
 800a18e:	2947      	cmp	r1, #71	; 0x47
 800a190:	d1bc      	bne.n	800a10c <_printf_float+0xf0>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1ba      	bne.n	800a10c <_printf_float+0xf0>
 800a196:	2301      	movs	r3, #1
 800a198:	e7b7      	b.n	800a10a <_printf_float+0xee>
 800a19a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a19e:	d118      	bne.n	800a1d2 <_printf_float+0x1b6>
 800a1a0:	2900      	cmp	r1, #0
 800a1a2:	6863      	ldr	r3, [r4, #4]
 800a1a4:	dd0b      	ble.n	800a1be <_printf_float+0x1a2>
 800a1a6:	6121      	str	r1, [r4, #16]
 800a1a8:	b913      	cbnz	r3, 800a1b0 <_printf_float+0x194>
 800a1aa:	6822      	ldr	r2, [r4, #0]
 800a1ac:	07d0      	lsls	r0, r2, #31
 800a1ae:	d502      	bpl.n	800a1b6 <_printf_float+0x19a>
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	440b      	add	r3, r1
 800a1b4:	6123      	str	r3, [r4, #16]
 800a1b6:	f04f 0a00 	mov.w	sl, #0
 800a1ba:	65a1      	str	r1, [r4, #88]	; 0x58
 800a1bc:	e7df      	b.n	800a17e <_printf_float+0x162>
 800a1be:	b913      	cbnz	r3, 800a1c6 <_printf_float+0x1aa>
 800a1c0:	6822      	ldr	r2, [r4, #0]
 800a1c2:	07d2      	lsls	r2, r2, #31
 800a1c4:	d501      	bpl.n	800a1ca <_printf_float+0x1ae>
 800a1c6:	3302      	adds	r3, #2
 800a1c8:	e7f4      	b.n	800a1b4 <_printf_float+0x198>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e7f2      	b.n	800a1b4 <_printf_float+0x198>
 800a1ce:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a1d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1d4:	4299      	cmp	r1, r3
 800a1d6:	db05      	blt.n	800a1e4 <_printf_float+0x1c8>
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	6121      	str	r1, [r4, #16]
 800a1dc:	07d8      	lsls	r0, r3, #31
 800a1de:	d5ea      	bpl.n	800a1b6 <_printf_float+0x19a>
 800a1e0:	1c4b      	adds	r3, r1, #1
 800a1e2:	e7e7      	b.n	800a1b4 <_printf_float+0x198>
 800a1e4:	2900      	cmp	r1, #0
 800a1e6:	bfcc      	ite	gt
 800a1e8:	2201      	movgt	r2, #1
 800a1ea:	f1c1 0202 	rsble	r2, r1, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	e7e0      	b.n	800a1b4 <_printf_float+0x198>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	055a      	lsls	r2, r3, #21
 800a1f6:	d407      	bmi.n	800a208 <_printf_float+0x1ec>
 800a1f8:	6923      	ldr	r3, [r4, #16]
 800a1fa:	4642      	mov	r2, r8
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	4628      	mov	r0, r5
 800a200:	47b8      	blx	r7
 800a202:	3001      	adds	r0, #1
 800a204:	d12b      	bne.n	800a25e <_printf_float+0x242>
 800a206:	e764      	b.n	800a0d2 <_printf_float+0xb6>
 800a208:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a20c:	f240 80dd 	bls.w	800a3ca <_printf_float+0x3ae>
 800a210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a214:	2200      	movs	r2, #0
 800a216:	2300      	movs	r3, #0
 800a218:	f7f6 fc32 	bl	8000a80 <__aeabi_dcmpeq>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	d033      	beq.n	800a288 <_printf_float+0x26c>
 800a220:	2301      	movs	r3, #1
 800a222:	4631      	mov	r1, r6
 800a224:	4628      	mov	r0, r5
 800a226:	4a35      	ldr	r2, [pc, #212]	; (800a2fc <_printf_float+0x2e0>)
 800a228:	47b8      	blx	r7
 800a22a:	3001      	adds	r0, #1
 800a22c:	f43f af51 	beq.w	800a0d2 <_printf_float+0xb6>
 800a230:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a234:	429a      	cmp	r2, r3
 800a236:	db02      	blt.n	800a23e <_printf_float+0x222>
 800a238:	6823      	ldr	r3, [r4, #0]
 800a23a:	07d8      	lsls	r0, r3, #31
 800a23c:	d50f      	bpl.n	800a25e <_printf_float+0x242>
 800a23e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a242:	4631      	mov	r1, r6
 800a244:	4628      	mov	r0, r5
 800a246:	47b8      	blx	r7
 800a248:	3001      	adds	r0, #1
 800a24a:	f43f af42 	beq.w	800a0d2 <_printf_float+0xb6>
 800a24e:	f04f 0800 	mov.w	r8, #0
 800a252:	f104 091a 	add.w	r9, r4, #26
 800a256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a258:	3b01      	subs	r3, #1
 800a25a:	4543      	cmp	r3, r8
 800a25c:	dc09      	bgt.n	800a272 <_printf_float+0x256>
 800a25e:	6823      	ldr	r3, [r4, #0]
 800a260:	079b      	lsls	r3, r3, #30
 800a262:	f100 8102 	bmi.w	800a46a <_printf_float+0x44e>
 800a266:	68e0      	ldr	r0, [r4, #12]
 800a268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a26a:	4298      	cmp	r0, r3
 800a26c:	bfb8      	it	lt
 800a26e:	4618      	movlt	r0, r3
 800a270:	e731      	b.n	800a0d6 <_printf_float+0xba>
 800a272:	2301      	movs	r3, #1
 800a274:	464a      	mov	r2, r9
 800a276:	4631      	mov	r1, r6
 800a278:	4628      	mov	r0, r5
 800a27a:	47b8      	blx	r7
 800a27c:	3001      	adds	r0, #1
 800a27e:	f43f af28 	beq.w	800a0d2 <_printf_float+0xb6>
 800a282:	f108 0801 	add.w	r8, r8, #1
 800a286:	e7e6      	b.n	800a256 <_printf_float+0x23a>
 800a288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	dc38      	bgt.n	800a300 <_printf_float+0x2e4>
 800a28e:	2301      	movs	r3, #1
 800a290:	4631      	mov	r1, r6
 800a292:	4628      	mov	r0, r5
 800a294:	4a19      	ldr	r2, [pc, #100]	; (800a2fc <_printf_float+0x2e0>)
 800a296:	47b8      	blx	r7
 800a298:	3001      	adds	r0, #1
 800a29a:	f43f af1a 	beq.w	800a0d2 <_printf_float+0xb6>
 800a29e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	d102      	bne.n	800a2ac <_printf_float+0x290>
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	07d9      	lsls	r1, r3, #31
 800a2aa:	d5d8      	bpl.n	800a25e <_printf_float+0x242>
 800a2ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	47b8      	blx	r7
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	f43f af0b 	beq.w	800a0d2 <_printf_float+0xb6>
 800a2bc:	f04f 0900 	mov.w	r9, #0
 800a2c0:	f104 0a1a 	add.w	sl, r4, #26
 800a2c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2c6:	425b      	negs	r3, r3
 800a2c8:	454b      	cmp	r3, r9
 800a2ca:	dc01      	bgt.n	800a2d0 <_printf_float+0x2b4>
 800a2cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2ce:	e794      	b.n	800a1fa <_printf_float+0x1de>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	4652      	mov	r2, sl
 800a2d4:	4631      	mov	r1, r6
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	47b8      	blx	r7
 800a2da:	3001      	adds	r0, #1
 800a2dc:	f43f aef9 	beq.w	800a0d2 <_printf_float+0xb6>
 800a2e0:	f109 0901 	add.w	r9, r9, #1
 800a2e4:	e7ee      	b.n	800a2c4 <_printf_float+0x2a8>
 800a2e6:	bf00      	nop
 800a2e8:	7fefffff 	.word	0x7fefffff
 800a2ec:	0800e4cc 	.word	0x0800e4cc
 800a2f0:	0800e4d0 	.word	0x0800e4d0
 800a2f4:	0800e4d8 	.word	0x0800e4d8
 800a2f8:	0800e4d4 	.word	0x0800e4d4
 800a2fc:	0800e4dc 	.word	0x0800e4dc
 800a300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a304:	429a      	cmp	r2, r3
 800a306:	bfa8      	it	ge
 800a308:	461a      	movge	r2, r3
 800a30a:	2a00      	cmp	r2, #0
 800a30c:	4691      	mov	r9, r2
 800a30e:	dc37      	bgt.n	800a380 <_printf_float+0x364>
 800a310:	f04f 0b00 	mov.w	fp, #0
 800a314:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a318:	f104 021a 	add.w	r2, r4, #26
 800a31c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a320:	ebaa 0309 	sub.w	r3, sl, r9
 800a324:	455b      	cmp	r3, fp
 800a326:	dc33      	bgt.n	800a390 <_printf_float+0x374>
 800a328:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a32c:	429a      	cmp	r2, r3
 800a32e:	db3b      	blt.n	800a3a8 <_printf_float+0x38c>
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	07da      	lsls	r2, r3, #31
 800a334:	d438      	bmi.n	800a3a8 <_printf_float+0x38c>
 800a336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a338:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a33a:	eba2 030a 	sub.w	r3, r2, sl
 800a33e:	eba2 0901 	sub.w	r9, r2, r1
 800a342:	4599      	cmp	r9, r3
 800a344:	bfa8      	it	ge
 800a346:	4699      	movge	r9, r3
 800a348:	f1b9 0f00 	cmp.w	r9, #0
 800a34c:	dc34      	bgt.n	800a3b8 <_printf_float+0x39c>
 800a34e:	f04f 0800 	mov.w	r8, #0
 800a352:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a356:	f104 0a1a 	add.w	sl, r4, #26
 800a35a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a35e:	1a9b      	subs	r3, r3, r2
 800a360:	eba3 0309 	sub.w	r3, r3, r9
 800a364:	4543      	cmp	r3, r8
 800a366:	f77f af7a 	ble.w	800a25e <_printf_float+0x242>
 800a36a:	2301      	movs	r3, #1
 800a36c:	4652      	mov	r2, sl
 800a36e:	4631      	mov	r1, r6
 800a370:	4628      	mov	r0, r5
 800a372:	47b8      	blx	r7
 800a374:	3001      	adds	r0, #1
 800a376:	f43f aeac 	beq.w	800a0d2 <_printf_float+0xb6>
 800a37a:	f108 0801 	add.w	r8, r8, #1
 800a37e:	e7ec      	b.n	800a35a <_printf_float+0x33e>
 800a380:	4613      	mov	r3, r2
 800a382:	4631      	mov	r1, r6
 800a384:	4642      	mov	r2, r8
 800a386:	4628      	mov	r0, r5
 800a388:	47b8      	blx	r7
 800a38a:	3001      	adds	r0, #1
 800a38c:	d1c0      	bne.n	800a310 <_printf_float+0x2f4>
 800a38e:	e6a0      	b.n	800a0d2 <_printf_float+0xb6>
 800a390:	2301      	movs	r3, #1
 800a392:	4631      	mov	r1, r6
 800a394:	4628      	mov	r0, r5
 800a396:	920b      	str	r2, [sp, #44]	; 0x2c
 800a398:	47b8      	blx	r7
 800a39a:	3001      	adds	r0, #1
 800a39c:	f43f ae99 	beq.w	800a0d2 <_printf_float+0xb6>
 800a3a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3a2:	f10b 0b01 	add.w	fp, fp, #1
 800a3a6:	e7b9      	b.n	800a31c <_printf_float+0x300>
 800a3a8:	4631      	mov	r1, r6
 800a3aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	47b8      	blx	r7
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	d1bf      	bne.n	800a336 <_printf_float+0x31a>
 800a3b6:	e68c      	b.n	800a0d2 <_printf_float+0xb6>
 800a3b8:	464b      	mov	r3, r9
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4628      	mov	r0, r5
 800a3be:	eb08 020a 	add.w	r2, r8, sl
 800a3c2:	47b8      	blx	r7
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	d1c2      	bne.n	800a34e <_printf_float+0x332>
 800a3c8:	e683      	b.n	800a0d2 <_printf_float+0xb6>
 800a3ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3cc:	2a01      	cmp	r2, #1
 800a3ce:	dc01      	bgt.n	800a3d4 <_printf_float+0x3b8>
 800a3d0:	07db      	lsls	r3, r3, #31
 800a3d2:	d537      	bpl.n	800a444 <_printf_float+0x428>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	4642      	mov	r2, r8
 800a3d8:	4631      	mov	r1, r6
 800a3da:	4628      	mov	r0, r5
 800a3dc:	47b8      	blx	r7
 800a3de:	3001      	adds	r0, #1
 800a3e0:	f43f ae77 	beq.w	800a0d2 <_printf_float+0xb6>
 800a3e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3e8:	4631      	mov	r1, r6
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	47b8      	blx	r7
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	f43f ae6f 	beq.w	800a0d2 <_printf_float+0xb6>
 800a3f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f7f6 fb40 	bl	8000a80 <__aeabi_dcmpeq>
 800a400:	b9d8      	cbnz	r0, 800a43a <_printf_float+0x41e>
 800a402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a404:	f108 0201 	add.w	r2, r8, #1
 800a408:	3b01      	subs	r3, #1
 800a40a:	4631      	mov	r1, r6
 800a40c:	4628      	mov	r0, r5
 800a40e:	47b8      	blx	r7
 800a410:	3001      	adds	r0, #1
 800a412:	d10e      	bne.n	800a432 <_printf_float+0x416>
 800a414:	e65d      	b.n	800a0d2 <_printf_float+0xb6>
 800a416:	2301      	movs	r3, #1
 800a418:	464a      	mov	r2, r9
 800a41a:	4631      	mov	r1, r6
 800a41c:	4628      	mov	r0, r5
 800a41e:	47b8      	blx	r7
 800a420:	3001      	adds	r0, #1
 800a422:	f43f ae56 	beq.w	800a0d2 <_printf_float+0xb6>
 800a426:	f108 0801 	add.w	r8, r8, #1
 800a42a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a42c:	3b01      	subs	r3, #1
 800a42e:	4543      	cmp	r3, r8
 800a430:	dcf1      	bgt.n	800a416 <_printf_float+0x3fa>
 800a432:	4653      	mov	r3, sl
 800a434:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a438:	e6e0      	b.n	800a1fc <_printf_float+0x1e0>
 800a43a:	f04f 0800 	mov.w	r8, #0
 800a43e:	f104 091a 	add.w	r9, r4, #26
 800a442:	e7f2      	b.n	800a42a <_printf_float+0x40e>
 800a444:	2301      	movs	r3, #1
 800a446:	4642      	mov	r2, r8
 800a448:	e7df      	b.n	800a40a <_printf_float+0x3ee>
 800a44a:	2301      	movs	r3, #1
 800a44c:	464a      	mov	r2, r9
 800a44e:	4631      	mov	r1, r6
 800a450:	4628      	mov	r0, r5
 800a452:	47b8      	blx	r7
 800a454:	3001      	adds	r0, #1
 800a456:	f43f ae3c 	beq.w	800a0d2 <_printf_float+0xb6>
 800a45a:	f108 0801 	add.w	r8, r8, #1
 800a45e:	68e3      	ldr	r3, [r4, #12]
 800a460:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a462:	1a5b      	subs	r3, r3, r1
 800a464:	4543      	cmp	r3, r8
 800a466:	dcf0      	bgt.n	800a44a <_printf_float+0x42e>
 800a468:	e6fd      	b.n	800a266 <_printf_float+0x24a>
 800a46a:	f04f 0800 	mov.w	r8, #0
 800a46e:	f104 0919 	add.w	r9, r4, #25
 800a472:	e7f4      	b.n	800a45e <_printf_float+0x442>

0800a474 <_printf_common>:
 800a474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a478:	4616      	mov	r6, r2
 800a47a:	4699      	mov	r9, r3
 800a47c:	688a      	ldr	r2, [r1, #8]
 800a47e:	690b      	ldr	r3, [r1, #16]
 800a480:	4607      	mov	r7, r0
 800a482:	4293      	cmp	r3, r2
 800a484:	bfb8      	it	lt
 800a486:	4613      	movlt	r3, r2
 800a488:	6033      	str	r3, [r6, #0]
 800a48a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a48e:	460c      	mov	r4, r1
 800a490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a494:	b10a      	cbz	r2, 800a49a <_printf_common+0x26>
 800a496:	3301      	adds	r3, #1
 800a498:	6033      	str	r3, [r6, #0]
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	0699      	lsls	r1, r3, #26
 800a49e:	bf42      	ittt	mi
 800a4a0:	6833      	ldrmi	r3, [r6, #0]
 800a4a2:	3302      	addmi	r3, #2
 800a4a4:	6033      	strmi	r3, [r6, #0]
 800a4a6:	6825      	ldr	r5, [r4, #0]
 800a4a8:	f015 0506 	ands.w	r5, r5, #6
 800a4ac:	d106      	bne.n	800a4bc <_printf_common+0x48>
 800a4ae:	f104 0a19 	add.w	sl, r4, #25
 800a4b2:	68e3      	ldr	r3, [r4, #12]
 800a4b4:	6832      	ldr	r2, [r6, #0]
 800a4b6:	1a9b      	subs	r3, r3, r2
 800a4b8:	42ab      	cmp	r3, r5
 800a4ba:	dc28      	bgt.n	800a50e <_printf_common+0x9a>
 800a4bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4c0:	1e13      	subs	r3, r2, #0
 800a4c2:	6822      	ldr	r2, [r4, #0]
 800a4c4:	bf18      	it	ne
 800a4c6:	2301      	movne	r3, #1
 800a4c8:	0692      	lsls	r2, r2, #26
 800a4ca:	d42d      	bmi.n	800a528 <_printf_common+0xb4>
 800a4cc:	4649      	mov	r1, r9
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4d4:	47c0      	blx	r8
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	d020      	beq.n	800a51c <_printf_common+0xa8>
 800a4da:	6823      	ldr	r3, [r4, #0]
 800a4dc:	68e5      	ldr	r5, [r4, #12]
 800a4de:	f003 0306 	and.w	r3, r3, #6
 800a4e2:	2b04      	cmp	r3, #4
 800a4e4:	bf18      	it	ne
 800a4e6:	2500      	movne	r5, #0
 800a4e8:	6832      	ldr	r2, [r6, #0]
 800a4ea:	f04f 0600 	mov.w	r6, #0
 800a4ee:	68a3      	ldr	r3, [r4, #8]
 800a4f0:	bf08      	it	eq
 800a4f2:	1aad      	subeq	r5, r5, r2
 800a4f4:	6922      	ldr	r2, [r4, #16]
 800a4f6:	bf08      	it	eq
 800a4f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	bfc4      	itt	gt
 800a500:	1a9b      	subgt	r3, r3, r2
 800a502:	18ed      	addgt	r5, r5, r3
 800a504:	341a      	adds	r4, #26
 800a506:	42b5      	cmp	r5, r6
 800a508:	d11a      	bne.n	800a540 <_printf_common+0xcc>
 800a50a:	2000      	movs	r0, #0
 800a50c:	e008      	b.n	800a520 <_printf_common+0xac>
 800a50e:	2301      	movs	r3, #1
 800a510:	4652      	mov	r2, sl
 800a512:	4649      	mov	r1, r9
 800a514:	4638      	mov	r0, r7
 800a516:	47c0      	blx	r8
 800a518:	3001      	adds	r0, #1
 800a51a:	d103      	bne.n	800a524 <_printf_common+0xb0>
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295
 800a520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a524:	3501      	adds	r5, #1
 800a526:	e7c4      	b.n	800a4b2 <_printf_common+0x3e>
 800a528:	2030      	movs	r0, #48	; 0x30
 800a52a:	18e1      	adds	r1, r4, r3
 800a52c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a530:	1c5a      	adds	r2, r3, #1
 800a532:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a536:	4422      	add	r2, r4
 800a538:	3302      	adds	r3, #2
 800a53a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a53e:	e7c5      	b.n	800a4cc <_printf_common+0x58>
 800a540:	2301      	movs	r3, #1
 800a542:	4622      	mov	r2, r4
 800a544:	4649      	mov	r1, r9
 800a546:	4638      	mov	r0, r7
 800a548:	47c0      	blx	r8
 800a54a:	3001      	adds	r0, #1
 800a54c:	d0e6      	beq.n	800a51c <_printf_common+0xa8>
 800a54e:	3601      	adds	r6, #1
 800a550:	e7d9      	b.n	800a506 <_printf_common+0x92>
	...

0800a554 <_printf_i>:
 800a554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a558:	460c      	mov	r4, r1
 800a55a:	7e27      	ldrb	r7, [r4, #24]
 800a55c:	4691      	mov	r9, r2
 800a55e:	2f78      	cmp	r7, #120	; 0x78
 800a560:	4680      	mov	r8, r0
 800a562:	469a      	mov	sl, r3
 800a564:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a566:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a56a:	d807      	bhi.n	800a57c <_printf_i+0x28>
 800a56c:	2f62      	cmp	r7, #98	; 0x62
 800a56e:	d80a      	bhi.n	800a586 <_printf_i+0x32>
 800a570:	2f00      	cmp	r7, #0
 800a572:	f000 80d9 	beq.w	800a728 <_printf_i+0x1d4>
 800a576:	2f58      	cmp	r7, #88	; 0x58
 800a578:	f000 80a4 	beq.w	800a6c4 <_printf_i+0x170>
 800a57c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a584:	e03a      	b.n	800a5fc <_printf_i+0xa8>
 800a586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a58a:	2b15      	cmp	r3, #21
 800a58c:	d8f6      	bhi.n	800a57c <_printf_i+0x28>
 800a58e:	a001      	add	r0, pc, #4	; (adr r0, 800a594 <_printf_i+0x40>)
 800a590:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a594:	0800a5ed 	.word	0x0800a5ed
 800a598:	0800a601 	.word	0x0800a601
 800a59c:	0800a57d 	.word	0x0800a57d
 800a5a0:	0800a57d 	.word	0x0800a57d
 800a5a4:	0800a57d 	.word	0x0800a57d
 800a5a8:	0800a57d 	.word	0x0800a57d
 800a5ac:	0800a601 	.word	0x0800a601
 800a5b0:	0800a57d 	.word	0x0800a57d
 800a5b4:	0800a57d 	.word	0x0800a57d
 800a5b8:	0800a57d 	.word	0x0800a57d
 800a5bc:	0800a57d 	.word	0x0800a57d
 800a5c0:	0800a70f 	.word	0x0800a70f
 800a5c4:	0800a631 	.word	0x0800a631
 800a5c8:	0800a6f1 	.word	0x0800a6f1
 800a5cc:	0800a57d 	.word	0x0800a57d
 800a5d0:	0800a57d 	.word	0x0800a57d
 800a5d4:	0800a731 	.word	0x0800a731
 800a5d8:	0800a57d 	.word	0x0800a57d
 800a5dc:	0800a631 	.word	0x0800a631
 800a5e0:	0800a57d 	.word	0x0800a57d
 800a5e4:	0800a57d 	.word	0x0800a57d
 800a5e8:	0800a6f9 	.word	0x0800a6f9
 800a5ec:	680b      	ldr	r3, [r1, #0]
 800a5ee:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a5f2:	1d1a      	adds	r2, r3, #4
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	600a      	str	r2, [r1, #0]
 800a5f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e0a4      	b.n	800a74a <_printf_i+0x1f6>
 800a600:	6825      	ldr	r5, [r4, #0]
 800a602:	6808      	ldr	r0, [r1, #0]
 800a604:	062e      	lsls	r6, r5, #24
 800a606:	f100 0304 	add.w	r3, r0, #4
 800a60a:	d50a      	bpl.n	800a622 <_printf_i+0xce>
 800a60c:	6805      	ldr	r5, [r0, #0]
 800a60e:	600b      	str	r3, [r1, #0]
 800a610:	2d00      	cmp	r5, #0
 800a612:	da03      	bge.n	800a61c <_printf_i+0xc8>
 800a614:	232d      	movs	r3, #45	; 0x2d
 800a616:	426d      	negs	r5, r5
 800a618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a61c:	230a      	movs	r3, #10
 800a61e:	485e      	ldr	r0, [pc, #376]	; (800a798 <_printf_i+0x244>)
 800a620:	e019      	b.n	800a656 <_printf_i+0x102>
 800a622:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a626:	6805      	ldr	r5, [r0, #0]
 800a628:	600b      	str	r3, [r1, #0]
 800a62a:	bf18      	it	ne
 800a62c:	b22d      	sxthne	r5, r5
 800a62e:	e7ef      	b.n	800a610 <_printf_i+0xbc>
 800a630:	680b      	ldr	r3, [r1, #0]
 800a632:	6825      	ldr	r5, [r4, #0]
 800a634:	1d18      	adds	r0, r3, #4
 800a636:	6008      	str	r0, [r1, #0]
 800a638:	0628      	lsls	r0, r5, #24
 800a63a:	d501      	bpl.n	800a640 <_printf_i+0xec>
 800a63c:	681d      	ldr	r5, [r3, #0]
 800a63e:	e002      	b.n	800a646 <_printf_i+0xf2>
 800a640:	0669      	lsls	r1, r5, #25
 800a642:	d5fb      	bpl.n	800a63c <_printf_i+0xe8>
 800a644:	881d      	ldrh	r5, [r3, #0]
 800a646:	2f6f      	cmp	r7, #111	; 0x6f
 800a648:	bf0c      	ite	eq
 800a64a:	2308      	moveq	r3, #8
 800a64c:	230a      	movne	r3, #10
 800a64e:	4852      	ldr	r0, [pc, #328]	; (800a798 <_printf_i+0x244>)
 800a650:	2100      	movs	r1, #0
 800a652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a656:	6866      	ldr	r6, [r4, #4]
 800a658:	2e00      	cmp	r6, #0
 800a65a:	bfa8      	it	ge
 800a65c:	6821      	ldrge	r1, [r4, #0]
 800a65e:	60a6      	str	r6, [r4, #8]
 800a660:	bfa4      	itt	ge
 800a662:	f021 0104 	bicge.w	r1, r1, #4
 800a666:	6021      	strge	r1, [r4, #0]
 800a668:	b90d      	cbnz	r5, 800a66e <_printf_i+0x11a>
 800a66a:	2e00      	cmp	r6, #0
 800a66c:	d04d      	beq.n	800a70a <_printf_i+0x1b6>
 800a66e:	4616      	mov	r6, r2
 800a670:	fbb5 f1f3 	udiv	r1, r5, r3
 800a674:	fb03 5711 	mls	r7, r3, r1, r5
 800a678:	5dc7      	ldrb	r7, [r0, r7]
 800a67a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a67e:	462f      	mov	r7, r5
 800a680:	42bb      	cmp	r3, r7
 800a682:	460d      	mov	r5, r1
 800a684:	d9f4      	bls.n	800a670 <_printf_i+0x11c>
 800a686:	2b08      	cmp	r3, #8
 800a688:	d10b      	bne.n	800a6a2 <_printf_i+0x14e>
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	07df      	lsls	r7, r3, #31
 800a68e:	d508      	bpl.n	800a6a2 <_printf_i+0x14e>
 800a690:	6923      	ldr	r3, [r4, #16]
 800a692:	6861      	ldr	r1, [r4, #4]
 800a694:	4299      	cmp	r1, r3
 800a696:	bfde      	ittt	le
 800a698:	2330      	movle	r3, #48	; 0x30
 800a69a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a69e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6a2:	1b92      	subs	r2, r2, r6
 800a6a4:	6122      	str	r2, [r4, #16]
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	4621      	mov	r1, r4
 800a6aa:	4640      	mov	r0, r8
 800a6ac:	f8cd a000 	str.w	sl, [sp]
 800a6b0:	aa03      	add	r2, sp, #12
 800a6b2:	f7ff fedf 	bl	800a474 <_printf_common>
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	d14c      	bne.n	800a754 <_printf_i+0x200>
 800a6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a6be:	b004      	add	sp, #16
 800a6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c4:	4834      	ldr	r0, [pc, #208]	; (800a798 <_printf_i+0x244>)
 800a6c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a6ca:	680e      	ldr	r6, [r1, #0]
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	f856 5b04 	ldr.w	r5, [r6], #4
 800a6d2:	061f      	lsls	r7, r3, #24
 800a6d4:	600e      	str	r6, [r1, #0]
 800a6d6:	d514      	bpl.n	800a702 <_printf_i+0x1ae>
 800a6d8:	07d9      	lsls	r1, r3, #31
 800a6da:	bf44      	itt	mi
 800a6dc:	f043 0320 	orrmi.w	r3, r3, #32
 800a6e0:	6023      	strmi	r3, [r4, #0]
 800a6e2:	b91d      	cbnz	r5, 800a6ec <_printf_i+0x198>
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	f023 0320 	bic.w	r3, r3, #32
 800a6ea:	6023      	str	r3, [r4, #0]
 800a6ec:	2310      	movs	r3, #16
 800a6ee:	e7af      	b.n	800a650 <_printf_i+0xfc>
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	f043 0320 	orr.w	r3, r3, #32
 800a6f6:	6023      	str	r3, [r4, #0]
 800a6f8:	2378      	movs	r3, #120	; 0x78
 800a6fa:	4828      	ldr	r0, [pc, #160]	; (800a79c <_printf_i+0x248>)
 800a6fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a700:	e7e3      	b.n	800a6ca <_printf_i+0x176>
 800a702:	065e      	lsls	r6, r3, #25
 800a704:	bf48      	it	mi
 800a706:	b2ad      	uxthmi	r5, r5
 800a708:	e7e6      	b.n	800a6d8 <_printf_i+0x184>
 800a70a:	4616      	mov	r6, r2
 800a70c:	e7bb      	b.n	800a686 <_printf_i+0x132>
 800a70e:	680b      	ldr	r3, [r1, #0]
 800a710:	6826      	ldr	r6, [r4, #0]
 800a712:	1d1d      	adds	r5, r3, #4
 800a714:	6960      	ldr	r0, [r4, #20]
 800a716:	600d      	str	r5, [r1, #0]
 800a718:	0635      	lsls	r5, r6, #24
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	d501      	bpl.n	800a722 <_printf_i+0x1ce>
 800a71e:	6018      	str	r0, [r3, #0]
 800a720:	e002      	b.n	800a728 <_printf_i+0x1d4>
 800a722:	0671      	lsls	r1, r6, #25
 800a724:	d5fb      	bpl.n	800a71e <_printf_i+0x1ca>
 800a726:	8018      	strh	r0, [r3, #0]
 800a728:	2300      	movs	r3, #0
 800a72a:	4616      	mov	r6, r2
 800a72c:	6123      	str	r3, [r4, #16]
 800a72e:	e7ba      	b.n	800a6a6 <_printf_i+0x152>
 800a730:	680b      	ldr	r3, [r1, #0]
 800a732:	1d1a      	adds	r2, r3, #4
 800a734:	600a      	str	r2, [r1, #0]
 800a736:	681e      	ldr	r6, [r3, #0]
 800a738:	2100      	movs	r1, #0
 800a73a:	4630      	mov	r0, r6
 800a73c:	6862      	ldr	r2, [r4, #4]
 800a73e:	f000 fed9 	bl	800b4f4 <memchr>
 800a742:	b108      	cbz	r0, 800a748 <_printf_i+0x1f4>
 800a744:	1b80      	subs	r0, r0, r6
 800a746:	6060      	str	r0, [r4, #4]
 800a748:	6863      	ldr	r3, [r4, #4]
 800a74a:	6123      	str	r3, [r4, #16]
 800a74c:	2300      	movs	r3, #0
 800a74e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a752:	e7a8      	b.n	800a6a6 <_printf_i+0x152>
 800a754:	4632      	mov	r2, r6
 800a756:	4649      	mov	r1, r9
 800a758:	4640      	mov	r0, r8
 800a75a:	6923      	ldr	r3, [r4, #16]
 800a75c:	47d0      	blx	sl
 800a75e:	3001      	adds	r0, #1
 800a760:	d0ab      	beq.n	800a6ba <_printf_i+0x166>
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	079b      	lsls	r3, r3, #30
 800a766:	d413      	bmi.n	800a790 <_printf_i+0x23c>
 800a768:	68e0      	ldr	r0, [r4, #12]
 800a76a:	9b03      	ldr	r3, [sp, #12]
 800a76c:	4298      	cmp	r0, r3
 800a76e:	bfb8      	it	lt
 800a770:	4618      	movlt	r0, r3
 800a772:	e7a4      	b.n	800a6be <_printf_i+0x16a>
 800a774:	2301      	movs	r3, #1
 800a776:	4632      	mov	r2, r6
 800a778:	4649      	mov	r1, r9
 800a77a:	4640      	mov	r0, r8
 800a77c:	47d0      	blx	sl
 800a77e:	3001      	adds	r0, #1
 800a780:	d09b      	beq.n	800a6ba <_printf_i+0x166>
 800a782:	3501      	adds	r5, #1
 800a784:	68e3      	ldr	r3, [r4, #12]
 800a786:	9903      	ldr	r1, [sp, #12]
 800a788:	1a5b      	subs	r3, r3, r1
 800a78a:	42ab      	cmp	r3, r5
 800a78c:	dcf2      	bgt.n	800a774 <_printf_i+0x220>
 800a78e:	e7eb      	b.n	800a768 <_printf_i+0x214>
 800a790:	2500      	movs	r5, #0
 800a792:	f104 0619 	add.w	r6, r4, #25
 800a796:	e7f5      	b.n	800a784 <_printf_i+0x230>
 800a798:	0800e4de 	.word	0x0800e4de
 800a79c:	0800e4ef 	.word	0x0800e4ef

0800a7a0 <siprintf>:
 800a7a0:	b40e      	push	{r1, r2, r3}
 800a7a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7a6:	b500      	push	{lr}
 800a7a8:	b09c      	sub	sp, #112	; 0x70
 800a7aa:	ab1d      	add	r3, sp, #116	; 0x74
 800a7ac:	9002      	str	r0, [sp, #8]
 800a7ae:	9006      	str	r0, [sp, #24]
 800a7b0:	9107      	str	r1, [sp, #28]
 800a7b2:	9104      	str	r1, [sp, #16]
 800a7b4:	4808      	ldr	r0, [pc, #32]	; (800a7d8 <siprintf+0x38>)
 800a7b6:	4909      	ldr	r1, [pc, #36]	; (800a7dc <siprintf+0x3c>)
 800a7b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7bc:	9105      	str	r1, [sp, #20]
 800a7be:	6800      	ldr	r0, [r0, #0]
 800a7c0:	a902      	add	r1, sp, #8
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	f001 fb44 	bl	800be50 <_svfiprintf_r>
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	9b02      	ldr	r3, [sp, #8]
 800a7cc:	701a      	strb	r2, [r3, #0]
 800a7ce:	b01c      	add	sp, #112	; 0x70
 800a7d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7d4:	b003      	add	sp, #12
 800a7d6:	4770      	bx	lr
 800a7d8:	20000010 	.word	0x20000010
 800a7dc:	ffff0208 	.word	0xffff0208

0800a7e0 <quorem>:
 800a7e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	6903      	ldr	r3, [r0, #16]
 800a7e6:	690c      	ldr	r4, [r1, #16]
 800a7e8:	4607      	mov	r7, r0
 800a7ea:	42a3      	cmp	r3, r4
 800a7ec:	f2c0 8083 	blt.w	800a8f6 <quorem+0x116>
 800a7f0:	3c01      	subs	r4, #1
 800a7f2:	f100 0514 	add.w	r5, r0, #20
 800a7f6:	f101 0814 	add.w	r8, r1, #20
 800a7fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a804:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a808:	3301      	adds	r3, #1
 800a80a:	429a      	cmp	r2, r3
 800a80c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a810:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a814:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a818:	d332      	bcc.n	800a880 <quorem+0xa0>
 800a81a:	f04f 0e00 	mov.w	lr, #0
 800a81e:	4640      	mov	r0, r8
 800a820:	46ac      	mov	ip, r5
 800a822:	46f2      	mov	sl, lr
 800a824:	f850 2b04 	ldr.w	r2, [r0], #4
 800a828:	b293      	uxth	r3, r2
 800a82a:	fb06 e303 	mla	r3, r6, r3, lr
 800a82e:	0c12      	lsrs	r2, r2, #16
 800a830:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a834:	fb06 e202 	mla	r2, r6, r2, lr
 800a838:	b29b      	uxth	r3, r3
 800a83a:	ebaa 0303 	sub.w	r3, sl, r3
 800a83e:	f8dc a000 	ldr.w	sl, [ip]
 800a842:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a846:	fa1f fa8a 	uxth.w	sl, sl
 800a84a:	4453      	add	r3, sl
 800a84c:	fa1f fa82 	uxth.w	sl, r2
 800a850:	f8dc 2000 	ldr.w	r2, [ip]
 800a854:	4581      	cmp	r9, r0
 800a856:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a85a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a85e:	b29b      	uxth	r3, r3
 800a860:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a864:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a868:	f84c 3b04 	str.w	r3, [ip], #4
 800a86c:	d2da      	bcs.n	800a824 <quorem+0x44>
 800a86e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a872:	b92b      	cbnz	r3, 800a880 <quorem+0xa0>
 800a874:	9b01      	ldr	r3, [sp, #4]
 800a876:	3b04      	subs	r3, #4
 800a878:	429d      	cmp	r5, r3
 800a87a:	461a      	mov	r2, r3
 800a87c:	d32f      	bcc.n	800a8de <quorem+0xfe>
 800a87e:	613c      	str	r4, [r7, #16]
 800a880:	4638      	mov	r0, r7
 800a882:	f001 f8cd 	bl	800ba20 <__mcmp>
 800a886:	2800      	cmp	r0, #0
 800a888:	db25      	blt.n	800a8d6 <quorem+0xf6>
 800a88a:	4628      	mov	r0, r5
 800a88c:	f04f 0c00 	mov.w	ip, #0
 800a890:	3601      	adds	r6, #1
 800a892:	f858 1b04 	ldr.w	r1, [r8], #4
 800a896:	f8d0 e000 	ldr.w	lr, [r0]
 800a89a:	b28b      	uxth	r3, r1
 800a89c:	ebac 0303 	sub.w	r3, ip, r3
 800a8a0:	fa1f f28e 	uxth.w	r2, lr
 800a8a4:	4413      	add	r3, r2
 800a8a6:	0c0a      	lsrs	r2, r1, #16
 800a8a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a8ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8b6:	45c1      	cmp	r9, r8
 800a8b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a8bc:	f840 3b04 	str.w	r3, [r0], #4
 800a8c0:	d2e7      	bcs.n	800a892 <quorem+0xb2>
 800a8c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8ca:	b922      	cbnz	r2, 800a8d6 <quorem+0xf6>
 800a8cc:	3b04      	subs	r3, #4
 800a8ce:	429d      	cmp	r5, r3
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	d30a      	bcc.n	800a8ea <quorem+0x10a>
 800a8d4:	613c      	str	r4, [r7, #16]
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	b003      	add	sp, #12
 800a8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8de:	6812      	ldr	r2, [r2, #0]
 800a8e0:	3b04      	subs	r3, #4
 800a8e2:	2a00      	cmp	r2, #0
 800a8e4:	d1cb      	bne.n	800a87e <quorem+0x9e>
 800a8e6:	3c01      	subs	r4, #1
 800a8e8:	e7c6      	b.n	800a878 <quorem+0x98>
 800a8ea:	6812      	ldr	r2, [r2, #0]
 800a8ec:	3b04      	subs	r3, #4
 800a8ee:	2a00      	cmp	r2, #0
 800a8f0:	d1f0      	bne.n	800a8d4 <quorem+0xf4>
 800a8f2:	3c01      	subs	r4, #1
 800a8f4:	e7eb      	b.n	800a8ce <quorem+0xee>
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	e7ee      	b.n	800a8d8 <quorem+0xf8>
 800a8fa:	0000      	movs	r0, r0
 800a8fc:	0000      	movs	r0, r0
	...

0800a900 <_dtoa_r>:
 800a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	4616      	mov	r6, r2
 800a906:	461f      	mov	r7, r3
 800a908:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a90a:	b099      	sub	sp, #100	; 0x64
 800a90c:	4605      	mov	r5, r0
 800a90e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a912:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a916:	b974      	cbnz	r4, 800a936 <_dtoa_r+0x36>
 800a918:	2010      	movs	r0, #16
 800a91a:	f000 fde3 	bl	800b4e4 <malloc>
 800a91e:	4602      	mov	r2, r0
 800a920:	6268      	str	r0, [r5, #36]	; 0x24
 800a922:	b920      	cbnz	r0, 800a92e <_dtoa_r+0x2e>
 800a924:	21ea      	movs	r1, #234	; 0xea
 800a926:	4bae      	ldr	r3, [pc, #696]	; (800abe0 <_dtoa_r+0x2e0>)
 800a928:	48ae      	ldr	r0, [pc, #696]	; (800abe4 <_dtoa_r+0x2e4>)
 800a92a:	f001 fba1 	bl	800c070 <__assert_func>
 800a92e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a932:	6004      	str	r4, [r0, #0]
 800a934:	60c4      	str	r4, [r0, #12]
 800a936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a938:	6819      	ldr	r1, [r3, #0]
 800a93a:	b151      	cbz	r1, 800a952 <_dtoa_r+0x52>
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	2301      	movs	r3, #1
 800a940:	4093      	lsls	r3, r2
 800a942:	604a      	str	r2, [r1, #4]
 800a944:	608b      	str	r3, [r1, #8]
 800a946:	4628      	mov	r0, r5
 800a948:	f000 fe30 	bl	800b5ac <_Bfree>
 800a94c:	2200      	movs	r2, #0
 800a94e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	1e3b      	subs	r3, r7, #0
 800a954:	bfaf      	iteee	ge
 800a956:	2300      	movge	r3, #0
 800a958:	2201      	movlt	r2, #1
 800a95a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a95e:	9305      	strlt	r3, [sp, #20]
 800a960:	bfa8      	it	ge
 800a962:	f8c8 3000 	strge.w	r3, [r8]
 800a966:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a96a:	4b9f      	ldr	r3, [pc, #636]	; (800abe8 <_dtoa_r+0x2e8>)
 800a96c:	bfb8      	it	lt
 800a96e:	f8c8 2000 	strlt.w	r2, [r8]
 800a972:	ea33 0309 	bics.w	r3, r3, r9
 800a976:	d119      	bne.n	800a9ac <_dtoa_r+0xac>
 800a978:	f242 730f 	movw	r3, #9999	; 0x270f
 800a97c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a984:	4333      	orrs	r3, r6
 800a986:	f000 8580 	beq.w	800b48a <_dtoa_r+0xb8a>
 800a98a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a98c:	b953      	cbnz	r3, 800a9a4 <_dtoa_r+0xa4>
 800a98e:	4b97      	ldr	r3, [pc, #604]	; (800abec <_dtoa_r+0x2ec>)
 800a990:	e022      	b.n	800a9d8 <_dtoa_r+0xd8>
 800a992:	4b97      	ldr	r3, [pc, #604]	; (800abf0 <_dtoa_r+0x2f0>)
 800a994:	9308      	str	r3, [sp, #32]
 800a996:	3308      	adds	r3, #8
 800a998:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	9808      	ldr	r0, [sp, #32]
 800a99e:	b019      	add	sp, #100	; 0x64
 800a9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a4:	4b91      	ldr	r3, [pc, #580]	; (800abec <_dtoa_r+0x2ec>)
 800a9a6:	9308      	str	r3, [sp, #32]
 800a9a8:	3303      	adds	r3, #3
 800a9aa:	e7f5      	b.n	800a998 <_dtoa_r+0x98>
 800a9ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a9b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a9b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f7f6 f860 	bl	8000a80 <__aeabi_dcmpeq>
 800a9c0:	4680      	mov	r8, r0
 800a9c2:	b158      	cbz	r0, 800a9dc <_dtoa_r+0xdc>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a9c8:	6013      	str	r3, [r2, #0]
 800a9ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 8559 	beq.w	800b484 <_dtoa_r+0xb84>
 800a9d2:	4888      	ldr	r0, [pc, #544]	; (800abf4 <_dtoa_r+0x2f4>)
 800a9d4:	6018      	str	r0, [r3, #0]
 800a9d6:	1e43      	subs	r3, r0, #1
 800a9d8:	9308      	str	r3, [sp, #32]
 800a9da:	e7df      	b.n	800a99c <_dtoa_r+0x9c>
 800a9dc:	ab16      	add	r3, sp, #88	; 0x58
 800a9de:	9301      	str	r3, [sp, #4]
 800a9e0:	ab17      	add	r3, sp, #92	; 0x5c
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a9ea:	f001 f8c5 	bl	800bb78 <__d2b>
 800a9ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a9f2:	4682      	mov	sl, r0
 800a9f4:	2c00      	cmp	r4, #0
 800a9f6:	d07e      	beq.n	800aaf6 <_dtoa_r+0x1f6>
 800a9f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800aa02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa06:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800aa0a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aa0e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800aa12:	2200      	movs	r2, #0
 800aa14:	4b78      	ldr	r3, [pc, #480]	; (800abf8 <_dtoa_r+0x2f8>)
 800aa16:	f7f5 fc13 	bl	8000240 <__aeabi_dsub>
 800aa1a:	a36b      	add	r3, pc, #428	; (adr r3, 800abc8 <_dtoa_r+0x2c8>)
 800aa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa20:	f7f5 fdc6 	bl	80005b0 <__aeabi_dmul>
 800aa24:	a36a      	add	r3, pc, #424	; (adr r3, 800abd0 <_dtoa_r+0x2d0>)
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	f7f5 fc0b 	bl	8000244 <__adddf3>
 800aa2e:	4606      	mov	r6, r0
 800aa30:	4620      	mov	r0, r4
 800aa32:	460f      	mov	r7, r1
 800aa34:	f7f5 fd52 	bl	80004dc <__aeabi_i2d>
 800aa38:	a367      	add	r3, pc, #412	; (adr r3, 800abd8 <_dtoa_r+0x2d8>)
 800aa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3e:	f7f5 fdb7 	bl	80005b0 <__aeabi_dmul>
 800aa42:	4602      	mov	r2, r0
 800aa44:	460b      	mov	r3, r1
 800aa46:	4630      	mov	r0, r6
 800aa48:	4639      	mov	r1, r7
 800aa4a:	f7f5 fbfb 	bl	8000244 <__adddf3>
 800aa4e:	4606      	mov	r6, r0
 800aa50:	460f      	mov	r7, r1
 800aa52:	f7f6 f85d 	bl	8000b10 <__aeabi_d2iz>
 800aa56:	2200      	movs	r2, #0
 800aa58:	4681      	mov	r9, r0
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	4639      	mov	r1, r7
 800aa60:	f7f6 f818 	bl	8000a94 <__aeabi_dcmplt>
 800aa64:	b148      	cbz	r0, 800aa7a <_dtoa_r+0x17a>
 800aa66:	4648      	mov	r0, r9
 800aa68:	f7f5 fd38 	bl	80004dc <__aeabi_i2d>
 800aa6c:	4632      	mov	r2, r6
 800aa6e:	463b      	mov	r3, r7
 800aa70:	f7f6 f806 	bl	8000a80 <__aeabi_dcmpeq>
 800aa74:	b908      	cbnz	r0, 800aa7a <_dtoa_r+0x17a>
 800aa76:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa7a:	f1b9 0f16 	cmp.w	r9, #22
 800aa7e:	d857      	bhi.n	800ab30 <_dtoa_r+0x230>
 800aa80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa84:	4b5d      	ldr	r3, [pc, #372]	; (800abfc <_dtoa_r+0x2fc>)
 800aa86:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800aa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8e:	f7f6 f801 	bl	8000a94 <__aeabi_dcmplt>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d04e      	beq.n	800ab34 <_dtoa_r+0x234>
 800aa96:	2300      	movs	r3, #0
 800aa98:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa9c:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aaa0:	1b1c      	subs	r4, r3, r4
 800aaa2:	1e63      	subs	r3, r4, #1
 800aaa4:	9309      	str	r3, [sp, #36]	; 0x24
 800aaa6:	bf49      	itett	mi
 800aaa8:	f1c4 0301 	rsbmi	r3, r4, #1
 800aaac:	2300      	movpl	r3, #0
 800aaae:	9306      	strmi	r3, [sp, #24]
 800aab0:	2300      	movmi	r3, #0
 800aab2:	bf54      	ite	pl
 800aab4:	9306      	strpl	r3, [sp, #24]
 800aab6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800aab8:	f1b9 0f00 	cmp.w	r9, #0
 800aabc:	db3c      	blt.n	800ab38 <_dtoa_r+0x238>
 800aabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aac0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800aac4:	444b      	add	r3, r9
 800aac6:	9309      	str	r3, [sp, #36]	; 0x24
 800aac8:	2300      	movs	r3, #0
 800aaca:	930a      	str	r3, [sp, #40]	; 0x28
 800aacc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aace:	2b09      	cmp	r3, #9
 800aad0:	d86c      	bhi.n	800abac <_dtoa_r+0x2ac>
 800aad2:	2b05      	cmp	r3, #5
 800aad4:	bfc4      	itt	gt
 800aad6:	3b04      	subgt	r3, #4
 800aad8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800aada:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aadc:	bfc8      	it	gt
 800aade:	2400      	movgt	r4, #0
 800aae0:	f1a3 0302 	sub.w	r3, r3, #2
 800aae4:	bfd8      	it	le
 800aae6:	2401      	movle	r4, #1
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	f200 808b 	bhi.w	800ac04 <_dtoa_r+0x304>
 800aaee:	e8df f003 	tbb	[pc, r3]
 800aaf2:	4f2d      	.short	0x4f2d
 800aaf4:	5b4d      	.short	0x5b4d
 800aaf6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800aafa:	441c      	add	r4, r3
 800aafc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ab00:	2b20      	cmp	r3, #32
 800ab02:	bfc3      	ittte	gt
 800ab04:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ab08:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ab0c:	fa09 f303 	lslgt.w	r3, r9, r3
 800ab10:	f1c3 0320 	rsble	r3, r3, #32
 800ab14:	bfc6      	itte	gt
 800ab16:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ab1a:	4318      	orrgt	r0, r3
 800ab1c:	fa06 f003 	lslle.w	r0, r6, r3
 800ab20:	f7f5 fccc 	bl	80004bc <__aeabi_ui2d>
 800ab24:	2301      	movs	r3, #1
 800ab26:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ab2a:	3c01      	subs	r4, #1
 800ab2c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab2e:	e770      	b.n	800aa12 <_dtoa_r+0x112>
 800ab30:	2301      	movs	r3, #1
 800ab32:	e7b3      	b.n	800aa9c <_dtoa_r+0x19c>
 800ab34:	900f      	str	r0, [sp, #60]	; 0x3c
 800ab36:	e7b2      	b.n	800aa9e <_dtoa_r+0x19e>
 800ab38:	9b06      	ldr	r3, [sp, #24]
 800ab3a:	eba3 0309 	sub.w	r3, r3, r9
 800ab3e:	9306      	str	r3, [sp, #24]
 800ab40:	f1c9 0300 	rsb	r3, r9, #0
 800ab44:	930a      	str	r3, [sp, #40]	; 0x28
 800ab46:	2300      	movs	r3, #0
 800ab48:	930e      	str	r3, [sp, #56]	; 0x38
 800ab4a:	e7bf      	b.n	800aacc <_dtoa_r+0x1cc>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dc59      	bgt.n	800ac0a <_dtoa_r+0x30a>
 800ab56:	f04f 0b01 	mov.w	fp, #1
 800ab5a:	465b      	mov	r3, fp
 800ab5c:	f8cd b008 	str.w	fp, [sp, #8]
 800ab60:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800ab64:	2200      	movs	r2, #0
 800ab66:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ab68:	6042      	str	r2, [r0, #4]
 800ab6a:	2204      	movs	r2, #4
 800ab6c:	f102 0614 	add.w	r6, r2, #20
 800ab70:	429e      	cmp	r6, r3
 800ab72:	6841      	ldr	r1, [r0, #4]
 800ab74:	d94f      	bls.n	800ac16 <_dtoa_r+0x316>
 800ab76:	4628      	mov	r0, r5
 800ab78:	f000 fcd8 	bl	800b52c <_Balloc>
 800ab7c:	9008      	str	r0, [sp, #32]
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d14d      	bne.n	800ac1e <_dtoa_r+0x31e>
 800ab82:	4602      	mov	r2, r0
 800ab84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab88:	4b1d      	ldr	r3, [pc, #116]	; (800ac00 <_dtoa_r+0x300>)
 800ab8a:	e6cd      	b.n	800a928 <_dtoa_r+0x28>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e7de      	b.n	800ab4e <_dtoa_r+0x24e>
 800ab90:	2300      	movs	r3, #0
 800ab92:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab96:	eb09 0b03 	add.w	fp, r9, r3
 800ab9a:	f10b 0301 	add.w	r3, fp, #1
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	9302      	str	r3, [sp, #8]
 800aba2:	bfb8      	it	lt
 800aba4:	2301      	movlt	r3, #1
 800aba6:	e7dd      	b.n	800ab64 <_dtoa_r+0x264>
 800aba8:	2301      	movs	r3, #1
 800abaa:	e7f2      	b.n	800ab92 <_dtoa_r+0x292>
 800abac:	2401      	movs	r4, #1
 800abae:	2300      	movs	r3, #0
 800abb0:	940b      	str	r4, [sp, #44]	; 0x2c
 800abb2:	9322      	str	r3, [sp, #136]	; 0x88
 800abb4:	f04f 3bff 	mov.w	fp, #4294967295
 800abb8:	2200      	movs	r2, #0
 800abba:	2312      	movs	r3, #18
 800abbc:	f8cd b008 	str.w	fp, [sp, #8]
 800abc0:	9223      	str	r2, [sp, #140]	; 0x8c
 800abc2:	e7cf      	b.n	800ab64 <_dtoa_r+0x264>
 800abc4:	f3af 8000 	nop.w
 800abc8:	636f4361 	.word	0x636f4361
 800abcc:	3fd287a7 	.word	0x3fd287a7
 800abd0:	8b60c8b3 	.word	0x8b60c8b3
 800abd4:	3fc68a28 	.word	0x3fc68a28
 800abd8:	509f79fb 	.word	0x509f79fb
 800abdc:	3fd34413 	.word	0x3fd34413
 800abe0:	0800e50d 	.word	0x0800e50d
 800abe4:	0800e524 	.word	0x0800e524
 800abe8:	7ff00000 	.word	0x7ff00000
 800abec:	0800e509 	.word	0x0800e509
 800abf0:	0800e500 	.word	0x0800e500
 800abf4:	0800e4dd 	.word	0x0800e4dd
 800abf8:	3ff80000 	.word	0x3ff80000
 800abfc:	0800e620 	.word	0x0800e620
 800ac00:	0800e583 	.word	0x0800e583
 800ac04:	2301      	movs	r3, #1
 800ac06:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac08:	e7d4      	b.n	800abb4 <_dtoa_r+0x2b4>
 800ac0a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800ac0e:	465b      	mov	r3, fp
 800ac10:	f8cd b008 	str.w	fp, [sp, #8]
 800ac14:	e7a6      	b.n	800ab64 <_dtoa_r+0x264>
 800ac16:	3101      	adds	r1, #1
 800ac18:	6041      	str	r1, [r0, #4]
 800ac1a:	0052      	lsls	r2, r2, #1
 800ac1c:	e7a6      	b.n	800ab6c <_dtoa_r+0x26c>
 800ac1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac20:	9a08      	ldr	r2, [sp, #32]
 800ac22:	601a      	str	r2, [r3, #0]
 800ac24:	9b02      	ldr	r3, [sp, #8]
 800ac26:	2b0e      	cmp	r3, #14
 800ac28:	f200 80a8 	bhi.w	800ad7c <_dtoa_r+0x47c>
 800ac2c:	2c00      	cmp	r4, #0
 800ac2e:	f000 80a5 	beq.w	800ad7c <_dtoa_r+0x47c>
 800ac32:	f1b9 0f00 	cmp.w	r9, #0
 800ac36:	dd34      	ble.n	800aca2 <_dtoa_r+0x3a2>
 800ac38:	4a9a      	ldr	r2, [pc, #616]	; (800aea4 <_dtoa_r+0x5a4>)
 800ac3a:	f009 030f 	and.w	r3, r9, #15
 800ac3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ac42:	f419 7f80 	tst.w	r9, #256	; 0x100
 800ac46:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ac4e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800ac52:	d016      	beq.n	800ac82 <_dtoa_r+0x382>
 800ac54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac58:	4b93      	ldr	r3, [pc, #588]	; (800aea8 <_dtoa_r+0x5a8>)
 800ac5a:	2703      	movs	r7, #3
 800ac5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac60:	f7f5 fdd0 	bl	8000804 <__aeabi_ddiv>
 800ac64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac68:	f004 040f 	and.w	r4, r4, #15
 800ac6c:	4e8e      	ldr	r6, [pc, #568]	; (800aea8 <_dtoa_r+0x5a8>)
 800ac6e:	b954      	cbnz	r4, 800ac86 <_dtoa_r+0x386>
 800ac70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac78:	f7f5 fdc4 	bl	8000804 <__aeabi_ddiv>
 800ac7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac80:	e029      	b.n	800acd6 <_dtoa_r+0x3d6>
 800ac82:	2702      	movs	r7, #2
 800ac84:	e7f2      	b.n	800ac6c <_dtoa_r+0x36c>
 800ac86:	07e1      	lsls	r1, r4, #31
 800ac88:	d508      	bpl.n	800ac9c <_dtoa_r+0x39c>
 800ac8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac92:	f7f5 fc8d 	bl	80005b0 <__aeabi_dmul>
 800ac96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac9a:	3701      	adds	r7, #1
 800ac9c:	1064      	asrs	r4, r4, #1
 800ac9e:	3608      	adds	r6, #8
 800aca0:	e7e5      	b.n	800ac6e <_dtoa_r+0x36e>
 800aca2:	f000 80a5 	beq.w	800adf0 <_dtoa_r+0x4f0>
 800aca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800acaa:	f1c9 0400 	rsb	r4, r9, #0
 800acae:	4b7d      	ldr	r3, [pc, #500]	; (800aea4 <_dtoa_r+0x5a4>)
 800acb0:	f004 020f 	and.w	r2, r4, #15
 800acb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	f7f5 fc78 	bl	80005b0 <__aeabi_dmul>
 800acc0:	2702      	movs	r7, #2
 800acc2:	2300      	movs	r3, #0
 800acc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acc8:	4e77      	ldr	r6, [pc, #476]	; (800aea8 <_dtoa_r+0x5a8>)
 800acca:	1124      	asrs	r4, r4, #4
 800accc:	2c00      	cmp	r4, #0
 800acce:	f040 8084 	bne.w	800adda <_dtoa_r+0x4da>
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1d2      	bne.n	800ac7c <_dtoa_r+0x37c>
 800acd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f000 808b 	beq.w	800adf4 <_dtoa_r+0x4f4>
 800acde:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ace2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ace6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800acea:	2200      	movs	r2, #0
 800acec:	4b6f      	ldr	r3, [pc, #444]	; (800aeac <_dtoa_r+0x5ac>)
 800acee:	f7f5 fed1 	bl	8000a94 <__aeabi_dcmplt>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d07e      	beq.n	800adf4 <_dtoa_r+0x4f4>
 800acf6:	9b02      	ldr	r3, [sp, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d07b      	beq.n	800adf4 <_dtoa_r+0x4f4>
 800acfc:	f1bb 0f00 	cmp.w	fp, #0
 800ad00:	dd38      	ble.n	800ad74 <_dtoa_r+0x474>
 800ad02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad06:	2200      	movs	r2, #0
 800ad08:	4b69      	ldr	r3, [pc, #420]	; (800aeb0 <_dtoa_r+0x5b0>)
 800ad0a:	f7f5 fc51 	bl	80005b0 <__aeabi_dmul>
 800ad0e:	465c      	mov	r4, fp
 800ad10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad14:	f109 38ff 	add.w	r8, r9, #4294967295
 800ad18:	3701      	adds	r7, #1
 800ad1a:	4638      	mov	r0, r7
 800ad1c:	f7f5 fbde 	bl	80004dc <__aeabi_i2d>
 800ad20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad24:	f7f5 fc44 	bl	80005b0 <__aeabi_dmul>
 800ad28:	2200      	movs	r2, #0
 800ad2a:	4b62      	ldr	r3, [pc, #392]	; (800aeb4 <_dtoa_r+0x5b4>)
 800ad2c:	f7f5 fa8a 	bl	8000244 <__adddf3>
 800ad30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ad34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ad38:	9611      	str	r6, [sp, #68]	; 0x44
 800ad3a:	2c00      	cmp	r4, #0
 800ad3c:	d15d      	bne.n	800adfa <_dtoa_r+0x4fa>
 800ad3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad42:	2200      	movs	r2, #0
 800ad44:	4b5c      	ldr	r3, [pc, #368]	; (800aeb8 <_dtoa_r+0x5b8>)
 800ad46:	f7f5 fa7b 	bl	8000240 <__aeabi_dsub>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad52:	4633      	mov	r3, r6
 800ad54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad56:	f7f5 febb 	bl	8000ad0 <__aeabi_dcmpgt>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	f040 829e 	bne.w	800b29c <_dtoa_r+0x99c>
 800ad60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ad6a:	f7f5 fe93 	bl	8000a94 <__aeabi_dcmplt>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	f040 8292 	bne.w	800b298 <_dtoa_r+0x998>
 800ad74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ad78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ad7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f2c0 8153 	blt.w	800b02a <_dtoa_r+0x72a>
 800ad84:	f1b9 0f0e 	cmp.w	r9, #14
 800ad88:	f300 814f 	bgt.w	800b02a <_dtoa_r+0x72a>
 800ad8c:	4b45      	ldr	r3, [pc, #276]	; (800aea4 <_dtoa_r+0x5a4>)
 800ad8e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ad92:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ad9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f280 80db 	bge.w	800af58 <_dtoa_r+0x658>
 800ada2:	9b02      	ldr	r3, [sp, #8]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f300 80d7 	bgt.w	800af58 <_dtoa_r+0x658>
 800adaa:	f040 8274 	bne.w	800b296 <_dtoa_r+0x996>
 800adae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adb2:	2200      	movs	r2, #0
 800adb4:	4b40      	ldr	r3, [pc, #256]	; (800aeb8 <_dtoa_r+0x5b8>)
 800adb6:	f7f5 fbfb 	bl	80005b0 <__aeabi_dmul>
 800adba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adbe:	f7f5 fe7d 	bl	8000abc <__aeabi_dcmpge>
 800adc2:	9c02      	ldr	r4, [sp, #8]
 800adc4:	4626      	mov	r6, r4
 800adc6:	2800      	cmp	r0, #0
 800adc8:	f040 824a 	bne.w	800b260 <_dtoa_r+0x960>
 800adcc:	2331      	movs	r3, #49	; 0x31
 800adce:	9f08      	ldr	r7, [sp, #32]
 800add0:	f109 0901 	add.w	r9, r9, #1
 800add4:	f807 3b01 	strb.w	r3, [r7], #1
 800add8:	e246      	b.n	800b268 <_dtoa_r+0x968>
 800adda:	07e2      	lsls	r2, r4, #31
 800addc:	d505      	bpl.n	800adea <_dtoa_r+0x4ea>
 800adde:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ade2:	f7f5 fbe5 	bl	80005b0 <__aeabi_dmul>
 800ade6:	2301      	movs	r3, #1
 800ade8:	3701      	adds	r7, #1
 800adea:	1064      	asrs	r4, r4, #1
 800adec:	3608      	adds	r6, #8
 800adee:	e76d      	b.n	800accc <_dtoa_r+0x3cc>
 800adf0:	2702      	movs	r7, #2
 800adf2:	e770      	b.n	800acd6 <_dtoa_r+0x3d6>
 800adf4:	46c8      	mov	r8, r9
 800adf6:	9c02      	ldr	r4, [sp, #8]
 800adf8:	e78f      	b.n	800ad1a <_dtoa_r+0x41a>
 800adfa:	9908      	ldr	r1, [sp, #32]
 800adfc:	4b29      	ldr	r3, [pc, #164]	; (800aea4 <_dtoa_r+0x5a4>)
 800adfe:	4421      	add	r1, r4
 800ae00:	9112      	str	r1, [sp, #72]	; 0x48
 800ae02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ae0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae10:	2900      	cmp	r1, #0
 800ae12:	d055      	beq.n	800aec0 <_dtoa_r+0x5c0>
 800ae14:	2000      	movs	r0, #0
 800ae16:	4929      	ldr	r1, [pc, #164]	; (800aebc <_dtoa_r+0x5bc>)
 800ae18:	f7f5 fcf4 	bl	8000804 <__aeabi_ddiv>
 800ae1c:	463b      	mov	r3, r7
 800ae1e:	4632      	mov	r2, r6
 800ae20:	f7f5 fa0e 	bl	8000240 <__aeabi_dsub>
 800ae24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ae28:	9f08      	ldr	r7, [sp, #32]
 800ae2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae2e:	f7f5 fe6f 	bl	8000b10 <__aeabi_d2iz>
 800ae32:	4604      	mov	r4, r0
 800ae34:	f7f5 fb52 	bl	80004dc <__aeabi_i2d>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae40:	f7f5 f9fe 	bl	8000240 <__aeabi_dsub>
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	3430      	adds	r4, #48	; 0x30
 800ae4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae52:	f807 4b01 	strb.w	r4, [r7], #1
 800ae56:	f7f5 fe1d 	bl	8000a94 <__aeabi_dcmplt>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d174      	bne.n	800af48 <_dtoa_r+0x648>
 800ae5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae62:	2000      	movs	r0, #0
 800ae64:	4911      	ldr	r1, [pc, #68]	; (800aeac <_dtoa_r+0x5ac>)
 800ae66:	f7f5 f9eb 	bl	8000240 <__aeabi_dsub>
 800ae6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae6e:	f7f5 fe11 	bl	8000a94 <__aeabi_dcmplt>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	f040 80b6 	bne.w	800afe4 <_dtoa_r+0x6e4>
 800ae78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae7a:	429f      	cmp	r7, r3
 800ae7c:	f43f af7a 	beq.w	800ad74 <_dtoa_r+0x474>
 800ae80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae84:	2200      	movs	r2, #0
 800ae86:	4b0a      	ldr	r3, [pc, #40]	; (800aeb0 <_dtoa_r+0x5b0>)
 800ae88:	f7f5 fb92 	bl	80005b0 <__aeabi_dmul>
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ae92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae96:	4b06      	ldr	r3, [pc, #24]	; (800aeb0 <_dtoa_r+0x5b0>)
 800ae98:	f7f5 fb8a 	bl	80005b0 <__aeabi_dmul>
 800ae9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aea0:	e7c3      	b.n	800ae2a <_dtoa_r+0x52a>
 800aea2:	bf00      	nop
 800aea4:	0800e620 	.word	0x0800e620
 800aea8:	0800e5f8 	.word	0x0800e5f8
 800aeac:	3ff00000 	.word	0x3ff00000
 800aeb0:	40240000 	.word	0x40240000
 800aeb4:	401c0000 	.word	0x401c0000
 800aeb8:	40140000 	.word	0x40140000
 800aebc:	3fe00000 	.word	0x3fe00000
 800aec0:	4630      	mov	r0, r6
 800aec2:	4639      	mov	r1, r7
 800aec4:	f7f5 fb74 	bl	80005b0 <__aeabi_dmul>
 800aec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aeca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aece:	9c08      	ldr	r4, [sp, #32]
 800aed0:	9314      	str	r3, [sp, #80]	; 0x50
 800aed2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aed6:	f7f5 fe1b 	bl	8000b10 <__aeabi_d2iz>
 800aeda:	9015      	str	r0, [sp, #84]	; 0x54
 800aedc:	f7f5 fafe 	bl	80004dc <__aeabi_i2d>
 800aee0:	4602      	mov	r2, r0
 800aee2:	460b      	mov	r3, r1
 800aee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aee8:	f7f5 f9aa 	bl	8000240 <__aeabi_dsub>
 800aeec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aeee:	4606      	mov	r6, r0
 800aef0:	3330      	adds	r3, #48	; 0x30
 800aef2:	f804 3b01 	strb.w	r3, [r4], #1
 800aef6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aef8:	460f      	mov	r7, r1
 800aefa:	429c      	cmp	r4, r3
 800aefc:	f04f 0200 	mov.w	r2, #0
 800af00:	d124      	bne.n	800af4c <_dtoa_r+0x64c>
 800af02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af06:	4bb3      	ldr	r3, [pc, #716]	; (800b1d4 <_dtoa_r+0x8d4>)
 800af08:	f7f5 f99c 	bl	8000244 <__adddf3>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	4630      	mov	r0, r6
 800af12:	4639      	mov	r1, r7
 800af14:	f7f5 fddc 	bl	8000ad0 <__aeabi_dcmpgt>
 800af18:	2800      	cmp	r0, #0
 800af1a:	d162      	bne.n	800afe2 <_dtoa_r+0x6e2>
 800af1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af20:	2000      	movs	r0, #0
 800af22:	49ac      	ldr	r1, [pc, #688]	; (800b1d4 <_dtoa_r+0x8d4>)
 800af24:	f7f5 f98c 	bl	8000240 <__aeabi_dsub>
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	4630      	mov	r0, r6
 800af2e:	4639      	mov	r1, r7
 800af30:	f7f5 fdb0 	bl	8000a94 <__aeabi_dcmplt>
 800af34:	2800      	cmp	r0, #0
 800af36:	f43f af1d 	beq.w	800ad74 <_dtoa_r+0x474>
 800af3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800af3c:	1e7b      	subs	r3, r7, #1
 800af3e:	9314      	str	r3, [sp, #80]	; 0x50
 800af40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800af44:	2b30      	cmp	r3, #48	; 0x30
 800af46:	d0f8      	beq.n	800af3a <_dtoa_r+0x63a>
 800af48:	46c1      	mov	r9, r8
 800af4a:	e03a      	b.n	800afc2 <_dtoa_r+0x6c2>
 800af4c:	4ba2      	ldr	r3, [pc, #648]	; (800b1d8 <_dtoa_r+0x8d8>)
 800af4e:	f7f5 fb2f 	bl	80005b0 <__aeabi_dmul>
 800af52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af56:	e7bc      	b.n	800aed2 <_dtoa_r+0x5d2>
 800af58:	9f08      	ldr	r7, [sp, #32]
 800af5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af62:	f7f5 fc4f 	bl	8000804 <__aeabi_ddiv>
 800af66:	f7f5 fdd3 	bl	8000b10 <__aeabi_d2iz>
 800af6a:	4604      	mov	r4, r0
 800af6c:	f7f5 fab6 	bl	80004dc <__aeabi_i2d>
 800af70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af74:	f7f5 fb1c 	bl	80005b0 <__aeabi_dmul>
 800af78:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800af7c:	460b      	mov	r3, r1
 800af7e:	4602      	mov	r2, r0
 800af80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af84:	f7f5 f95c 	bl	8000240 <__aeabi_dsub>
 800af88:	f807 6b01 	strb.w	r6, [r7], #1
 800af8c:	9e08      	ldr	r6, [sp, #32]
 800af8e:	9b02      	ldr	r3, [sp, #8]
 800af90:	1bbe      	subs	r6, r7, r6
 800af92:	42b3      	cmp	r3, r6
 800af94:	d13a      	bne.n	800b00c <_dtoa_r+0x70c>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	f7f5 f953 	bl	8000244 <__adddf3>
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afa6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afaa:	f7f5 fd91 	bl	8000ad0 <__aeabi_dcmpgt>
 800afae:	bb58      	cbnz	r0, 800b008 <_dtoa_r+0x708>
 800afb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afb8:	f7f5 fd62 	bl	8000a80 <__aeabi_dcmpeq>
 800afbc:	b108      	cbz	r0, 800afc2 <_dtoa_r+0x6c2>
 800afbe:	07e1      	lsls	r1, r4, #31
 800afc0:	d422      	bmi.n	800b008 <_dtoa_r+0x708>
 800afc2:	4628      	mov	r0, r5
 800afc4:	4651      	mov	r1, sl
 800afc6:	f000 faf1 	bl	800b5ac <_Bfree>
 800afca:	2300      	movs	r3, #0
 800afcc:	703b      	strb	r3, [r7, #0]
 800afce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800afd0:	f109 0001 	add.w	r0, r9, #1
 800afd4:	6018      	str	r0, [r3, #0]
 800afd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f43f acdf 	beq.w	800a99c <_dtoa_r+0x9c>
 800afde:	601f      	str	r7, [r3, #0]
 800afe0:	e4dc      	b.n	800a99c <_dtoa_r+0x9c>
 800afe2:	4627      	mov	r7, r4
 800afe4:	463b      	mov	r3, r7
 800afe6:	461f      	mov	r7, r3
 800afe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afec:	2a39      	cmp	r2, #57	; 0x39
 800afee:	d107      	bne.n	800b000 <_dtoa_r+0x700>
 800aff0:	9a08      	ldr	r2, [sp, #32]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d1f7      	bne.n	800afe6 <_dtoa_r+0x6e6>
 800aff6:	2230      	movs	r2, #48	; 0x30
 800aff8:	9908      	ldr	r1, [sp, #32]
 800affa:	f108 0801 	add.w	r8, r8, #1
 800affe:	700a      	strb	r2, [r1, #0]
 800b000:	781a      	ldrb	r2, [r3, #0]
 800b002:	3201      	adds	r2, #1
 800b004:	701a      	strb	r2, [r3, #0]
 800b006:	e79f      	b.n	800af48 <_dtoa_r+0x648>
 800b008:	46c8      	mov	r8, r9
 800b00a:	e7eb      	b.n	800afe4 <_dtoa_r+0x6e4>
 800b00c:	2200      	movs	r2, #0
 800b00e:	4b72      	ldr	r3, [pc, #456]	; (800b1d8 <_dtoa_r+0x8d8>)
 800b010:	f7f5 face 	bl	80005b0 <__aeabi_dmul>
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b01c:	2200      	movs	r2, #0
 800b01e:	2300      	movs	r3, #0
 800b020:	f7f5 fd2e 	bl	8000a80 <__aeabi_dcmpeq>
 800b024:	2800      	cmp	r0, #0
 800b026:	d098      	beq.n	800af5a <_dtoa_r+0x65a>
 800b028:	e7cb      	b.n	800afc2 <_dtoa_r+0x6c2>
 800b02a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b02c:	2a00      	cmp	r2, #0
 800b02e:	f000 80cd 	beq.w	800b1cc <_dtoa_r+0x8cc>
 800b032:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b034:	2a01      	cmp	r2, #1
 800b036:	f300 80af 	bgt.w	800b198 <_dtoa_r+0x898>
 800b03a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b03c:	2a00      	cmp	r2, #0
 800b03e:	f000 80a7 	beq.w	800b190 <_dtoa_r+0x890>
 800b042:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b046:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b048:	9f06      	ldr	r7, [sp, #24]
 800b04a:	9a06      	ldr	r2, [sp, #24]
 800b04c:	2101      	movs	r1, #1
 800b04e:	441a      	add	r2, r3
 800b050:	9206      	str	r2, [sp, #24]
 800b052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b054:	4628      	mov	r0, r5
 800b056:	441a      	add	r2, r3
 800b058:	9209      	str	r2, [sp, #36]	; 0x24
 800b05a:	f000 fb61 	bl	800b720 <__i2b>
 800b05e:	4606      	mov	r6, r0
 800b060:	2f00      	cmp	r7, #0
 800b062:	dd0c      	ble.n	800b07e <_dtoa_r+0x77e>
 800b064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b066:	2b00      	cmp	r3, #0
 800b068:	dd09      	ble.n	800b07e <_dtoa_r+0x77e>
 800b06a:	42bb      	cmp	r3, r7
 800b06c:	bfa8      	it	ge
 800b06e:	463b      	movge	r3, r7
 800b070:	9a06      	ldr	r2, [sp, #24]
 800b072:	1aff      	subs	r7, r7, r3
 800b074:	1ad2      	subs	r2, r2, r3
 800b076:	9206      	str	r2, [sp, #24]
 800b078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	9309      	str	r3, [sp, #36]	; 0x24
 800b07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b080:	b1f3      	cbz	r3, 800b0c0 <_dtoa_r+0x7c0>
 800b082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b084:	2b00      	cmp	r3, #0
 800b086:	f000 80a9 	beq.w	800b1dc <_dtoa_r+0x8dc>
 800b08a:	2c00      	cmp	r4, #0
 800b08c:	dd10      	ble.n	800b0b0 <_dtoa_r+0x7b0>
 800b08e:	4631      	mov	r1, r6
 800b090:	4622      	mov	r2, r4
 800b092:	4628      	mov	r0, r5
 800b094:	f000 fbfe 	bl	800b894 <__pow5mult>
 800b098:	4652      	mov	r2, sl
 800b09a:	4601      	mov	r1, r0
 800b09c:	4606      	mov	r6, r0
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f000 fb54 	bl	800b74c <__multiply>
 800b0a4:	4680      	mov	r8, r0
 800b0a6:	4651      	mov	r1, sl
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	f000 fa7f 	bl	800b5ac <_Bfree>
 800b0ae:	46c2      	mov	sl, r8
 800b0b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0b2:	1b1a      	subs	r2, r3, r4
 800b0b4:	d004      	beq.n	800b0c0 <_dtoa_r+0x7c0>
 800b0b6:	4651      	mov	r1, sl
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	f000 fbeb 	bl	800b894 <__pow5mult>
 800b0be:	4682      	mov	sl, r0
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f000 fb2c 	bl	800b720 <__i2b>
 800b0c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f340 8087 	ble.w	800b1e0 <_dtoa_r+0x8e0>
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4601      	mov	r1, r0
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	f000 fbdc 	bl	800b894 <__pow5mult>
 800b0dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0de:	4604      	mov	r4, r0
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	f340 8080 	ble.w	800b1e6 <_dtoa_r+0x8e6>
 800b0e6:	f04f 0800 	mov.w	r8, #0
 800b0ea:	6923      	ldr	r3, [r4, #16]
 800b0ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0f0:	6918      	ldr	r0, [r3, #16]
 800b0f2:	f000 fac7 	bl	800b684 <__hi0bits>
 800b0f6:	f1c0 0020 	rsb	r0, r0, #32
 800b0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0fc:	4418      	add	r0, r3
 800b0fe:	f010 001f 	ands.w	r0, r0, #31
 800b102:	f000 8092 	beq.w	800b22a <_dtoa_r+0x92a>
 800b106:	f1c0 0320 	rsb	r3, r0, #32
 800b10a:	2b04      	cmp	r3, #4
 800b10c:	f340 808a 	ble.w	800b224 <_dtoa_r+0x924>
 800b110:	f1c0 001c 	rsb	r0, r0, #28
 800b114:	9b06      	ldr	r3, [sp, #24]
 800b116:	4407      	add	r7, r0
 800b118:	4403      	add	r3, r0
 800b11a:	9306      	str	r3, [sp, #24]
 800b11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11e:	4403      	add	r3, r0
 800b120:	9309      	str	r3, [sp, #36]	; 0x24
 800b122:	9b06      	ldr	r3, [sp, #24]
 800b124:	2b00      	cmp	r3, #0
 800b126:	dd05      	ble.n	800b134 <_dtoa_r+0x834>
 800b128:	4651      	mov	r1, sl
 800b12a:	461a      	mov	r2, r3
 800b12c:	4628      	mov	r0, r5
 800b12e:	f000 fc0b 	bl	800b948 <__lshift>
 800b132:	4682      	mov	sl, r0
 800b134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b136:	2b00      	cmp	r3, #0
 800b138:	dd05      	ble.n	800b146 <_dtoa_r+0x846>
 800b13a:	4621      	mov	r1, r4
 800b13c:	461a      	mov	r2, r3
 800b13e:	4628      	mov	r0, r5
 800b140:	f000 fc02 	bl	800b948 <__lshift>
 800b144:	4604      	mov	r4, r0
 800b146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d070      	beq.n	800b22e <_dtoa_r+0x92e>
 800b14c:	4621      	mov	r1, r4
 800b14e:	4650      	mov	r0, sl
 800b150:	f000 fc66 	bl	800ba20 <__mcmp>
 800b154:	2800      	cmp	r0, #0
 800b156:	da6a      	bge.n	800b22e <_dtoa_r+0x92e>
 800b158:	2300      	movs	r3, #0
 800b15a:	4651      	mov	r1, sl
 800b15c:	220a      	movs	r2, #10
 800b15e:	4628      	mov	r0, r5
 800b160:	f000 fa46 	bl	800b5f0 <__multadd>
 800b164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b166:	4682      	mov	sl, r0
 800b168:	f109 39ff 	add.w	r9, r9, #4294967295
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f000 8193 	beq.w	800b498 <_dtoa_r+0xb98>
 800b172:	4631      	mov	r1, r6
 800b174:	2300      	movs	r3, #0
 800b176:	220a      	movs	r2, #10
 800b178:	4628      	mov	r0, r5
 800b17a:	f000 fa39 	bl	800b5f0 <__multadd>
 800b17e:	f1bb 0f00 	cmp.w	fp, #0
 800b182:	4606      	mov	r6, r0
 800b184:	f300 8093 	bgt.w	800b2ae <_dtoa_r+0x9ae>
 800b188:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	dc57      	bgt.n	800b23e <_dtoa_r+0x93e>
 800b18e:	e08e      	b.n	800b2ae <_dtoa_r+0x9ae>
 800b190:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b192:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b196:	e756      	b.n	800b046 <_dtoa_r+0x746>
 800b198:	9b02      	ldr	r3, [sp, #8]
 800b19a:	1e5c      	subs	r4, r3, #1
 800b19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b19e:	42a3      	cmp	r3, r4
 800b1a0:	bfb7      	itett	lt
 800b1a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b1a4:	1b1c      	subge	r4, r3, r4
 800b1a6:	1ae2      	sublt	r2, r4, r3
 800b1a8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b1aa:	bfbe      	ittt	lt
 800b1ac:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b1ae:	189b      	addlt	r3, r3, r2
 800b1b0:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b1b2:	9b02      	ldr	r3, [sp, #8]
 800b1b4:	bfb8      	it	lt
 800b1b6:	2400      	movlt	r4, #0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	bfbb      	ittet	lt
 800b1bc:	9b06      	ldrlt	r3, [sp, #24]
 800b1be:	9a02      	ldrlt	r2, [sp, #8]
 800b1c0:	9f06      	ldrge	r7, [sp, #24]
 800b1c2:	1a9f      	sublt	r7, r3, r2
 800b1c4:	bfac      	ite	ge
 800b1c6:	9b02      	ldrge	r3, [sp, #8]
 800b1c8:	2300      	movlt	r3, #0
 800b1ca:	e73e      	b.n	800b04a <_dtoa_r+0x74a>
 800b1cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b1ce:	9f06      	ldr	r7, [sp, #24]
 800b1d0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b1d2:	e745      	b.n	800b060 <_dtoa_r+0x760>
 800b1d4:	3fe00000 	.word	0x3fe00000
 800b1d8:	40240000 	.word	0x40240000
 800b1dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1de:	e76a      	b.n	800b0b6 <_dtoa_r+0x7b6>
 800b1e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	dc19      	bgt.n	800b21a <_dtoa_r+0x91a>
 800b1e6:	9b04      	ldr	r3, [sp, #16]
 800b1e8:	b9bb      	cbnz	r3, 800b21a <_dtoa_r+0x91a>
 800b1ea:	9b05      	ldr	r3, [sp, #20]
 800b1ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1f0:	b99b      	cbnz	r3, 800b21a <_dtoa_r+0x91a>
 800b1f2:	9b05      	ldr	r3, [sp, #20]
 800b1f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1f8:	0d1b      	lsrs	r3, r3, #20
 800b1fa:	051b      	lsls	r3, r3, #20
 800b1fc:	b183      	cbz	r3, 800b220 <_dtoa_r+0x920>
 800b1fe:	f04f 0801 	mov.w	r8, #1
 800b202:	9b06      	ldr	r3, [sp, #24]
 800b204:	3301      	adds	r3, #1
 800b206:	9306      	str	r3, [sp, #24]
 800b208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b20a:	3301      	adds	r3, #1
 800b20c:	9309      	str	r3, [sp, #36]	; 0x24
 800b20e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b210:	2b00      	cmp	r3, #0
 800b212:	f47f af6a 	bne.w	800b0ea <_dtoa_r+0x7ea>
 800b216:	2001      	movs	r0, #1
 800b218:	e76f      	b.n	800b0fa <_dtoa_r+0x7fa>
 800b21a:	f04f 0800 	mov.w	r8, #0
 800b21e:	e7f6      	b.n	800b20e <_dtoa_r+0x90e>
 800b220:	4698      	mov	r8, r3
 800b222:	e7f4      	b.n	800b20e <_dtoa_r+0x90e>
 800b224:	f43f af7d 	beq.w	800b122 <_dtoa_r+0x822>
 800b228:	4618      	mov	r0, r3
 800b22a:	301c      	adds	r0, #28
 800b22c:	e772      	b.n	800b114 <_dtoa_r+0x814>
 800b22e:	9b02      	ldr	r3, [sp, #8]
 800b230:	2b00      	cmp	r3, #0
 800b232:	dc36      	bgt.n	800b2a2 <_dtoa_r+0x9a2>
 800b234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b236:	2b02      	cmp	r3, #2
 800b238:	dd33      	ble.n	800b2a2 <_dtoa_r+0x9a2>
 800b23a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b23e:	f1bb 0f00 	cmp.w	fp, #0
 800b242:	d10d      	bne.n	800b260 <_dtoa_r+0x960>
 800b244:	4621      	mov	r1, r4
 800b246:	465b      	mov	r3, fp
 800b248:	2205      	movs	r2, #5
 800b24a:	4628      	mov	r0, r5
 800b24c:	f000 f9d0 	bl	800b5f0 <__multadd>
 800b250:	4601      	mov	r1, r0
 800b252:	4604      	mov	r4, r0
 800b254:	4650      	mov	r0, sl
 800b256:	f000 fbe3 	bl	800ba20 <__mcmp>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	f73f adb6 	bgt.w	800adcc <_dtoa_r+0x4cc>
 800b260:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b262:	9f08      	ldr	r7, [sp, #32]
 800b264:	ea6f 0903 	mvn.w	r9, r3
 800b268:	f04f 0800 	mov.w	r8, #0
 800b26c:	4621      	mov	r1, r4
 800b26e:	4628      	mov	r0, r5
 800b270:	f000 f99c 	bl	800b5ac <_Bfree>
 800b274:	2e00      	cmp	r6, #0
 800b276:	f43f aea4 	beq.w	800afc2 <_dtoa_r+0x6c2>
 800b27a:	f1b8 0f00 	cmp.w	r8, #0
 800b27e:	d005      	beq.n	800b28c <_dtoa_r+0x98c>
 800b280:	45b0      	cmp	r8, r6
 800b282:	d003      	beq.n	800b28c <_dtoa_r+0x98c>
 800b284:	4641      	mov	r1, r8
 800b286:	4628      	mov	r0, r5
 800b288:	f000 f990 	bl	800b5ac <_Bfree>
 800b28c:	4631      	mov	r1, r6
 800b28e:	4628      	mov	r0, r5
 800b290:	f000 f98c 	bl	800b5ac <_Bfree>
 800b294:	e695      	b.n	800afc2 <_dtoa_r+0x6c2>
 800b296:	2400      	movs	r4, #0
 800b298:	4626      	mov	r6, r4
 800b29a:	e7e1      	b.n	800b260 <_dtoa_r+0x960>
 800b29c:	46c1      	mov	r9, r8
 800b29e:	4626      	mov	r6, r4
 800b2a0:	e594      	b.n	800adcc <_dtoa_r+0x4cc>
 800b2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2a4:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f000 80fc 	beq.w	800b4a6 <_dtoa_r+0xba6>
 800b2ae:	2f00      	cmp	r7, #0
 800b2b0:	dd05      	ble.n	800b2be <_dtoa_r+0x9be>
 800b2b2:	4631      	mov	r1, r6
 800b2b4:	463a      	mov	r2, r7
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	f000 fb46 	bl	800b948 <__lshift>
 800b2bc:	4606      	mov	r6, r0
 800b2be:	f1b8 0f00 	cmp.w	r8, #0
 800b2c2:	d05c      	beq.n	800b37e <_dtoa_r+0xa7e>
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	6871      	ldr	r1, [r6, #4]
 800b2c8:	f000 f930 	bl	800b52c <_Balloc>
 800b2cc:	4607      	mov	r7, r0
 800b2ce:	b928      	cbnz	r0, 800b2dc <_dtoa_r+0x9dc>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b2d6:	4b7e      	ldr	r3, [pc, #504]	; (800b4d0 <_dtoa_r+0xbd0>)
 800b2d8:	f7ff bb26 	b.w	800a928 <_dtoa_r+0x28>
 800b2dc:	6932      	ldr	r2, [r6, #16]
 800b2de:	f106 010c 	add.w	r1, r6, #12
 800b2e2:	3202      	adds	r2, #2
 800b2e4:	0092      	lsls	r2, r2, #2
 800b2e6:	300c      	adds	r0, #12
 800b2e8:	f000 f912 	bl	800b510 <memcpy>
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	4639      	mov	r1, r7
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f000 fb29 	bl	800b948 <__lshift>
 800b2f6:	46b0      	mov	r8, r6
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	9b08      	ldr	r3, [sp, #32]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	9302      	str	r3, [sp, #8]
 800b300:	9b08      	ldr	r3, [sp, #32]
 800b302:	445b      	add	r3, fp
 800b304:	930a      	str	r3, [sp, #40]	; 0x28
 800b306:	9b04      	ldr	r3, [sp, #16]
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	9309      	str	r3, [sp, #36]	; 0x24
 800b30e:	9b02      	ldr	r3, [sp, #8]
 800b310:	4621      	mov	r1, r4
 800b312:	4650      	mov	r0, sl
 800b314:	f103 3bff 	add.w	fp, r3, #4294967295
 800b318:	f7ff fa62 	bl	800a7e0 <quorem>
 800b31c:	4603      	mov	r3, r0
 800b31e:	4641      	mov	r1, r8
 800b320:	3330      	adds	r3, #48	; 0x30
 800b322:	9004      	str	r0, [sp, #16]
 800b324:	4650      	mov	r0, sl
 800b326:	930b      	str	r3, [sp, #44]	; 0x2c
 800b328:	f000 fb7a 	bl	800ba20 <__mcmp>
 800b32c:	4632      	mov	r2, r6
 800b32e:	9006      	str	r0, [sp, #24]
 800b330:	4621      	mov	r1, r4
 800b332:	4628      	mov	r0, r5
 800b334:	f000 fb90 	bl	800ba58 <__mdiff>
 800b338:	68c2      	ldr	r2, [r0, #12]
 800b33a:	4607      	mov	r7, r0
 800b33c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b33e:	bb02      	cbnz	r2, 800b382 <_dtoa_r+0xa82>
 800b340:	4601      	mov	r1, r0
 800b342:	4650      	mov	r0, sl
 800b344:	f000 fb6c 	bl	800ba20 <__mcmp>
 800b348:	4602      	mov	r2, r0
 800b34a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b34c:	4639      	mov	r1, r7
 800b34e:	4628      	mov	r0, r5
 800b350:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b354:	f000 f92a 	bl	800b5ac <_Bfree>
 800b358:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b35a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b35c:	9f02      	ldr	r7, [sp, #8]
 800b35e:	ea43 0102 	orr.w	r1, r3, r2
 800b362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b364:	430b      	orrs	r3, r1
 800b366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b368:	d10d      	bne.n	800b386 <_dtoa_r+0xa86>
 800b36a:	2b39      	cmp	r3, #57	; 0x39
 800b36c:	d027      	beq.n	800b3be <_dtoa_r+0xabe>
 800b36e:	9a06      	ldr	r2, [sp, #24]
 800b370:	2a00      	cmp	r2, #0
 800b372:	dd01      	ble.n	800b378 <_dtoa_r+0xa78>
 800b374:	9b04      	ldr	r3, [sp, #16]
 800b376:	3331      	adds	r3, #49	; 0x31
 800b378:	f88b 3000 	strb.w	r3, [fp]
 800b37c:	e776      	b.n	800b26c <_dtoa_r+0x96c>
 800b37e:	4630      	mov	r0, r6
 800b380:	e7b9      	b.n	800b2f6 <_dtoa_r+0x9f6>
 800b382:	2201      	movs	r2, #1
 800b384:	e7e2      	b.n	800b34c <_dtoa_r+0xa4c>
 800b386:	9906      	ldr	r1, [sp, #24]
 800b388:	2900      	cmp	r1, #0
 800b38a:	db04      	blt.n	800b396 <_dtoa_r+0xa96>
 800b38c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b38e:	4301      	orrs	r1, r0
 800b390:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b392:	4301      	orrs	r1, r0
 800b394:	d120      	bne.n	800b3d8 <_dtoa_r+0xad8>
 800b396:	2a00      	cmp	r2, #0
 800b398:	ddee      	ble.n	800b378 <_dtoa_r+0xa78>
 800b39a:	4651      	mov	r1, sl
 800b39c:	2201      	movs	r2, #1
 800b39e:	4628      	mov	r0, r5
 800b3a0:	9302      	str	r3, [sp, #8]
 800b3a2:	f000 fad1 	bl	800b948 <__lshift>
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	4682      	mov	sl, r0
 800b3aa:	f000 fb39 	bl	800ba20 <__mcmp>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	9b02      	ldr	r3, [sp, #8]
 800b3b2:	dc02      	bgt.n	800b3ba <_dtoa_r+0xaba>
 800b3b4:	d1e0      	bne.n	800b378 <_dtoa_r+0xa78>
 800b3b6:	07da      	lsls	r2, r3, #31
 800b3b8:	d5de      	bpl.n	800b378 <_dtoa_r+0xa78>
 800b3ba:	2b39      	cmp	r3, #57	; 0x39
 800b3bc:	d1da      	bne.n	800b374 <_dtoa_r+0xa74>
 800b3be:	2339      	movs	r3, #57	; 0x39
 800b3c0:	f88b 3000 	strb.w	r3, [fp]
 800b3c4:	463b      	mov	r3, r7
 800b3c6:	461f      	mov	r7, r3
 800b3c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	2a39      	cmp	r2, #57	; 0x39
 800b3d0:	d050      	beq.n	800b474 <_dtoa_r+0xb74>
 800b3d2:	3201      	adds	r2, #1
 800b3d4:	701a      	strb	r2, [r3, #0]
 800b3d6:	e749      	b.n	800b26c <_dtoa_r+0x96c>
 800b3d8:	2a00      	cmp	r2, #0
 800b3da:	dd03      	ble.n	800b3e4 <_dtoa_r+0xae4>
 800b3dc:	2b39      	cmp	r3, #57	; 0x39
 800b3de:	d0ee      	beq.n	800b3be <_dtoa_r+0xabe>
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	e7c9      	b.n	800b378 <_dtoa_r+0xa78>
 800b3e4:	9a02      	ldr	r2, [sp, #8]
 800b3e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b3e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b3ec:	428a      	cmp	r2, r1
 800b3ee:	d02a      	beq.n	800b446 <_dtoa_r+0xb46>
 800b3f0:	4651      	mov	r1, sl
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	220a      	movs	r2, #10
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f000 f8fa 	bl	800b5f0 <__multadd>
 800b3fc:	45b0      	cmp	r8, r6
 800b3fe:	4682      	mov	sl, r0
 800b400:	f04f 0300 	mov.w	r3, #0
 800b404:	f04f 020a 	mov.w	r2, #10
 800b408:	4641      	mov	r1, r8
 800b40a:	4628      	mov	r0, r5
 800b40c:	d107      	bne.n	800b41e <_dtoa_r+0xb1e>
 800b40e:	f000 f8ef 	bl	800b5f0 <__multadd>
 800b412:	4680      	mov	r8, r0
 800b414:	4606      	mov	r6, r0
 800b416:	9b02      	ldr	r3, [sp, #8]
 800b418:	3301      	adds	r3, #1
 800b41a:	9302      	str	r3, [sp, #8]
 800b41c:	e777      	b.n	800b30e <_dtoa_r+0xa0e>
 800b41e:	f000 f8e7 	bl	800b5f0 <__multadd>
 800b422:	4631      	mov	r1, r6
 800b424:	4680      	mov	r8, r0
 800b426:	2300      	movs	r3, #0
 800b428:	220a      	movs	r2, #10
 800b42a:	4628      	mov	r0, r5
 800b42c:	f000 f8e0 	bl	800b5f0 <__multadd>
 800b430:	4606      	mov	r6, r0
 800b432:	e7f0      	b.n	800b416 <_dtoa_r+0xb16>
 800b434:	f1bb 0f00 	cmp.w	fp, #0
 800b438:	bfcc      	ite	gt
 800b43a:	465f      	movgt	r7, fp
 800b43c:	2701      	movle	r7, #1
 800b43e:	f04f 0800 	mov.w	r8, #0
 800b442:	9a08      	ldr	r2, [sp, #32]
 800b444:	4417      	add	r7, r2
 800b446:	4651      	mov	r1, sl
 800b448:	2201      	movs	r2, #1
 800b44a:	4628      	mov	r0, r5
 800b44c:	9302      	str	r3, [sp, #8]
 800b44e:	f000 fa7b 	bl	800b948 <__lshift>
 800b452:	4621      	mov	r1, r4
 800b454:	4682      	mov	sl, r0
 800b456:	f000 fae3 	bl	800ba20 <__mcmp>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	dcb2      	bgt.n	800b3c4 <_dtoa_r+0xac4>
 800b45e:	d102      	bne.n	800b466 <_dtoa_r+0xb66>
 800b460:	9b02      	ldr	r3, [sp, #8]
 800b462:	07db      	lsls	r3, r3, #31
 800b464:	d4ae      	bmi.n	800b3c4 <_dtoa_r+0xac4>
 800b466:	463b      	mov	r3, r7
 800b468:	461f      	mov	r7, r3
 800b46a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b46e:	2a30      	cmp	r2, #48	; 0x30
 800b470:	d0fa      	beq.n	800b468 <_dtoa_r+0xb68>
 800b472:	e6fb      	b.n	800b26c <_dtoa_r+0x96c>
 800b474:	9a08      	ldr	r2, [sp, #32]
 800b476:	429a      	cmp	r2, r3
 800b478:	d1a5      	bne.n	800b3c6 <_dtoa_r+0xac6>
 800b47a:	2331      	movs	r3, #49	; 0x31
 800b47c:	f109 0901 	add.w	r9, r9, #1
 800b480:	7013      	strb	r3, [r2, #0]
 800b482:	e6f3      	b.n	800b26c <_dtoa_r+0x96c>
 800b484:	4b13      	ldr	r3, [pc, #76]	; (800b4d4 <_dtoa_r+0xbd4>)
 800b486:	f7ff baa7 	b.w	800a9d8 <_dtoa_r+0xd8>
 800b48a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f47f aa80 	bne.w	800a992 <_dtoa_r+0x92>
 800b492:	4b11      	ldr	r3, [pc, #68]	; (800b4d8 <_dtoa_r+0xbd8>)
 800b494:	f7ff baa0 	b.w	800a9d8 <_dtoa_r+0xd8>
 800b498:	f1bb 0f00 	cmp.w	fp, #0
 800b49c:	dc03      	bgt.n	800b4a6 <_dtoa_r+0xba6>
 800b49e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	f73f aecc 	bgt.w	800b23e <_dtoa_r+0x93e>
 800b4a6:	9f08      	ldr	r7, [sp, #32]
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	4650      	mov	r0, sl
 800b4ac:	f7ff f998 	bl	800a7e0 <quorem>
 800b4b0:	9a08      	ldr	r2, [sp, #32]
 800b4b2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b4b6:	f807 3b01 	strb.w	r3, [r7], #1
 800b4ba:	1aba      	subs	r2, r7, r2
 800b4bc:	4593      	cmp	fp, r2
 800b4be:	ddb9      	ble.n	800b434 <_dtoa_r+0xb34>
 800b4c0:	4651      	mov	r1, sl
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	220a      	movs	r2, #10
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	f000 f892 	bl	800b5f0 <__multadd>
 800b4cc:	4682      	mov	sl, r0
 800b4ce:	e7eb      	b.n	800b4a8 <_dtoa_r+0xba8>
 800b4d0:	0800e583 	.word	0x0800e583
 800b4d4:	0800e4dc 	.word	0x0800e4dc
 800b4d8:	0800e500 	.word	0x0800e500

0800b4dc <_localeconv_r>:
 800b4dc:	4800      	ldr	r0, [pc, #0]	; (800b4e0 <_localeconv_r+0x4>)
 800b4de:	4770      	bx	lr
 800b4e0:	20000164 	.word	0x20000164

0800b4e4 <malloc>:
 800b4e4:	4b02      	ldr	r3, [pc, #8]	; (800b4f0 <malloc+0xc>)
 800b4e6:	4601      	mov	r1, r0
 800b4e8:	6818      	ldr	r0, [r3, #0]
 800b4ea:	f000 bbfb 	b.w	800bce4 <_malloc_r>
 800b4ee:	bf00      	nop
 800b4f0:	20000010 	.word	0x20000010

0800b4f4 <memchr>:
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	b510      	push	{r4, lr}
 800b4f8:	b2c9      	uxtb	r1, r1
 800b4fa:	4402      	add	r2, r0
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	4618      	mov	r0, r3
 800b500:	d101      	bne.n	800b506 <memchr+0x12>
 800b502:	2000      	movs	r0, #0
 800b504:	e003      	b.n	800b50e <memchr+0x1a>
 800b506:	7804      	ldrb	r4, [r0, #0]
 800b508:	3301      	adds	r3, #1
 800b50a:	428c      	cmp	r4, r1
 800b50c:	d1f6      	bne.n	800b4fc <memchr+0x8>
 800b50e:	bd10      	pop	{r4, pc}

0800b510 <memcpy>:
 800b510:	440a      	add	r2, r1
 800b512:	4291      	cmp	r1, r2
 800b514:	f100 33ff 	add.w	r3, r0, #4294967295
 800b518:	d100      	bne.n	800b51c <memcpy+0xc>
 800b51a:	4770      	bx	lr
 800b51c:	b510      	push	{r4, lr}
 800b51e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b522:	4291      	cmp	r1, r2
 800b524:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b528:	d1f9      	bne.n	800b51e <memcpy+0xe>
 800b52a:	bd10      	pop	{r4, pc}

0800b52c <_Balloc>:
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b530:	4604      	mov	r4, r0
 800b532:	460d      	mov	r5, r1
 800b534:	b976      	cbnz	r6, 800b554 <_Balloc+0x28>
 800b536:	2010      	movs	r0, #16
 800b538:	f7ff ffd4 	bl	800b4e4 <malloc>
 800b53c:	4602      	mov	r2, r0
 800b53e:	6260      	str	r0, [r4, #36]	; 0x24
 800b540:	b920      	cbnz	r0, 800b54c <_Balloc+0x20>
 800b542:	2166      	movs	r1, #102	; 0x66
 800b544:	4b17      	ldr	r3, [pc, #92]	; (800b5a4 <_Balloc+0x78>)
 800b546:	4818      	ldr	r0, [pc, #96]	; (800b5a8 <_Balloc+0x7c>)
 800b548:	f000 fd92 	bl	800c070 <__assert_func>
 800b54c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b550:	6006      	str	r6, [r0, #0]
 800b552:	60c6      	str	r6, [r0, #12]
 800b554:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b556:	68f3      	ldr	r3, [r6, #12]
 800b558:	b183      	cbz	r3, 800b57c <_Balloc+0x50>
 800b55a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b562:	b9b8      	cbnz	r0, 800b594 <_Balloc+0x68>
 800b564:	2101      	movs	r1, #1
 800b566:	fa01 f605 	lsl.w	r6, r1, r5
 800b56a:	1d72      	adds	r2, r6, #5
 800b56c:	4620      	mov	r0, r4
 800b56e:	0092      	lsls	r2, r2, #2
 800b570:	f000 fb5e 	bl	800bc30 <_calloc_r>
 800b574:	b160      	cbz	r0, 800b590 <_Balloc+0x64>
 800b576:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b57a:	e00e      	b.n	800b59a <_Balloc+0x6e>
 800b57c:	2221      	movs	r2, #33	; 0x21
 800b57e:	2104      	movs	r1, #4
 800b580:	4620      	mov	r0, r4
 800b582:	f000 fb55 	bl	800bc30 <_calloc_r>
 800b586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b588:	60f0      	str	r0, [r6, #12]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d1e4      	bne.n	800b55a <_Balloc+0x2e>
 800b590:	2000      	movs	r0, #0
 800b592:	bd70      	pop	{r4, r5, r6, pc}
 800b594:	6802      	ldr	r2, [r0, #0]
 800b596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b59a:	2300      	movs	r3, #0
 800b59c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5a0:	e7f7      	b.n	800b592 <_Balloc+0x66>
 800b5a2:	bf00      	nop
 800b5a4:	0800e50d 	.word	0x0800e50d
 800b5a8:	0800e594 	.word	0x0800e594

0800b5ac <_Bfree>:
 800b5ac:	b570      	push	{r4, r5, r6, lr}
 800b5ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	b976      	cbnz	r6, 800b5d4 <_Bfree+0x28>
 800b5b6:	2010      	movs	r0, #16
 800b5b8:	f7ff ff94 	bl	800b4e4 <malloc>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	6268      	str	r0, [r5, #36]	; 0x24
 800b5c0:	b920      	cbnz	r0, 800b5cc <_Bfree+0x20>
 800b5c2:	218a      	movs	r1, #138	; 0x8a
 800b5c4:	4b08      	ldr	r3, [pc, #32]	; (800b5e8 <_Bfree+0x3c>)
 800b5c6:	4809      	ldr	r0, [pc, #36]	; (800b5ec <_Bfree+0x40>)
 800b5c8:	f000 fd52 	bl	800c070 <__assert_func>
 800b5cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5d0:	6006      	str	r6, [r0, #0]
 800b5d2:	60c6      	str	r6, [r0, #12]
 800b5d4:	b13c      	cbz	r4, 800b5e6 <_Bfree+0x3a>
 800b5d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5d8:	6862      	ldr	r2, [r4, #4]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5e0:	6021      	str	r1, [r4, #0]
 800b5e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5e6:	bd70      	pop	{r4, r5, r6, pc}
 800b5e8:	0800e50d 	.word	0x0800e50d
 800b5ec:	0800e594 	.word	0x0800e594

0800b5f0 <__multadd>:
 800b5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f4:	4698      	mov	r8, r3
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	690e      	ldr	r6, [r1, #16]
 800b5fc:	4607      	mov	r7, r0
 800b5fe:	f101 0014 	add.w	r0, r1, #20
 800b602:	6805      	ldr	r5, [r0, #0]
 800b604:	3301      	adds	r3, #1
 800b606:	b2a9      	uxth	r1, r5
 800b608:	fb02 8101 	mla	r1, r2, r1, r8
 800b60c:	0c2d      	lsrs	r5, r5, #16
 800b60e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b612:	fb02 c505 	mla	r5, r2, r5, ip
 800b616:	b289      	uxth	r1, r1
 800b618:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b61c:	429e      	cmp	r6, r3
 800b61e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b622:	f840 1b04 	str.w	r1, [r0], #4
 800b626:	dcec      	bgt.n	800b602 <__multadd+0x12>
 800b628:	f1b8 0f00 	cmp.w	r8, #0
 800b62c:	d022      	beq.n	800b674 <__multadd+0x84>
 800b62e:	68a3      	ldr	r3, [r4, #8]
 800b630:	42b3      	cmp	r3, r6
 800b632:	dc19      	bgt.n	800b668 <__multadd+0x78>
 800b634:	6861      	ldr	r1, [r4, #4]
 800b636:	4638      	mov	r0, r7
 800b638:	3101      	adds	r1, #1
 800b63a:	f7ff ff77 	bl	800b52c <_Balloc>
 800b63e:	4605      	mov	r5, r0
 800b640:	b928      	cbnz	r0, 800b64e <__multadd+0x5e>
 800b642:	4602      	mov	r2, r0
 800b644:	21b5      	movs	r1, #181	; 0xb5
 800b646:	4b0d      	ldr	r3, [pc, #52]	; (800b67c <__multadd+0x8c>)
 800b648:	480d      	ldr	r0, [pc, #52]	; (800b680 <__multadd+0x90>)
 800b64a:	f000 fd11 	bl	800c070 <__assert_func>
 800b64e:	6922      	ldr	r2, [r4, #16]
 800b650:	f104 010c 	add.w	r1, r4, #12
 800b654:	3202      	adds	r2, #2
 800b656:	0092      	lsls	r2, r2, #2
 800b658:	300c      	adds	r0, #12
 800b65a:	f7ff ff59 	bl	800b510 <memcpy>
 800b65e:	4621      	mov	r1, r4
 800b660:	4638      	mov	r0, r7
 800b662:	f7ff ffa3 	bl	800b5ac <_Bfree>
 800b666:	462c      	mov	r4, r5
 800b668:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b66c:	3601      	adds	r6, #1
 800b66e:	f8c3 8014 	str.w	r8, [r3, #20]
 800b672:	6126      	str	r6, [r4, #16]
 800b674:	4620      	mov	r0, r4
 800b676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b67a:	bf00      	nop
 800b67c:	0800e583 	.word	0x0800e583
 800b680:	0800e594 	.word	0x0800e594

0800b684 <__hi0bits>:
 800b684:	0c02      	lsrs	r2, r0, #16
 800b686:	0412      	lsls	r2, r2, #16
 800b688:	4603      	mov	r3, r0
 800b68a:	b9ca      	cbnz	r2, 800b6c0 <__hi0bits+0x3c>
 800b68c:	0403      	lsls	r3, r0, #16
 800b68e:	2010      	movs	r0, #16
 800b690:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b694:	bf04      	itt	eq
 800b696:	021b      	lsleq	r3, r3, #8
 800b698:	3008      	addeq	r0, #8
 800b69a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b69e:	bf04      	itt	eq
 800b6a0:	011b      	lsleq	r3, r3, #4
 800b6a2:	3004      	addeq	r0, #4
 800b6a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b6a8:	bf04      	itt	eq
 800b6aa:	009b      	lsleq	r3, r3, #2
 800b6ac:	3002      	addeq	r0, #2
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	db05      	blt.n	800b6be <__hi0bits+0x3a>
 800b6b2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b6b6:	f100 0001 	add.w	r0, r0, #1
 800b6ba:	bf08      	it	eq
 800b6bc:	2020      	moveq	r0, #32
 800b6be:	4770      	bx	lr
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	e7e5      	b.n	800b690 <__hi0bits+0xc>

0800b6c4 <__lo0bits>:
 800b6c4:	6803      	ldr	r3, [r0, #0]
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	f013 0007 	ands.w	r0, r3, #7
 800b6cc:	d00b      	beq.n	800b6e6 <__lo0bits+0x22>
 800b6ce:	07d9      	lsls	r1, r3, #31
 800b6d0:	d422      	bmi.n	800b718 <__lo0bits+0x54>
 800b6d2:	0798      	lsls	r0, r3, #30
 800b6d4:	bf49      	itett	mi
 800b6d6:	085b      	lsrmi	r3, r3, #1
 800b6d8:	089b      	lsrpl	r3, r3, #2
 800b6da:	2001      	movmi	r0, #1
 800b6dc:	6013      	strmi	r3, [r2, #0]
 800b6de:	bf5c      	itt	pl
 800b6e0:	2002      	movpl	r0, #2
 800b6e2:	6013      	strpl	r3, [r2, #0]
 800b6e4:	4770      	bx	lr
 800b6e6:	b299      	uxth	r1, r3
 800b6e8:	b909      	cbnz	r1, 800b6ee <__lo0bits+0x2a>
 800b6ea:	2010      	movs	r0, #16
 800b6ec:	0c1b      	lsrs	r3, r3, #16
 800b6ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b6f2:	bf04      	itt	eq
 800b6f4:	0a1b      	lsreq	r3, r3, #8
 800b6f6:	3008      	addeq	r0, #8
 800b6f8:	0719      	lsls	r1, r3, #28
 800b6fa:	bf04      	itt	eq
 800b6fc:	091b      	lsreq	r3, r3, #4
 800b6fe:	3004      	addeq	r0, #4
 800b700:	0799      	lsls	r1, r3, #30
 800b702:	bf04      	itt	eq
 800b704:	089b      	lsreq	r3, r3, #2
 800b706:	3002      	addeq	r0, #2
 800b708:	07d9      	lsls	r1, r3, #31
 800b70a:	d403      	bmi.n	800b714 <__lo0bits+0x50>
 800b70c:	085b      	lsrs	r3, r3, #1
 800b70e:	f100 0001 	add.w	r0, r0, #1
 800b712:	d003      	beq.n	800b71c <__lo0bits+0x58>
 800b714:	6013      	str	r3, [r2, #0]
 800b716:	4770      	bx	lr
 800b718:	2000      	movs	r0, #0
 800b71a:	4770      	bx	lr
 800b71c:	2020      	movs	r0, #32
 800b71e:	4770      	bx	lr

0800b720 <__i2b>:
 800b720:	b510      	push	{r4, lr}
 800b722:	460c      	mov	r4, r1
 800b724:	2101      	movs	r1, #1
 800b726:	f7ff ff01 	bl	800b52c <_Balloc>
 800b72a:	4602      	mov	r2, r0
 800b72c:	b928      	cbnz	r0, 800b73a <__i2b+0x1a>
 800b72e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b732:	4b04      	ldr	r3, [pc, #16]	; (800b744 <__i2b+0x24>)
 800b734:	4804      	ldr	r0, [pc, #16]	; (800b748 <__i2b+0x28>)
 800b736:	f000 fc9b 	bl	800c070 <__assert_func>
 800b73a:	2301      	movs	r3, #1
 800b73c:	6144      	str	r4, [r0, #20]
 800b73e:	6103      	str	r3, [r0, #16]
 800b740:	bd10      	pop	{r4, pc}
 800b742:	bf00      	nop
 800b744:	0800e583 	.word	0x0800e583
 800b748:	0800e594 	.word	0x0800e594

0800b74c <__multiply>:
 800b74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b750:	4614      	mov	r4, r2
 800b752:	690a      	ldr	r2, [r1, #16]
 800b754:	6923      	ldr	r3, [r4, #16]
 800b756:	460d      	mov	r5, r1
 800b758:	429a      	cmp	r2, r3
 800b75a:	bfbe      	ittt	lt
 800b75c:	460b      	movlt	r3, r1
 800b75e:	4625      	movlt	r5, r4
 800b760:	461c      	movlt	r4, r3
 800b762:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b766:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b76a:	68ab      	ldr	r3, [r5, #8]
 800b76c:	6869      	ldr	r1, [r5, #4]
 800b76e:	eb0a 0709 	add.w	r7, sl, r9
 800b772:	42bb      	cmp	r3, r7
 800b774:	b085      	sub	sp, #20
 800b776:	bfb8      	it	lt
 800b778:	3101      	addlt	r1, #1
 800b77a:	f7ff fed7 	bl	800b52c <_Balloc>
 800b77e:	b930      	cbnz	r0, 800b78e <__multiply+0x42>
 800b780:	4602      	mov	r2, r0
 800b782:	f240 115d 	movw	r1, #349	; 0x15d
 800b786:	4b41      	ldr	r3, [pc, #260]	; (800b88c <__multiply+0x140>)
 800b788:	4841      	ldr	r0, [pc, #260]	; (800b890 <__multiply+0x144>)
 800b78a:	f000 fc71 	bl	800c070 <__assert_func>
 800b78e:	f100 0614 	add.w	r6, r0, #20
 800b792:	4633      	mov	r3, r6
 800b794:	2200      	movs	r2, #0
 800b796:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b79a:	4543      	cmp	r3, r8
 800b79c:	d31e      	bcc.n	800b7dc <__multiply+0x90>
 800b79e:	f105 0c14 	add.w	ip, r5, #20
 800b7a2:	f104 0314 	add.w	r3, r4, #20
 800b7a6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b7aa:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b7ae:	9202      	str	r2, [sp, #8]
 800b7b0:	ebac 0205 	sub.w	r2, ip, r5
 800b7b4:	3a15      	subs	r2, #21
 800b7b6:	f022 0203 	bic.w	r2, r2, #3
 800b7ba:	3204      	adds	r2, #4
 800b7bc:	f105 0115 	add.w	r1, r5, #21
 800b7c0:	458c      	cmp	ip, r1
 800b7c2:	bf38      	it	cc
 800b7c4:	2204      	movcc	r2, #4
 800b7c6:	9201      	str	r2, [sp, #4]
 800b7c8:	9a02      	ldr	r2, [sp, #8]
 800b7ca:	9303      	str	r3, [sp, #12]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d808      	bhi.n	800b7e2 <__multiply+0x96>
 800b7d0:	2f00      	cmp	r7, #0
 800b7d2:	dc55      	bgt.n	800b880 <__multiply+0x134>
 800b7d4:	6107      	str	r7, [r0, #16]
 800b7d6:	b005      	add	sp, #20
 800b7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7dc:	f843 2b04 	str.w	r2, [r3], #4
 800b7e0:	e7db      	b.n	800b79a <__multiply+0x4e>
 800b7e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b7e6:	f1ba 0f00 	cmp.w	sl, #0
 800b7ea:	d020      	beq.n	800b82e <__multiply+0xe2>
 800b7ec:	46b1      	mov	r9, r6
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f105 0e14 	add.w	lr, r5, #20
 800b7f4:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b7f8:	f8d9 b000 	ldr.w	fp, [r9]
 800b7fc:	b2a1      	uxth	r1, r4
 800b7fe:	fa1f fb8b 	uxth.w	fp, fp
 800b802:	fb0a b101 	mla	r1, sl, r1, fp
 800b806:	4411      	add	r1, r2
 800b808:	f8d9 2000 	ldr.w	r2, [r9]
 800b80c:	0c24      	lsrs	r4, r4, #16
 800b80e:	0c12      	lsrs	r2, r2, #16
 800b810:	fb0a 2404 	mla	r4, sl, r4, r2
 800b814:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b818:	b289      	uxth	r1, r1
 800b81a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b81e:	45f4      	cmp	ip, lr
 800b820:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b824:	f849 1b04 	str.w	r1, [r9], #4
 800b828:	d8e4      	bhi.n	800b7f4 <__multiply+0xa8>
 800b82a:	9901      	ldr	r1, [sp, #4]
 800b82c:	5072      	str	r2, [r6, r1]
 800b82e:	9a03      	ldr	r2, [sp, #12]
 800b830:	3304      	adds	r3, #4
 800b832:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b836:	f1b9 0f00 	cmp.w	r9, #0
 800b83a:	d01f      	beq.n	800b87c <__multiply+0x130>
 800b83c:	46b6      	mov	lr, r6
 800b83e:	f04f 0a00 	mov.w	sl, #0
 800b842:	6834      	ldr	r4, [r6, #0]
 800b844:	f105 0114 	add.w	r1, r5, #20
 800b848:	880a      	ldrh	r2, [r1, #0]
 800b84a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b84e:	b2a4      	uxth	r4, r4
 800b850:	fb09 b202 	mla	r2, r9, r2, fp
 800b854:	4492      	add	sl, r2
 800b856:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b85a:	f84e 4b04 	str.w	r4, [lr], #4
 800b85e:	f851 4b04 	ldr.w	r4, [r1], #4
 800b862:	f8be 2000 	ldrh.w	r2, [lr]
 800b866:	0c24      	lsrs	r4, r4, #16
 800b868:	fb09 2404 	mla	r4, r9, r4, r2
 800b86c:	458c      	cmp	ip, r1
 800b86e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b872:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b876:	d8e7      	bhi.n	800b848 <__multiply+0xfc>
 800b878:	9a01      	ldr	r2, [sp, #4]
 800b87a:	50b4      	str	r4, [r6, r2]
 800b87c:	3604      	adds	r6, #4
 800b87e:	e7a3      	b.n	800b7c8 <__multiply+0x7c>
 800b880:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1a5      	bne.n	800b7d4 <__multiply+0x88>
 800b888:	3f01      	subs	r7, #1
 800b88a:	e7a1      	b.n	800b7d0 <__multiply+0x84>
 800b88c:	0800e583 	.word	0x0800e583
 800b890:	0800e594 	.word	0x0800e594

0800b894 <__pow5mult>:
 800b894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b898:	4615      	mov	r5, r2
 800b89a:	f012 0203 	ands.w	r2, r2, #3
 800b89e:	4606      	mov	r6, r0
 800b8a0:	460f      	mov	r7, r1
 800b8a2:	d007      	beq.n	800b8b4 <__pow5mult+0x20>
 800b8a4:	4c25      	ldr	r4, [pc, #148]	; (800b93c <__pow5mult+0xa8>)
 800b8a6:	3a01      	subs	r2, #1
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8ae:	f7ff fe9f 	bl	800b5f0 <__multadd>
 800b8b2:	4607      	mov	r7, r0
 800b8b4:	10ad      	asrs	r5, r5, #2
 800b8b6:	d03d      	beq.n	800b934 <__pow5mult+0xa0>
 800b8b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b8ba:	b97c      	cbnz	r4, 800b8dc <__pow5mult+0x48>
 800b8bc:	2010      	movs	r0, #16
 800b8be:	f7ff fe11 	bl	800b4e4 <malloc>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	6270      	str	r0, [r6, #36]	; 0x24
 800b8c6:	b928      	cbnz	r0, 800b8d4 <__pow5mult+0x40>
 800b8c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b8cc:	4b1c      	ldr	r3, [pc, #112]	; (800b940 <__pow5mult+0xac>)
 800b8ce:	481d      	ldr	r0, [pc, #116]	; (800b944 <__pow5mult+0xb0>)
 800b8d0:	f000 fbce 	bl	800c070 <__assert_func>
 800b8d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8d8:	6004      	str	r4, [r0, #0]
 800b8da:	60c4      	str	r4, [r0, #12]
 800b8dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b8e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8e4:	b94c      	cbnz	r4, 800b8fa <__pow5mult+0x66>
 800b8e6:	f240 2171 	movw	r1, #625	; 0x271
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f7ff ff18 	bl	800b720 <__i2b>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8f8:	6003      	str	r3, [r0, #0]
 800b8fa:	f04f 0900 	mov.w	r9, #0
 800b8fe:	07eb      	lsls	r3, r5, #31
 800b900:	d50a      	bpl.n	800b918 <__pow5mult+0x84>
 800b902:	4639      	mov	r1, r7
 800b904:	4622      	mov	r2, r4
 800b906:	4630      	mov	r0, r6
 800b908:	f7ff ff20 	bl	800b74c <__multiply>
 800b90c:	4680      	mov	r8, r0
 800b90e:	4639      	mov	r1, r7
 800b910:	4630      	mov	r0, r6
 800b912:	f7ff fe4b 	bl	800b5ac <_Bfree>
 800b916:	4647      	mov	r7, r8
 800b918:	106d      	asrs	r5, r5, #1
 800b91a:	d00b      	beq.n	800b934 <__pow5mult+0xa0>
 800b91c:	6820      	ldr	r0, [r4, #0]
 800b91e:	b938      	cbnz	r0, 800b930 <__pow5mult+0x9c>
 800b920:	4622      	mov	r2, r4
 800b922:	4621      	mov	r1, r4
 800b924:	4630      	mov	r0, r6
 800b926:	f7ff ff11 	bl	800b74c <__multiply>
 800b92a:	6020      	str	r0, [r4, #0]
 800b92c:	f8c0 9000 	str.w	r9, [r0]
 800b930:	4604      	mov	r4, r0
 800b932:	e7e4      	b.n	800b8fe <__pow5mult+0x6a>
 800b934:	4638      	mov	r0, r7
 800b936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b93a:	bf00      	nop
 800b93c:	0800e6e8 	.word	0x0800e6e8
 800b940:	0800e50d 	.word	0x0800e50d
 800b944:	0800e594 	.word	0x0800e594

0800b948 <__lshift>:
 800b948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b94c:	460c      	mov	r4, r1
 800b94e:	4607      	mov	r7, r0
 800b950:	4691      	mov	r9, r2
 800b952:	6923      	ldr	r3, [r4, #16]
 800b954:	6849      	ldr	r1, [r1, #4]
 800b956:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b95a:	68a3      	ldr	r3, [r4, #8]
 800b95c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b960:	f108 0601 	add.w	r6, r8, #1
 800b964:	42b3      	cmp	r3, r6
 800b966:	db0b      	blt.n	800b980 <__lshift+0x38>
 800b968:	4638      	mov	r0, r7
 800b96a:	f7ff fddf 	bl	800b52c <_Balloc>
 800b96e:	4605      	mov	r5, r0
 800b970:	b948      	cbnz	r0, 800b986 <__lshift+0x3e>
 800b972:	4602      	mov	r2, r0
 800b974:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b978:	4b27      	ldr	r3, [pc, #156]	; (800ba18 <__lshift+0xd0>)
 800b97a:	4828      	ldr	r0, [pc, #160]	; (800ba1c <__lshift+0xd4>)
 800b97c:	f000 fb78 	bl	800c070 <__assert_func>
 800b980:	3101      	adds	r1, #1
 800b982:	005b      	lsls	r3, r3, #1
 800b984:	e7ee      	b.n	800b964 <__lshift+0x1c>
 800b986:	2300      	movs	r3, #0
 800b988:	f100 0114 	add.w	r1, r0, #20
 800b98c:	f100 0210 	add.w	r2, r0, #16
 800b990:	4618      	mov	r0, r3
 800b992:	4553      	cmp	r3, sl
 800b994:	db33      	blt.n	800b9fe <__lshift+0xb6>
 800b996:	6920      	ldr	r0, [r4, #16]
 800b998:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b99c:	f104 0314 	add.w	r3, r4, #20
 800b9a0:	f019 091f 	ands.w	r9, r9, #31
 800b9a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9ac:	d02b      	beq.n	800ba06 <__lshift+0xbe>
 800b9ae:	468a      	mov	sl, r1
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f1c9 0e20 	rsb	lr, r9, #32
 800b9b6:	6818      	ldr	r0, [r3, #0]
 800b9b8:	fa00 f009 	lsl.w	r0, r0, r9
 800b9bc:	4302      	orrs	r2, r0
 800b9be:	f84a 2b04 	str.w	r2, [sl], #4
 800b9c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9c6:	459c      	cmp	ip, r3
 800b9c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9cc:	d8f3      	bhi.n	800b9b6 <__lshift+0x6e>
 800b9ce:	ebac 0304 	sub.w	r3, ip, r4
 800b9d2:	3b15      	subs	r3, #21
 800b9d4:	f023 0303 	bic.w	r3, r3, #3
 800b9d8:	3304      	adds	r3, #4
 800b9da:	f104 0015 	add.w	r0, r4, #21
 800b9de:	4584      	cmp	ip, r0
 800b9e0:	bf38      	it	cc
 800b9e2:	2304      	movcc	r3, #4
 800b9e4:	50ca      	str	r2, [r1, r3]
 800b9e6:	b10a      	cbz	r2, 800b9ec <__lshift+0xa4>
 800b9e8:	f108 0602 	add.w	r6, r8, #2
 800b9ec:	3e01      	subs	r6, #1
 800b9ee:	4638      	mov	r0, r7
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	612e      	str	r6, [r5, #16]
 800b9f4:	f7ff fdda 	bl	800b5ac <_Bfree>
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba02:	3301      	adds	r3, #1
 800ba04:	e7c5      	b.n	800b992 <__lshift+0x4a>
 800ba06:	3904      	subs	r1, #4
 800ba08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba0c:	459c      	cmp	ip, r3
 800ba0e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba12:	d8f9      	bhi.n	800ba08 <__lshift+0xc0>
 800ba14:	e7ea      	b.n	800b9ec <__lshift+0xa4>
 800ba16:	bf00      	nop
 800ba18:	0800e583 	.word	0x0800e583
 800ba1c:	0800e594 	.word	0x0800e594

0800ba20 <__mcmp>:
 800ba20:	4603      	mov	r3, r0
 800ba22:	690a      	ldr	r2, [r1, #16]
 800ba24:	6900      	ldr	r0, [r0, #16]
 800ba26:	b530      	push	{r4, r5, lr}
 800ba28:	1a80      	subs	r0, r0, r2
 800ba2a:	d10d      	bne.n	800ba48 <__mcmp+0x28>
 800ba2c:	3314      	adds	r3, #20
 800ba2e:	3114      	adds	r1, #20
 800ba30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba40:	4295      	cmp	r5, r2
 800ba42:	d002      	beq.n	800ba4a <__mcmp+0x2a>
 800ba44:	d304      	bcc.n	800ba50 <__mcmp+0x30>
 800ba46:	2001      	movs	r0, #1
 800ba48:	bd30      	pop	{r4, r5, pc}
 800ba4a:	42a3      	cmp	r3, r4
 800ba4c:	d3f4      	bcc.n	800ba38 <__mcmp+0x18>
 800ba4e:	e7fb      	b.n	800ba48 <__mcmp+0x28>
 800ba50:	f04f 30ff 	mov.w	r0, #4294967295
 800ba54:	e7f8      	b.n	800ba48 <__mcmp+0x28>
	...

0800ba58 <__mdiff>:
 800ba58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5c:	460c      	mov	r4, r1
 800ba5e:	4606      	mov	r6, r0
 800ba60:	4611      	mov	r1, r2
 800ba62:	4620      	mov	r0, r4
 800ba64:	4692      	mov	sl, r2
 800ba66:	f7ff ffdb 	bl	800ba20 <__mcmp>
 800ba6a:	1e05      	subs	r5, r0, #0
 800ba6c:	d111      	bne.n	800ba92 <__mdiff+0x3a>
 800ba6e:	4629      	mov	r1, r5
 800ba70:	4630      	mov	r0, r6
 800ba72:	f7ff fd5b 	bl	800b52c <_Balloc>
 800ba76:	4602      	mov	r2, r0
 800ba78:	b928      	cbnz	r0, 800ba86 <__mdiff+0x2e>
 800ba7a:	f240 2132 	movw	r1, #562	; 0x232
 800ba7e:	4b3c      	ldr	r3, [pc, #240]	; (800bb70 <__mdiff+0x118>)
 800ba80:	483c      	ldr	r0, [pc, #240]	; (800bb74 <__mdiff+0x11c>)
 800ba82:	f000 faf5 	bl	800c070 <__assert_func>
 800ba86:	2301      	movs	r3, #1
 800ba88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba92:	bfa4      	itt	ge
 800ba94:	4653      	movge	r3, sl
 800ba96:	46a2      	movge	sl, r4
 800ba98:	4630      	mov	r0, r6
 800ba9a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ba9e:	bfa6      	itte	ge
 800baa0:	461c      	movge	r4, r3
 800baa2:	2500      	movge	r5, #0
 800baa4:	2501      	movlt	r5, #1
 800baa6:	f7ff fd41 	bl	800b52c <_Balloc>
 800baaa:	4602      	mov	r2, r0
 800baac:	b918      	cbnz	r0, 800bab6 <__mdiff+0x5e>
 800baae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bab2:	4b2f      	ldr	r3, [pc, #188]	; (800bb70 <__mdiff+0x118>)
 800bab4:	e7e4      	b.n	800ba80 <__mdiff+0x28>
 800bab6:	f100 0814 	add.w	r8, r0, #20
 800baba:	f8da 7010 	ldr.w	r7, [sl, #16]
 800babe:	60c5      	str	r5, [r0, #12]
 800bac0:	f04f 0c00 	mov.w	ip, #0
 800bac4:	f10a 0514 	add.w	r5, sl, #20
 800bac8:	f10a 0010 	add.w	r0, sl, #16
 800bacc:	46c2      	mov	sl, r8
 800bace:	6926      	ldr	r6, [r4, #16]
 800bad0:	f104 0914 	add.w	r9, r4, #20
 800bad4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bad8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800badc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bae0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bae4:	fa1f f18b 	uxth.w	r1, fp
 800bae8:	4461      	add	r1, ip
 800baea:	fa1f fc83 	uxth.w	ip, r3
 800baee:	0c1b      	lsrs	r3, r3, #16
 800baf0:	eba1 010c 	sub.w	r1, r1, ip
 800baf4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800baf8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bafc:	b289      	uxth	r1, r1
 800bafe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bb02:	454e      	cmp	r6, r9
 800bb04:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bb08:	f84a 3b04 	str.w	r3, [sl], #4
 800bb0c:	d8e6      	bhi.n	800badc <__mdiff+0x84>
 800bb0e:	1b33      	subs	r3, r6, r4
 800bb10:	3b15      	subs	r3, #21
 800bb12:	f023 0303 	bic.w	r3, r3, #3
 800bb16:	3415      	adds	r4, #21
 800bb18:	3304      	adds	r3, #4
 800bb1a:	42a6      	cmp	r6, r4
 800bb1c:	bf38      	it	cc
 800bb1e:	2304      	movcc	r3, #4
 800bb20:	441d      	add	r5, r3
 800bb22:	4443      	add	r3, r8
 800bb24:	461e      	mov	r6, r3
 800bb26:	462c      	mov	r4, r5
 800bb28:	4574      	cmp	r4, lr
 800bb2a:	d30e      	bcc.n	800bb4a <__mdiff+0xf2>
 800bb2c:	f10e 0103 	add.w	r1, lr, #3
 800bb30:	1b49      	subs	r1, r1, r5
 800bb32:	f021 0103 	bic.w	r1, r1, #3
 800bb36:	3d03      	subs	r5, #3
 800bb38:	45ae      	cmp	lr, r5
 800bb3a:	bf38      	it	cc
 800bb3c:	2100      	movcc	r1, #0
 800bb3e:	4419      	add	r1, r3
 800bb40:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bb44:	b18b      	cbz	r3, 800bb6a <__mdiff+0x112>
 800bb46:	6117      	str	r7, [r2, #16]
 800bb48:	e7a0      	b.n	800ba8c <__mdiff+0x34>
 800bb4a:	f854 8b04 	ldr.w	r8, [r4], #4
 800bb4e:	fa1f f188 	uxth.w	r1, r8
 800bb52:	4461      	add	r1, ip
 800bb54:	1408      	asrs	r0, r1, #16
 800bb56:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800bb5a:	b289      	uxth	r1, r1
 800bb5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bb60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb64:	f846 1b04 	str.w	r1, [r6], #4
 800bb68:	e7de      	b.n	800bb28 <__mdiff+0xd0>
 800bb6a:	3f01      	subs	r7, #1
 800bb6c:	e7e8      	b.n	800bb40 <__mdiff+0xe8>
 800bb6e:	bf00      	nop
 800bb70:	0800e583 	.word	0x0800e583
 800bb74:	0800e594 	.word	0x0800e594

0800bb78 <__d2b>:
 800bb78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bb82:	4690      	mov	r8, r2
 800bb84:	461d      	mov	r5, r3
 800bb86:	f7ff fcd1 	bl	800b52c <_Balloc>
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	b930      	cbnz	r0, 800bb9c <__d2b+0x24>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	f240 310a 	movw	r1, #778	; 0x30a
 800bb94:	4b24      	ldr	r3, [pc, #144]	; (800bc28 <__d2b+0xb0>)
 800bb96:	4825      	ldr	r0, [pc, #148]	; (800bc2c <__d2b+0xb4>)
 800bb98:	f000 fa6a 	bl	800c070 <__assert_func>
 800bb9c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bba0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bba4:	bb2d      	cbnz	r5, 800bbf2 <__d2b+0x7a>
 800bba6:	9301      	str	r3, [sp, #4]
 800bba8:	f1b8 0300 	subs.w	r3, r8, #0
 800bbac:	d026      	beq.n	800bbfc <__d2b+0x84>
 800bbae:	4668      	mov	r0, sp
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	f7ff fd87 	bl	800b6c4 <__lo0bits>
 800bbb6:	9900      	ldr	r1, [sp, #0]
 800bbb8:	b1f0      	cbz	r0, 800bbf8 <__d2b+0x80>
 800bbba:	9a01      	ldr	r2, [sp, #4]
 800bbbc:	f1c0 0320 	rsb	r3, r0, #32
 800bbc0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc4:	430b      	orrs	r3, r1
 800bbc6:	40c2      	lsrs	r2, r0
 800bbc8:	6163      	str	r3, [r4, #20]
 800bbca:	9201      	str	r2, [sp, #4]
 800bbcc:	9b01      	ldr	r3, [sp, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	bf14      	ite	ne
 800bbd2:	2102      	movne	r1, #2
 800bbd4:	2101      	moveq	r1, #1
 800bbd6:	61a3      	str	r3, [r4, #24]
 800bbd8:	6121      	str	r1, [r4, #16]
 800bbda:	b1c5      	cbz	r5, 800bc0e <__d2b+0x96>
 800bbdc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bbe0:	4405      	add	r5, r0
 800bbe2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bbe6:	603d      	str	r5, [r7, #0]
 800bbe8:	6030      	str	r0, [r6, #0]
 800bbea:	4620      	mov	r0, r4
 800bbec:	b002      	add	sp, #8
 800bbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbf6:	e7d6      	b.n	800bba6 <__d2b+0x2e>
 800bbf8:	6161      	str	r1, [r4, #20]
 800bbfa:	e7e7      	b.n	800bbcc <__d2b+0x54>
 800bbfc:	a801      	add	r0, sp, #4
 800bbfe:	f7ff fd61 	bl	800b6c4 <__lo0bits>
 800bc02:	2101      	movs	r1, #1
 800bc04:	9b01      	ldr	r3, [sp, #4]
 800bc06:	6121      	str	r1, [r4, #16]
 800bc08:	6163      	str	r3, [r4, #20]
 800bc0a:	3020      	adds	r0, #32
 800bc0c:	e7e5      	b.n	800bbda <__d2b+0x62>
 800bc0e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800bc12:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc16:	6038      	str	r0, [r7, #0]
 800bc18:	6918      	ldr	r0, [r3, #16]
 800bc1a:	f7ff fd33 	bl	800b684 <__hi0bits>
 800bc1e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bc22:	6031      	str	r1, [r6, #0]
 800bc24:	e7e1      	b.n	800bbea <__d2b+0x72>
 800bc26:	bf00      	nop
 800bc28:	0800e583 	.word	0x0800e583
 800bc2c:	0800e594 	.word	0x0800e594

0800bc30 <_calloc_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	fb02 f501 	mul.w	r5, r2, r1
 800bc36:	4629      	mov	r1, r5
 800bc38:	f000 f854 	bl	800bce4 <_malloc_r>
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	b118      	cbz	r0, 800bc48 <_calloc_r+0x18>
 800bc40:	462a      	mov	r2, r5
 800bc42:	2100      	movs	r1, #0
 800bc44:	f7fe f944 	bl	8009ed0 <memset>
 800bc48:	4620      	mov	r0, r4
 800bc4a:	bd38      	pop	{r3, r4, r5, pc}

0800bc4c <_free_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4605      	mov	r5, r0
 800bc50:	2900      	cmp	r1, #0
 800bc52:	d043      	beq.n	800bcdc <_free_r+0x90>
 800bc54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc58:	1f0c      	subs	r4, r1, #4
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	bfb8      	it	lt
 800bc5e:	18e4      	addlt	r4, r4, r3
 800bc60:	f000 fa62 	bl	800c128 <__malloc_lock>
 800bc64:	4a1e      	ldr	r2, [pc, #120]	; (800bce0 <_free_r+0x94>)
 800bc66:	6813      	ldr	r3, [r2, #0]
 800bc68:	4610      	mov	r0, r2
 800bc6a:	b933      	cbnz	r3, 800bc7a <_free_r+0x2e>
 800bc6c:	6063      	str	r3, [r4, #4]
 800bc6e:	6014      	str	r4, [r2, #0]
 800bc70:	4628      	mov	r0, r5
 800bc72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc76:	f000 ba5d 	b.w	800c134 <__malloc_unlock>
 800bc7a:	42a3      	cmp	r3, r4
 800bc7c:	d90a      	bls.n	800bc94 <_free_r+0x48>
 800bc7e:	6821      	ldr	r1, [r4, #0]
 800bc80:	1862      	adds	r2, r4, r1
 800bc82:	4293      	cmp	r3, r2
 800bc84:	bf01      	itttt	eq
 800bc86:	681a      	ldreq	r2, [r3, #0]
 800bc88:	685b      	ldreq	r3, [r3, #4]
 800bc8a:	1852      	addeq	r2, r2, r1
 800bc8c:	6022      	streq	r2, [r4, #0]
 800bc8e:	6063      	str	r3, [r4, #4]
 800bc90:	6004      	str	r4, [r0, #0]
 800bc92:	e7ed      	b.n	800bc70 <_free_r+0x24>
 800bc94:	461a      	mov	r2, r3
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	b10b      	cbz	r3, 800bc9e <_free_r+0x52>
 800bc9a:	42a3      	cmp	r3, r4
 800bc9c:	d9fa      	bls.n	800bc94 <_free_r+0x48>
 800bc9e:	6811      	ldr	r1, [r2, #0]
 800bca0:	1850      	adds	r0, r2, r1
 800bca2:	42a0      	cmp	r0, r4
 800bca4:	d10b      	bne.n	800bcbe <_free_r+0x72>
 800bca6:	6820      	ldr	r0, [r4, #0]
 800bca8:	4401      	add	r1, r0
 800bcaa:	1850      	adds	r0, r2, r1
 800bcac:	4283      	cmp	r3, r0
 800bcae:	6011      	str	r1, [r2, #0]
 800bcb0:	d1de      	bne.n	800bc70 <_free_r+0x24>
 800bcb2:	6818      	ldr	r0, [r3, #0]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	4401      	add	r1, r0
 800bcb8:	6011      	str	r1, [r2, #0]
 800bcba:	6053      	str	r3, [r2, #4]
 800bcbc:	e7d8      	b.n	800bc70 <_free_r+0x24>
 800bcbe:	d902      	bls.n	800bcc6 <_free_r+0x7a>
 800bcc0:	230c      	movs	r3, #12
 800bcc2:	602b      	str	r3, [r5, #0]
 800bcc4:	e7d4      	b.n	800bc70 <_free_r+0x24>
 800bcc6:	6820      	ldr	r0, [r4, #0]
 800bcc8:	1821      	adds	r1, r4, r0
 800bcca:	428b      	cmp	r3, r1
 800bccc:	bf01      	itttt	eq
 800bcce:	6819      	ldreq	r1, [r3, #0]
 800bcd0:	685b      	ldreq	r3, [r3, #4]
 800bcd2:	1809      	addeq	r1, r1, r0
 800bcd4:	6021      	streq	r1, [r4, #0]
 800bcd6:	6063      	str	r3, [r4, #4]
 800bcd8:	6054      	str	r4, [r2, #4]
 800bcda:	e7c9      	b.n	800bc70 <_free_r+0x24>
 800bcdc:	bd38      	pop	{r3, r4, r5, pc}
 800bcde:	bf00      	nop
 800bce0:	20000204 	.word	0x20000204

0800bce4 <_malloc_r>:
 800bce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce6:	1ccd      	adds	r5, r1, #3
 800bce8:	f025 0503 	bic.w	r5, r5, #3
 800bcec:	3508      	adds	r5, #8
 800bcee:	2d0c      	cmp	r5, #12
 800bcf0:	bf38      	it	cc
 800bcf2:	250c      	movcc	r5, #12
 800bcf4:	2d00      	cmp	r5, #0
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	db01      	blt.n	800bcfe <_malloc_r+0x1a>
 800bcfa:	42a9      	cmp	r1, r5
 800bcfc:	d903      	bls.n	800bd06 <_malloc_r+0x22>
 800bcfe:	230c      	movs	r3, #12
 800bd00:	6033      	str	r3, [r6, #0]
 800bd02:	2000      	movs	r0, #0
 800bd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd06:	f000 fa0f 	bl	800c128 <__malloc_lock>
 800bd0a:	4921      	ldr	r1, [pc, #132]	; (800bd90 <_malloc_r+0xac>)
 800bd0c:	680a      	ldr	r2, [r1, #0]
 800bd0e:	4614      	mov	r4, r2
 800bd10:	b99c      	cbnz	r4, 800bd3a <_malloc_r+0x56>
 800bd12:	4f20      	ldr	r7, [pc, #128]	; (800bd94 <_malloc_r+0xb0>)
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	b923      	cbnz	r3, 800bd22 <_malloc_r+0x3e>
 800bd18:	4621      	mov	r1, r4
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	f000 f998 	bl	800c050 <_sbrk_r>
 800bd20:	6038      	str	r0, [r7, #0]
 800bd22:	4629      	mov	r1, r5
 800bd24:	4630      	mov	r0, r6
 800bd26:	f000 f993 	bl	800c050 <_sbrk_r>
 800bd2a:	1c43      	adds	r3, r0, #1
 800bd2c:	d123      	bne.n	800bd76 <_malloc_r+0x92>
 800bd2e:	230c      	movs	r3, #12
 800bd30:	4630      	mov	r0, r6
 800bd32:	6033      	str	r3, [r6, #0]
 800bd34:	f000 f9fe 	bl	800c134 <__malloc_unlock>
 800bd38:	e7e3      	b.n	800bd02 <_malloc_r+0x1e>
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	1b5b      	subs	r3, r3, r5
 800bd3e:	d417      	bmi.n	800bd70 <_malloc_r+0x8c>
 800bd40:	2b0b      	cmp	r3, #11
 800bd42:	d903      	bls.n	800bd4c <_malloc_r+0x68>
 800bd44:	6023      	str	r3, [r4, #0]
 800bd46:	441c      	add	r4, r3
 800bd48:	6025      	str	r5, [r4, #0]
 800bd4a:	e004      	b.n	800bd56 <_malloc_r+0x72>
 800bd4c:	6863      	ldr	r3, [r4, #4]
 800bd4e:	42a2      	cmp	r2, r4
 800bd50:	bf0c      	ite	eq
 800bd52:	600b      	streq	r3, [r1, #0]
 800bd54:	6053      	strne	r3, [r2, #4]
 800bd56:	4630      	mov	r0, r6
 800bd58:	f000 f9ec 	bl	800c134 <__malloc_unlock>
 800bd5c:	f104 000b 	add.w	r0, r4, #11
 800bd60:	1d23      	adds	r3, r4, #4
 800bd62:	f020 0007 	bic.w	r0, r0, #7
 800bd66:	1ac2      	subs	r2, r0, r3
 800bd68:	d0cc      	beq.n	800bd04 <_malloc_r+0x20>
 800bd6a:	1a1b      	subs	r3, r3, r0
 800bd6c:	50a3      	str	r3, [r4, r2]
 800bd6e:	e7c9      	b.n	800bd04 <_malloc_r+0x20>
 800bd70:	4622      	mov	r2, r4
 800bd72:	6864      	ldr	r4, [r4, #4]
 800bd74:	e7cc      	b.n	800bd10 <_malloc_r+0x2c>
 800bd76:	1cc4      	adds	r4, r0, #3
 800bd78:	f024 0403 	bic.w	r4, r4, #3
 800bd7c:	42a0      	cmp	r0, r4
 800bd7e:	d0e3      	beq.n	800bd48 <_malloc_r+0x64>
 800bd80:	1a21      	subs	r1, r4, r0
 800bd82:	4630      	mov	r0, r6
 800bd84:	f000 f964 	bl	800c050 <_sbrk_r>
 800bd88:	3001      	adds	r0, #1
 800bd8a:	d1dd      	bne.n	800bd48 <_malloc_r+0x64>
 800bd8c:	e7cf      	b.n	800bd2e <_malloc_r+0x4a>
 800bd8e:	bf00      	nop
 800bd90:	20000204 	.word	0x20000204
 800bd94:	20000208 	.word	0x20000208

0800bd98 <__ssputs_r>:
 800bd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd9c:	688e      	ldr	r6, [r1, #8]
 800bd9e:	4682      	mov	sl, r0
 800bda0:	429e      	cmp	r6, r3
 800bda2:	460c      	mov	r4, r1
 800bda4:	4690      	mov	r8, r2
 800bda6:	461f      	mov	r7, r3
 800bda8:	d838      	bhi.n	800be1c <__ssputs_r+0x84>
 800bdaa:	898a      	ldrh	r2, [r1, #12]
 800bdac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdb0:	d032      	beq.n	800be18 <__ssputs_r+0x80>
 800bdb2:	6825      	ldr	r5, [r4, #0]
 800bdb4:	6909      	ldr	r1, [r1, #16]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	eba5 0901 	sub.w	r9, r5, r1
 800bdbc:	6965      	ldr	r5, [r4, #20]
 800bdbe:	444b      	add	r3, r9
 800bdc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdc8:	106d      	asrs	r5, r5, #1
 800bdca:	429d      	cmp	r5, r3
 800bdcc:	bf38      	it	cc
 800bdce:	461d      	movcc	r5, r3
 800bdd0:	0553      	lsls	r3, r2, #21
 800bdd2:	d531      	bpl.n	800be38 <__ssputs_r+0xa0>
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	f7ff ff85 	bl	800bce4 <_malloc_r>
 800bdda:	4606      	mov	r6, r0
 800bddc:	b950      	cbnz	r0, 800bdf4 <__ssputs_r+0x5c>
 800bdde:	230c      	movs	r3, #12
 800bde0:	f04f 30ff 	mov.w	r0, #4294967295
 800bde4:	f8ca 3000 	str.w	r3, [sl]
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdee:	81a3      	strh	r3, [r4, #12]
 800bdf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf4:	464a      	mov	r2, r9
 800bdf6:	6921      	ldr	r1, [r4, #16]
 800bdf8:	f7ff fb8a 	bl	800b510 <memcpy>
 800bdfc:	89a3      	ldrh	r3, [r4, #12]
 800bdfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be06:	81a3      	strh	r3, [r4, #12]
 800be08:	6126      	str	r6, [r4, #16]
 800be0a:	444e      	add	r6, r9
 800be0c:	6026      	str	r6, [r4, #0]
 800be0e:	463e      	mov	r6, r7
 800be10:	6165      	str	r5, [r4, #20]
 800be12:	eba5 0509 	sub.w	r5, r5, r9
 800be16:	60a5      	str	r5, [r4, #8]
 800be18:	42be      	cmp	r6, r7
 800be1a:	d900      	bls.n	800be1e <__ssputs_r+0x86>
 800be1c:	463e      	mov	r6, r7
 800be1e:	4632      	mov	r2, r6
 800be20:	4641      	mov	r1, r8
 800be22:	6820      	ldr	r0, [r4, #0]
 800be24:	f000 f966 	bl	800c0f4 <memmove>
 800be28:	68a3      	ldr	r3, [r4, #8]
 800be2a:	6822      	ldr	r2, [r4, #0]
 800be2c:	1b9b      	subs	r3, r3, r6
 800be2e:	4432      	add	r2, r6
 800be30:	2000      	movs	r0, #0
 800be32:	60a3      	str	r3, [r4, #8]
 800be34:	6022      	str	r2, [r4, #0]
 800be36:	e7db      	b.n	800bdf0 <__ssputs_r+0x58>
 800be38:	462a      	mov	r2, r5
 800be3a:	f000 f981 	bl	800c140 <_realloc_r>
 800be3e:	4606      	mov	r6, r0
 800be40:	2800      	cmp	r0, #0
 800be42:	d1e1      	bne.n	800be08 <__ssputs_r+0x70>
 800be44:	4650      	mov	r0, sl
 800be46:	6921      	ldr	r1, [r4, #16]
 800be48:	f7ff ff00 	bl	800bc4c <_free_r>
 800be4c:	e7c7      	b.n	800bdde <__ssputs_r+0x46>
	...

0800be50 <_svfiprintf_r>:
 800be50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be54:	4698      	mov	r8, r3
 800be56:	898b      	ldrh	r3, [r1, #12]
 800be58:	4607      	mov	r7, r0
 800be5a:	061b      	lsls	r3, r3, #24
 800be5c:	460d      	mov	r5, r1
 800be5e:	4614      	mov	r4, r2
 800be60:	b09d      	sub	sp, #116	; 0x74
 800be62:	d50e      	bpl.n	800be82 <_svfiprintf_r+0x32>
 800be64:	690b      	ldr	r3, [r1, #16]
 800be66:	b963      	cbnz	r3, 800be82 <_svfiprintf_r+0x32>
 800be68:	2140      	movs	r1, #64	; 0x40
 800be6a:	f7ff ff3b 	bl	800bce4 <_malloc_r>
 800be6e:	6028      	str	r0, [r5, #0]
 800be70:	6128      	str	r0, [r5, #16]
 800be72:	b920      	cbnz	r0, 800be7e <_svfiprintf_r+0x2e>
 800be74:	230c      	movs	r3, #12
 800be76:	603b      	str	r3, [r7, #0]
 800be78:	f04f 30ff 	mov.w	r0, #4294967295
 800be7c:	e0d1      	b.n	800c022 <_svfiprintf_r+0x1d2>
 800be7e:	2340      	movs	r3, #64	; 0x40
 800be80:	616b      	str	r3, [r5, #20]
 800be82:	2300      	movs	r3, #0
 800be84:	9309      	str	r3, [sp, #36]	; 0x24
 800be86:	2320      	movs	r3, #32
 800be88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be8c:	2330      	movs	r3, #48	; 0x30
 800be8e:	f04f 0901 	mov.w	r9, #1
 800be92:	f8cd 800c 	str.w	r8, [sp, #12]
 800be96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c03c <_svfiprintf_r+0x1ec>
 800be9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be9e:	4623      	mov	r3, r4
 800bea0:	469a      	mov	sl, r3
 800bea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bea6:	b10a      	cbz	r2, 800beac <_svfiprintf_r+0x5c>
 800bea8:	2a25      	cmp	r2, #37	; 0x25
 800beaa:	d1f9      	bne.n	800bea0 <_svfiprintf_r+0x50>
 800beac:	ebba 0b04 	subs.w	fp, sl, r4
 800beb0:	d00b      	beq.n	800beca <_svfiprintf_r+0x7a>
 800beb2:	465b      	mov	r3, fp
 800beb4:	4622      	mov	r2, r4
 800beb6:	4629      	mov	r1, r5
 800beb8:	4638      	mov	r0, r7
 800beba:	f7ff ff6d 	bl	800bd98 <__ssputs_r>
 800bebe:	3001      	adds	r0, #1
 800bec0:	f000 80aa 	beq.w	800c018 <_svfiprintf_r+0x1c8>
 800bec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bec6:	445a      	add	r2, fp
 800bec8:	9209      	str	r2, [sp, #36]	; 0x24
 800beca:	f89a 3000 	ldrb.w	r3, [sl]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f000 80a2 	beq.w	800c018 <_svfiprintf_r+0x1c8>
 800bed4:	2300      	movs	r3, #0
 800bed6:	f04f 32ff 	mov.w	r2, #4294967295
 800beda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bede:	f10a 0a01 	add.w	sl, sl, #1
 800bee2:	9304      	str	r3, [sp, #16]
 800bee4:	9307      	str	r3, [sp, #28]
 800bee6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800beea:	931a      	str	r3, [sp, #104]	; 0x68
 800beec:	4654      	mov	r4, sl
 800beee:	2205      	movs	r2, #5
 800bef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bef4:	4851      	ldr	r0, [pc, #324]	; (800c03c <_svfiprintf_r+0x1ec>)
 800bef6:	f7ff fafd 	bl	800b4f4 <memchr>
 800befa:	9a04      	ldr	r2, [sp, #16]
 800befc:	b9d8      	cbnz	r0, 800bf36 <_svfiprintf_r+0xe6>
 800befe:	06d0      	lsls	r0, r2, #27
 800bf00:	bf44      	itt	mi
 800bf02:	2320      	movmi	r3, #32
 800bf04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf08:	0711      	lsls	r1, r2, #28
 800bf0a:	bf44      	itt	mi
 800bf0c:	232b      	movmi	r3, #43	; 0x2b
 800bf0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf12:	f89a 3000 	ldrb.w	r3, [sl]
 800bf16:	2b2a      	cmp	r3, #42	; 0x2a
 800bf18:	d015      	beq.n	800bf46 <_svfiprintf_r+0xf6>
 800bf1a:	4654      	mov	r4, sl
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	f04f 0c0a 	mov.w	ip, #10
 800bf22:	9a07      	ldr	r2, [sp, #28]
 800bf24:	4621      	mov	r1, r4
 800bf26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf2a:	3b30      	subs	r3, #48	; 0x30
 800bf2c:	2b09      	cmp	r3, #9
 800bf2e:	d94e      	bls.n	800bfce <_svfiprintf_r+0x17e>
 800bf30:	b1b0      	cbz	r0, 800bf60 <_svfiprintf_r+0x110>
 800bf32:	9207      	str	r2, [sp, #28]
 800bf34:	e014      	b.n	800bf60 <_svfiprintf_r+0x110>
 800bf36:	eba0 0308 	sub.w	r3, r0, r8
 800bf3a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	46a2      	mov	sl, r4
 800bf42:	9304      	str	r3, [sp, #16]
 800bf44:	e7d2      	b.n	800beec <_svfiprintf_r+0x9c>
 800bf46:	9b03      	ldr	r3, [sp, #12]
 800bf48:	1d19      	adds	r1, r3, #4
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	9103      	str	r1, [sp, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	bfbb      	ittet	lt
 800bf52:	425b      	neglt	r3, r3
 800bf54:	f042 0202 	orrlt.w	r2, r2, #2
 800bf58:	9307      	strge	r3, [sp, #28]
 800bf5a:	9307      	strlt	r3, [sp, #28]
 800bf5c:	bfb8      	it	lt
 800bf5e:	9204      	strlt	r2, [sp, #16]
 800bf60:	7823      	ldrb	r3, [r4, #0]
 800bf62:	2b2e      	cmp	r3, #46	; 0x2e
 800bf64:	d10c      	bne.n	800bf80 <_svfiprintf_r+0x130>
 800bf66:	7863      	ldrb	r3, [r4, #1]
 800bf68:	2b2a      	cmp	r3, #42	; 0x2a
 800bf6a:	d135      	bne.n	800bfd8 <_svfiprintf_r+0x188>
 800bf6c:	9b03      	ldr	r3, [sp, #12]
 800bf6e:	3402      	adds	r4, #2
 800bf70:	1d1a      	adds	r2, r3, #4
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	9203      	str	r2, [sp, #12]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	bfb8      	it	lt
 800bf7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf7e:	9305      	str	r3, [sp, #20]
 800bf80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c04c <_svfiprintf_r+0x1fc>
 800bf84:	2203      	movs	r2, #3
 800bf86:	4650      	mov	r0, sl
 800bf88:	7821      	ldrb	r1, [r4, #0]
 800bf8a:	f7ff fab3 	bl	800b4f4 <memchr>
 800bf8e:	b140      	cbz	r0, 800bfa2 <_svfiprintf_r+0x152>
 800bf90:	2340      	movs	r3, #64	; 0x40
 800bf92:	eba0 000a 	sub.w	r0, r0, sl
 800bf96:	fa03 f000 	lsl.w	r0, r3, r0
 800bf9a:	9b04      	ldr	r3, [sp, #16]
 800bf9c:	3401      	adds	r4, #1
 800bf9e:	4303      	orrs	r3, r0
 800bfa0:	9304      	str	r3, [sp, #16]
 800bfa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfa6:	2206      	movs	r2, #6
 800bfa8:	4825      	ldr	r0, [pc, #148]	; (800c040 <_svfiprintf_r+0x1f0>)
 800bfaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfae:	f7ff faa1 	bl	800b4f4 <memchr>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d038      	beq.n	800c028 <_svfiprintf_r+0x1d8>
 800bfb6:	4b23      	ldr	r3, [pc, #140]	; (800c044 <_svfiprintf_r+0x1f4>)
 800bfb8:	bb1b      	cbnz	r3, 800c002 <_svfiprintf_r+0x1b2>
 800bfba:	9b03      	ldr	r3, [sp, #12]
 800bfbc:	3307      	adds	r3, #7
 800bfbe:	f023 0307 	bic.w	r3, r3, #7
 800bfc2:	3308      	adds	r3, #8
 800bfc4:	9303      	str	r3, [sp, #12]
 800bfc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc8:	4433      	add	r3, r6
 800bfca:	9309      	str	r3, [sp, #36]	; 0x24
 800bfcc:	e767      	b.n	800be9e <_svfiprintf_r+0x4e>
 800bfce:	460c      	mov	r4, r1
 800bfd0:	2001      	movs	r0, #1
 800bfd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfd6:	e7a5      	b.n	800bf24 <_svfiprintf_r+0xd4>
 800bfd8:	2300      	movs	r3, #0
 800bfda:	f04f 0c0a 	mov.w	ip, #10
 800bfde:	4619      	mov	r1, r3
 800bfe0:	3401      	adds	r4, #1
 800bfe2:	9305      	str	r3, [sp, #20]
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfea:	3a30      	subs	r2, #48	; 0x30
 800bfec:	2a09      	cmp	r2, #9
 800bfee:	d903      	bls.n	800bff8 <_svfiprintf_r+0x1a8>
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d0c5      	beq.n	800bf80 <_svfiprintf_r+0x130>
 800bff4:	9105      	str	r1, [sp, #20]
 800bff6:	e7c3      	b.n	800bf80 <_svfiprintf_r+0x130>
 800bff8:	4604      	mov	r4, r0
 800bffa:	2301      	movs	r3, #1
 800bffc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c000:	e7f0      	b.n	800bfe4 <_svfiprintf_r+0x194>
 800c002:	ab03      	add	r3, sp, #12
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	462a      	mov	r2, r5
 800c008:	4638      	mov	r0, r7
 800c00a:	4b0f      	ldr	r3, [pc, #60]	; (800c048 <_svfiprintf_r+0x1f8>)
 800c00c:	a904      	add	r1, sp, #16
 800c00e:	f7fe f805 	bl	800a01c <_printf_float>
 800c012:	1c42      	adds	r2, r0, #1
 800c014:	4606      	mov	r6, r0
 800c016:	d1d6      	bne.n	800bfc6 <_svfiprintf_r+0x176>
 800c018:	89ab      	ldrh	r3, [r5, #12]
 800c01a:	065b      	lsls	r3, r3, #25
 800c01c:	f53f af2c 	bmi.w	800be78 <_svfiprintf_r+0x28>
 800c020:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c022:	b01d      	add	sp, #116	; 0x74
 800c024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c028:	ab03      	add	r3, sp, #12
 800c02a:	9300      	str	r3, [sp, #0]
 800c02c:	462a      	mov	r2, r5
 800c02e:	4638      	mov	r0, r7
 800c030:	4b05      	ldr	r3, [pc, #20]	; (800c048 <_svfiprintf_r+0x1f8>)
 800c032:	a904      	add	r1, sp, #16
 800c034:	f7fe fa8e 	bl	800a554 <_printf_i>
 800c038:	e7eb      	b.n	800c012 <_svfiprintf_r+0x1c2>
 800c03a:	bf00      	nop
 800c03c:	0800e6f4 	.word	0x0800e6f4
 800c040:	0800e6fe 	.word	0x0800e6fe
 800c044:	0800a01d 	.word	0x0800a01d
 800c048:	0800bd99 	.word	0x0800bd99
 800c04c:	0800e6fa 	.word	0x0800e6fa

0800c050 <_sbrk_r>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	2300      	movs	r3, #0
 800c054:	4d05      	ldr	r5, [pc, #20]	; (800c06c <_sbrk_r+0x1c>)
 800c056:	4604      	mov	r4, r0
 800c058:	4608      	mov	r0, r1
 800c05a:	602b      	str	r3, [r5, #0]
 800c05c:	f7fa fe06 	bl	8006c6c <_sbrk>
 800c060:	1c43      	adds	r3, r0, #1
 800c062:	d102      	bne.n	800c06a <_sbrk_r+0x1a>
 800c064:	682b      	ldr	r3, [r5, #0]
 800c066:	b103      	cbz	r3, 800c06a <_sbrk_r+0x1a>
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	bd38      	pop	{r3, r4, r5, pc}
 800c06c:	200002dc 	.word	0x200002dc

0800c070 <__assert_func>:
 800c070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c072:	4614      	mov	r4, r2
 800c074:	461a      	mov	r2, r3
 800c076:	4b09      	ldr	r3, [pc, #36]	; (800c09c <__assert_func+0x2c>)
 800c078:	4605      	mov	r5, r0
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68d8      	ldr	r0, [r3, #12]
 800c07e:	b14c      	cbz	r4, 800c094 <__assert_func+0x24>
 800c080:	4b07      	ldr	r3, [pc, #28]	; (800c0a0 <__assert_func+0x30>)
 800c082:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c086:	9100      	str	r1, [sp, #0]
 800c088:	462b      	mov	r3, r5
 800c08a:	4906      	ldr	r1, [pc, #24]	; (800c0a4 <__assert_func+0x34>)
 800c08c:	f000 f80e 	bl	800c0ac <fiprintf>
 800c090:	f000 faa2 	bl	800c5d8 <abort>
 800c094:	4b04      	ldr	r3, [pc, #16]	; (800c0a8 <__assert_func+0x38>)
 800c096:	461c      	mov	r4, r3
 800c098:	e7f3      	b.n	800c082 <__assert_func+0x12>
 800c09a:	bf00      	nop
 800c09c:	20000010 	.word	0x20000010
 800c0a0:	0800e705 	.word	0x0800e705
 800c0a4:	0800e712 	.word	0x0800e712
 800c0a8:	0800e740 	.word	0x0800e740

0800c0ac <fiprintf>:
 800c0ac:	b40e      	push	{r1, r2, r3}
 800c0ae:	b503      	push	{r0, r1, lr}
 800c0b0:	4601      	mov	r1, r0
 800c0b2:	ab03      	add	r3, sp, #12
 800c0b4:	4805      	ldr	r0, [pc, #20]	; (800c0cc <fiprintf+0x20>)
 800c0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ba:	6800      	ldr	r0, [r0, #0]
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	f000 f88d 	bl	800c1dc <_vfiprintf_r>
 800c0c2:	b002      	add	sp, #8
 800c0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0c8:	b003      	add	sp, #12
 800c0ca:	4770      	bx	lr
 800c0cc:	20000010 	.word	0x20000010

0800c0d0 <__ascii_mbtowc>:
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	b901      	cbnz	r1, 800c0d6 <__ascii_mbtowc+0x6>
 800c0d4:	a901      	add	r1, sp, #4
 800c0d6:	b142      	cbz	r2, 800c0ea <__ascii_mbtowc+0x1a>
 800c0d8:	b14b      	cbz	r3, 800c0ee <__ascii_mbtowc+0x1e>
 800c0da:	7813      	ldrb	r3, [r2, #0]
 800c0dc:	600b      	str	r3, [r1, #0]
 800c0de:	7812      	ldrb	r2, [r2, #0]
 800c0e0:	1e10      	subs	r0, r2, #0
 800c0e2:	bf18      	it	ne
 800c0e4:	2001      	movne	r0, #1
 800c0e6:	b002      	add	sp, #8
 800c0e8:	4770      	bx	lr
 800c0ea:	4610      	mov	r0, r2
 800c0ec:	e7fb      	b.n	800c0e6 <__ascii_mbtowc+0x16>
 800c0ee:	f06f 0001 	mvn.w	r0, #1
 800c0f2:	e7f8      	b.n	800c0e6 <__ascii_mbtowc+0x16>

0800c0f4 <memmove>:
 800c0f4:	4288      	cmp	r0, r1
 800c0f6:	b510      	push	{r4, lr}
 800c0f8:	eb01 0402 	add.w	r4, r1, r2
 800c0fc:	d902      	bls.n	800c104 <memmove+0x10>
 800c0fe:	4284      	cmp	r4, r0
 800c100:	4623      	mov	r3, r4
 800c102:	d807      	bhi.n	800c114 <memmove+0x20>
 800c104:	1e43      	subs	r3, r0, #1
 800c106:	42a1      	cmp	r1, r4
 800c108:	d008      	beq.n	800c11c <memmove+0x28>
 800c10a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c10e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c112:	e7f8      	b.n	800c106 <memmove+0x12>
 800c114:	4601      	mov	r1, r0
 800c116:	4402      	add	r2, r0
 800c118:	428a      	cmp	r2, r1
 800c11a:	d100      	bne.n	800c11e <memmove+0x2a>
 800c11c:	bd10      	pop	{r4, pc}
 800c11e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c126:	e7f7      	b.n	800c118 <memmove+0x24>

0800c128 <__malloc_lock>:
 800c128:	4801      	ldr	r0, [pc, #4]	; (800c130 <__malloc_lock+0x8>)
 800c12a:	f000 bc15 	b.w	800c958 <__retarget_lock_acquire_recursive>
 800c12e:	bf00      	nop
 800c130:	200002e4 	.word	0x200002e4

0800c134 <__malloc_unlock>:
 800c134:	4801      	ldr	r0, [pc, #4]	; (800c13c <__malloc_unlock+0x8>)
 800c136:	f000 bc10 	b.w	800c95a <__retarget_lock_release_recursive>
 800c13a:	bf00      	nop
 800c13c:	200002e4 	.word	0x200002e4

0800c140 <_realloc_r>:
 800c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c142:	4607      	mov	r7, r0
 800c144:	4614      	mov	r4, r2
 800c146:	460e      	mov	r6, r1
 800c148:	b921      	cbnz	r1, 800c154 <_realloc_r+0x14>
 800c14a:	4611      	mov	r1, r2
 800c14c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c150:	f7ff bdc8 	b.w	800bce4 <_malloc_r>
 800c154:	b922      	cbnz	r2, 800c160 <_realloc_r+0x20>
 800c156:	f7ff fd79 	bl	800bc4c <_free_r>
 800c15a:	4625      	mov	r5, r4
 800c15c:	4628      	mov	r0, r5
 800c15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c160:	f000 fc60 	bl	800ca24 <_malloc_usable_size_r>
 800c164:	42a0      	cmp	r0, r4
 800c166:	d20f      	bcs.n	800c188 <_realloc_r+0x48>
 800c168:	4621      	mov	r1, r4
 800c16a:	4638      	mov	r0, r7
 800c16c:	f7ff fdba 	bl	800bce4 <_malloc_r>
 800c170:	4605      	mov	r5, r0
 800c172:	2800      	cmp	r0, #0
 800c174:	d0f2      	beq.n	800c15c <_realloc_r+0x1c>
 800c176:	4631      	mov	r1, r6
 800c178:	4622      	mov	r2, r4
 800c17a:	f7ff f9c9 	bl	800b510 <memcpy>
 800c17e:	4631      	mov	r1, r6
 800c180:	4638      	mov	r0, r7
 800c182:	f7ff fd63 	bl	800bc4c <_free_r>
 800c186:	e7e9      	b.n	800c15c <_realloc_r+0x1c>
 800c188:	4635      	mov	r5, r6
 800c18a:	e7e7      	b.n	800c15c <_realloc_r+0x1c>

0800c18c <__sfputc_r>:
 800c18c:	6893      	ldr	r3, [r2, #8]
 800c18e:	b410      	push	{r4}
 800c190:	3b01      	subs	r3, #1
 800c192:	2b00      	cmp	r3, #0
 800c194:	6093      	str	r3, [r2, #8]
 800c196:	da07      	bge.n	800c1a8 <__sfputc_r+0x1c>
 800c198:	6994      	ldr	r4, [r2, #24]
 800c19a:	42a3      	cmp	r3, r4
 800c19c:	db01      	blt.n	800c1a2 <__sfputc_r+0x16>
 800c19e:	290a      	cmp	r1, #10
 800c1a0:	d102      	bne.n	800c1a8 <__sfputc_r+0x1c>
 800c1a2:	bc10      	pop	{r4}
 800c1a4:	f000 b94a 	b.w	800c43c <__swbuf_r>
 800c1a8:	6813      	ldr	r3, [r2, #0]
 800c1aa:	1c58      	adds	r0, r3, #1
 800c1ac:	6010      	str	r0, [r2, #0]
 800c1ae:	7019      	strb	r1, [r3, #0]
 800c1b0:	4608      	mov	r0, r1
 800c1b2:	bc10      	pop	{r4}
 800c1b4:	4770      	bx	lr

0800c1b6 <__sfputs_r>:
 800c1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b8:	4606      	mov	r6, r0
 800c1ba:	460f      	mov	r7, r1
 800c1bc:	4614      	mov	r4, r2
 800c1be:	18d5      	adds	r5, r2, r3
 800c1c0:	42ac      	cmp	r4, r5
 800c1c2:	d101      	bne.n	800c1c8 <__sfputs_r+0x12>
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	e007      	b.n	800c1d8 <__sfputs_r+0x22>
 800c1c8:	463a      	mov	r2, r7
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1d0:	f7ff ffdc 	bl	800c18c <__sfputc_r>
 800c1d4:	1c43      	adds	r3, r0, #1
 800c1d6:	d1f3      	bne.n	800c1c0 <__sfputs_r+0xa>
 800c1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1dc <_vfiprintf_r>:
 800c1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e0:	460d      	mov	r5, r1
 800c1e2:	4614      	mov	r4, r2
 800c1e4:	4698      	mov	r8, r3
 800c1e6:	4606      	mov	r6, r0
 800c1e8:	b09d      	sub	sp, #116	; 0x74
 800c1ea:	b118      	cbz	r0, 800c1f4 <_vfiprintf_r+0x18>
 800c1ec:	6983      	ldr	r3, [r0, #24]
 800c1ee:	b90b      	cbnz	r3, 800c1f4 <_vfiprintf_r+0x18>
 800c1f0:	f000 fb14 	bl	800c81c <__sinit>
 800c1f4:	4b89      	ldr	r3, [pc, #548]	; (800c41c <_vfiprintf_r+0x240>)
 800c1f6:	429d      	cmp	r5, r3
 800c1f8:	d11b      	bne.n	800c232 <_vfiprintf_r+0x56>
 800c1fa:	6875      	ldr	r5, [r6, #4]
 800c1fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1fe:	07d9      	lsls	r1, r3, #31
 800c200:	d405      	bmi.n	800c20e <_vfiprintf_r+0x32>
 800c202:	89ab      	ldrh	r3, [r5, #12]
 800c204:	059a      	lsls	r2, r3, #22
 800c206:	d402      	bmi.n	800c20e <_vfiprintf_r+0x32>
 800c208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c20a:	f000 fba5 	bl	800c958 <__retarget_lock_acquire_recursive>
 800c20e:	89ab      	ldrh	r3, [r5, #12]
 800c210:	071b      	lsls	r3, r3, #28
 800c212:	d501      	bpl.n	800c218 <_vfiprintf_r+0x3c>
 800c214:	692b      	ldr	r3, [r5, #16]
 800c216:	b9eb      	cbnz	r3, 800c254 <_vfiprintf_r+0x78>
 800c218:	4629      	mov	r1, r5
 800c21a:	4630      	mov	r0, r6
 800c21c:	f000 f96e 	bl	800c4fc <__swsetup_r>
 800c220:	b1c0      	cbz	r0, 800c254 <_vfiprintf_r+0x78>
 800c222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c224:	07dc      	lsls	r4, r3, #31
 800c226:	d50e      	bpl.n	800c246 <_vfiprintf_r+0x6a>
 800c228:	f04f 30ff 	mov.w	r0, #4294967295
 800c22c:	b01d      	add	sp, #116	; 0x74
 800c22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c232:	4b7b      	ldr	r3, [pc, #492]	; (800c420 <_vfiprintf_r+0x244>)
 800c234:	429d      	cmp	r5, r3
 800c236:	d101      	bne.n	800c23c <_vfiprintf_r+0x60>
 800c238:	68b5      	ldr	r5, [r6, #8]
 800c23a:	e7df      	b.n	800c1fc <_vfiprintf_r+0x20>
 800c23c:	4b79      	ldr	r3, [pc, #484]	; (800c424 <_vfiprintf_r+0x248>)
 800c23e:	429d      	cmp	r5, r3
 800c240:	bf08      	it	eq
 800c242:	68f5      	ldreq	r5, [r6, #12]
 800c244:	e7da      	b.n	800c1fc <_vfiprintf_r+0x20>
 800c246:	89ab      	ldrh	r3, [r5, #12]
 800c248:	0598      	lsls	r0, r3, #22
 800c24a:	d4ed      	bmi.n	800c228 <_vfiprintf_r+0x4c>
 800c24c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c24e:	f000 fb84 	bl	800c95a <__retarget_lock_release_recursive>
 800c252:	e7e9      	b.n	800c228 <_vfiprintf_r+0x4c>
 800c254:	2300      	movs	r3, #0
 800c256:	9309      	str	r3, [sp, #36]	; 0x24
 800c258:	2320      	movs	r3, #32
 800c25a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c25e:	2330      	movs	r3, #48	; 0x30
 800c260:	f04f 0901 	mov.w	r9, #1
 800c264:	f8cd 800c 	str.w	r8, [sp, #12]
 800c268:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c428 <_vfiprintf_r+0x24c>
 800c26c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c270:	4623      	mov	r3, r4
 800c272:	469a      	mov	sl, r3
 800c274:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c278:	b10a      	cbz	r2, 800c27e <_vfiprintf_r+0xa2>
 800c27a:	2a25      	cmp	r2, #37	; 0x25
 800c27c:	d1f9      	bne.n	800c272 <_vfiprintf_r+0x96>
 800c27e:	ebba 0b04 	subs.w	fp, sl, r4
 800c282:	d00b      	beq.n	800c29c <_vfiprintf_r+0xc0>
 800c284:	465b      	mov	r3, fp
 800c286:	4622      	mov	r2, r4
 800c288:	4629      	mov	r1, r5
 800c28a:	4630      	mov	r0, r6
 800c28c:	f7ff ff93 	bl	800c1b6 <__sfputs_r>
 800c290:	3001      	adds	r0, #1
 800c292:	f000 80aa 	beq.w	800c3ea <_vfiprintf_r+0x20e>
 800c296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c298:	445a      	add	r2, fp
 800c29a:	9209      	str	r2, [sp, #36]	; 0x24
 800c29c:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f000 80a2 	beq.w	800c3ea <_vfiprintf_r+0x20e>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2b0:	f10a 0a01 	add.w	sl, sl, #1
 800c2b4:	9304      	str	r3, [sp, #16]
 800c2b6:	9307      	str	r3, [sp, #28]
 800c2b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2bc:	931a      	str	r3, [sp, #104]	; 0x68
 800c2be:	4654      	mov	r4, sl
 800c2c0:	2205      	movs	r2, #5
 800c2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2c6:	4858      	ldr	r0, [pc, #352]	; (800c428 <_vfiprintf_r+0x24c>)
 800c2c8:	f7ff f914 	bl	800b4f4 <memchr>
 800c2cc:	9a04      	ldr	r2, [sp, #16]
 800c2ce:	b9d8      	cbnz	r0, 800c308 <_vfiprintf_r+0x12c>
 800c2d0:	06d1      	lsls	r1, r2, #27
 800c2d2:	bf44      	itt	mi
 800c2d4:	2320      	movmi	r3, #32
 800c2d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2da:	0713      	lsls	r3, r2, #28
 800c2dc:	bf44      	itt	mi
 800c2de:	232b      	movmi	r3, #43	; 0x2b
 800c2e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ea:	d015      	beq.n	800c318 <_vfiprintf_r+0x13c>
 800c2ec:	4654      	mov	r4, sl
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	f04f 0c0a 	mov.w	ip, #10
 800c2f4:	9a07      	ldr	r2, [sp, #28]
 800c2f6:	4621      	mov	r1, r4
 800c2f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2fc:	3b30      	subs	r3, #48	; 0x30
 800c2fe:	2b09      	cmp	r3, #9
 800c300:	d94e      	bls.n	800c3a0 <_vfiprintf_r+0x1c4>
 800c302:	b1b0      	cbz	r0, 800c332 <_vfiprintf_r+0x156>
 800c304:	9207      	str	r2, [sp, #28]
 800c306:	e014      	b.n	800c332 <_vfiprintf_r+0x156>
 800c308:	eba0 0308 	sub.w	r3, r0, r8
 800c30c:	fa09 f303 	lsl.w	r3, r9, r3
 800c310:	4313      	orrs	r3, r2
 800c312:	46a2      	mov	sl, r4
 800c314:	9304      	str	r3, [sp, #16]
 800c316:	e7d2      	b.n	800c2be <_vfiprintf_r+0xe2>
 800c318:	9b03      	ldr	r3, [sp, #12]
 800c31a:	1d19      	adds	r1, r3, #4
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	9103      	str	r1, [sp, #12]
 800c320:	2b00      	cmp	r3, #0
 800c322:	bfbb      	ittet	lt
 800c324:	425b      	neglt	r3, r3
 800c326:	f042 0202 	orrlt.w	r2, r2, #2
 800c32a:	9307      	strge	r3, [sp, #28]
 800c32c:	9307      	strlt	r3, [sp, #28]
 800c32e:	bfb8      	it	lt
 800c330:	9204      	strlt	r2, [sp, #16]
 800c332:	7823      	ldrb	r3, [r4, #0]
 800c334:	2b2e      	cmp	r3, #46	; 0x2e
 800c336:	d10c      	bne.n	800c352 <_vfiprintf_r+0x176>
 800c338:	7863      	ldrb	r3, [r4, #1]
 800c33a:	2b2a      	cmp	r3, #42	; 0x2a
 800c33c:	d135      	bne.n	800c3aa <_vfiprintf_r+0x1ce>
 800c33e:	9b03      	ldr	r3, [sp, #12]
 800c340:	3402      	adds	r4, #2
 800c342:	1d1a      	adds	r2, r3, #4
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	9203      	str	r2, [sp, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	bfb8      	it	lt
 800c34c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c350:	9305      	str	r3, [sp, #20]
 800c352:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c438 <_vfiprintf_r+0x25c>
 800c356:	2203      	movs	r2, #3
 800c358:	4650      	mov	r0, sl
 800c35a:	7821      	ldrb	r1, [r4, #0]
 800c35c:	f7ff f8ca 	bl	800b4f4 <memchr>
 800c360:	b140      	cbz	r0, 800c374 <_vfiprintf_r+0x198>
 800c362:	2340      	movs	r3, #64	; 0x40
 800c364:	eba0 000a 	sub.w	r0, r0, sl
 800c368:	fa03 f000 	lsl.w	r0, r3, r0
 800c36c:	9b04      	ldr	r3, [sp, #16]
 800c36e:	3401      	adds	r4, #1
 800c370:	4303      	orrs	r3, r0
 800c372:	9304      	str	r3, [sp, #16]
 800c374:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c378:	2206      	movs	r2, #6
 800c37a:	482c      	ldr	r0, [pc, #176]	; (800c42c <_vfiprintf_r+0x250>)
 800c37c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c380:	f7ff f8b8 	bl	800b4f4 <memchr>
 800c384:	2800      	cmp	r0, #0
 800c386:	d03f      	beq.n	800c408 <_vfiprintf_r+0x22c>
 800c388:	4b29      	ldr	r3, [pc, #164]	; (800c430 <_vfiprintf_r+0x254>)
 800c38a:	bb1b      	cbnz	r3, 800c3d4 <_vfiprintf_r+0x1f8>
 800c38c:	9b03      	ldr	r3, [sp, #12]
 800c38e:	3307      	adds	r3, #7
 800c390:	f023 0307 	bic.w	r3, r3, #7
 800c394:	3308      	adds	r3, #8
 800c396:	9303      	str	r3, [sp, #12]
 800c398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c39a:	443b      	add	r3, r7
 800c39c:	9309      	str	r3, [sp, #36]	; 0x24
 800c39e:	e767      	b.n	800c270 <_vfiprintf_r+0x94>
 800c3a0:	460c      	mov	r4, r1
 800c3a2:	2001      	movs	r0, #1
 800c3a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3a8:	e7a5      	b.n	800c2f6 <_vfiprintf_r+0x11a>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	f04f 0c0a 	mov.w	ip, #10
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	3401      	adds	r4, #1
 800c3b4:	9305      	str	r3, [sp, #20]
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3bc:	3a30      	subs	r2, #48	; 0x30
 800c3be:	2a09      	cmp	r2, #9
 800c3c0:	d903      	bls.n	800c3ca <_vfiprintf_r+0x1ee>
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d0c5      	beq.n	800c352 <_vfiprintf_r+0x176>
 800c3c6:	9105      	str	r1, [sp, #20]
 800c3c8:	e7c3      	b.n	800c352 <_vfiprintf_r+0x176>
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3d2:	e7f0      	b.n	800c3b6 <_vfiprintf_r+0x1da>
 800c3d4:	ab03      	add	r3, sp, #12
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	462a      	mov	r2, r5
 800c3da:	4630      	mov	r0, r6
 800c3dc:	4b15      	ldr	r3, [pc, #84]	; (800c434 <_vfiprintf_r+0x258>)
 800c3de:	a904      	add	r1, sp, #16
 800c3e0:	f7fd fe1c 	bl	800a01c <_printf_float>
 800c3e4:	4607      	mov	r7, r0
 800c3e6:	1c78      	adds	r0, r7, #1
 800c3e8:	d1d6      	bne.n	800c398 <_vfiprintf_r+0x1bc>
 800c3ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3ec:	07d9      	lsls	r1, r3, #31
 800c3ee:	d405      	bmi.n	800c3fc <_vfiprintf_r+0x220>
 800c3f0:	89ab      	ldrh	r3, [r5, #12]
 800c3f2:	059a      	lsls	r2, r3, #22
 800c3f4:	d402      	bmi.n	800c3fc <_vfiprintf_r+0x220>
 800c3f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3f8:	f000 faaf 	bl	800c95a <__retarget_lock_release_recursive>
 800c3fc:	89ab      	ldrh	r3, [r5, #12]
 800c3fe:	065b      	lsls	r3, r3, #25
 800c400:	f53f af12 	bmi.w	800c228 <_vfiprintf_r+0x4c>
 800c404:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c406:	e711      	b.n	800c22c <_vfiprintf_r+0x50>
 800c408:	ab03      	add	r3, sp, #12
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	462a      	mov	r2, r5
 800c40e:	4630      	mov	r0, r6
 800c410:	4b08      	ldr	r3, [pc, #32]	; (800c434 <_vfiprintf_r+0x258>)
 800c412:	a904      	add	r1, sp, #16
 800c414:	f7fe f89e 	bl	800a554 <_printf_i>
 800c418:	e7e4      	b.n	800c3e4 <_vfiprintf_r+0x208>
 800c41a:	bf00      	nop
 800c41c:	0800e86c 	.word	0x0800e86c
 800c420:	0800e88c 	.word	0x0800e88c
 800c424:	0800e84c 	.word	0x0800e84c
 800c428:	0800e6f4 	.word	0x0800e6f4
 800c42c:	0800e6fe 	.word	0x0800e6fe
 800c430:	0800a01d 	.word	0x0800a01d
 800c434:	0800c1b7 	.word	0x0800c1b7
 800c438:	0800e6fa 	.word	0x0800e6fa

0800c43c <__swbuf_r>:
 800c43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43e:	460e      	mov	r6, r1
 800c440:	4614      	mov	r4, r2
 800c442:	4605      	mov	r5, r0
 800c444:	b118      	cbz	r0, 800c44e <__swbuf_r+0x12>
 800c446:	6983      	ldr	r3, [r0, #24]
 800c448:	b90b      	cbnz	r3, 800c44e <__swbuf_r+0x12>
 800c44a:	f000 f9e7 	bl	800c81c <__sinit>
 800c44e:	4b21      	ldr	r3, [pc, #132]	; (800c4d4 <__swbuf_r+0x98>)
 800c450:	429c      	cmp	r4, r3
 800c452:	d12b      	bne.n	800c4ac <__swbuf_r+0x70>
 800c454:	686c      	ldr	r4, [r5, #4]
 800c456:	69a3      	ldr	r3, [r4, #24]
 800c458:	60a3      	str	r3, [r4, #8]
 800c45a:	89a3      	ldrh	r3, [r4, #12]
 800c45c:	071a      	lsls	r2, r3, #28
 800c45e:	d52f      	bpl.n	800c4c0 <__swbuf_r+0x84>
 800c460:	6923      	ldr	r3, [r4, #16]
 800c462:	b36b      	cbz	r3, 800c4c0 <__swbuf_r+0x84>
 800c464:	6923      	ldr	r3, [r4, #16]
 800c466:	6820      	ldr	r0, [r4, #0]
 800c468:	b2f6      	uxtb	r6, r6
 800c46a:	1ac0      	subs	r0, r0, r3
 800c46c:	6963      	ldr	r3, [r4, #20]
 800c46e:	4637      	mov	r7, r6
 800c470:	4283      	cmp	r3, r0
 800c472:	dc04      	bgt.n	800c47e <__swbuf_r+0x42>
 800c474:	4621      	mov	r1, r4
 800c476:	4628      	mov	r0, r5
 800c478:	f000 f93c 	bl	800c6f4 <_fflush_r>
 800c47c:	bb30      	cbnz	r0, 800c4cc <__swbuf_r+0x90>
 800c47e:	68a3      	ldr	r3, [r4, #8]
 800c480:	3001      	adds	r0, #1
 800c482:	3b01      	subs	r3, #1
 800c484:	60a3      	str	r3, [r4, #8]
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	1c5a      	adds	r2, r3, #1
 800c48a:	6022      	str	r2, [r4, #0]
 800c48c:	701e      	strb	r6, [r3, #0]
 800c48e:	6963      	ldr	r3, [r4, #20]
 800c490:	4283      	cmp	r3, r0
 800c492:	d004      	beq.n	800c49e <__swbuf_r+0x62>
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	07db      	lsls	r3, r3, #31
 800c498:	d506      	bpl.n	800c4a8 <__swbuf_r+0x6c>
 800c49a:	2e0a      	cmp	r6, #10
 800c49c:	d104      	bne.n	800c4a8 <__swbuf_r+0x6c>
 800c49e:	4621      	mov	r1, r4
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	f000 f927 	bl	800c6f4 <_fflush_r>
 800c4a6:	b988      	cbnz	r0, 800c4cc <__swbuf_r+0x90>
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ac:	4b0a      	ldr	r3, [pc, #40]	; (800c4d8 <__swbuf_r+0x9c>)
 800c4ae:	429c      	cmp	r4, r3
 800c4b0:	d101      	bne.n	800c4b6 <__swbuf_r+0x7a>
 800c4b2:	68ac      	ldr	r4, [r5, #8]
 800c4b4:	e7cf      	b.n	800c456 <__swbuf_r+0x1a>
 800c4b6:	4b09      	ldr	r3, [pc, #36]	; (800c4dc <__swbuf_r+0xa0>)
 800c4b8:	429c      	cmp	r4, r3
 800c4ba:	bf08      	it	eq
 800c4bc:	68ec      	ldreq	r4, [r5, #12]
 800c4be:	e7ca      	b.n	800c456 <__swbuf_r+0x1a>
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	f000 f81a 	bl	800c4fc <__swsetup_r>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	d0cb      	beq.n	800c464 <__swbuf_r+0x28>
 800c4cc:	f04f 37ff 	mov.w	r7, #4294967295
 800c4d0:	e7ea      	b.n	800c4a8 <__swbuf_r+0x6c>
 800c4d2:	bf00      	nop
 800c4d4:	0800e86c 	.word	0x0800e86c
 800c4d8:	0800e88c 	.word	0x0800e88c
 800c4dc:	0800e84c 	.word	0x0800e84c

0800c4e0 <__ascii_wctomb>:
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	4608      	mov	r0, r1
 800c4e4:	b141      	cbz	r1, 800c4f8 <__ascii_wctomb+0x18>
 800c4e6:	2aff      	cmp	r2, #255	; 0xff
 800c4e8:	d904      	bls.n	800c4f4 <__ascii_wctomb+0x14>
 800c4ea:	228a      	movs	r2, #138	; 0x8a
 800c4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f0:	601a      	str	r2, [r3, #0]
 800c4f2:	4770      	bx	lr
 800c4f4:	2001      	movs	r0, #1
 800c4f6:	700a      	strb	r2, [r1, #0]
 800c4f8:	4770      	bx	lr
	...

0800c4fc <__swsetup_r>:
 800c4fc:	4b32      	ldr	r3, [pc, #200]	; (800c5c8 <__swsetup_r+0xcc>)
 800c4fe:	b570      	push	{r4, r5, r6, lr}
 800c500:	681d      	ldr	r5, [r3, #0]
 800c502:	4606      	mov	r6, r0
 800c504:	460c      	mov	r4, r1
 800c506:	b125      	cbz	r5, 800c512 <__swsetup_r+0x16>
 800c508:	69ab      	ldr	r3, [r5, #24]
 800c50a:	b913      	cbnz	r3, 800c512 <__swsetup_r+0x16>
 800c50c:	4628      	mov	r0, r5
 800c50e:	f000 f985 	bl	800c81c <__sinit>
 800c512:	4b2e      	ldr	r3, [pc, #184]	; (800c5cc <__swsetup_r+0xd0>)
 800c514:	429c      	cmp	r4, r3
 800c516:	d10f      	bne.n	800c538 <__swsetup_r+0x3c>
 800c518:	686c      	ldr	r4, [r5, #4]
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c520:	0719      	lsls	r1, r3, #28
 800c522:	d42c      	bmi.n	800c57e <__swsetup_r+0x82>
 800c524:	06dd      	lsls	r5, r3, #27
 800c526:	d411      	bmi.n	800c54c <__swsetup_r+0x50>
 800c528:	2309      	movs	r3, #9
 800c52a:	6033      	str	r3, [r6, #0]
 800c52c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c530:	f04f 30ff 	mov.w	r0, #4294967295
 800c534:	81a3      	strh	r3, [r4, #12]
 800c536:	e03e      	b.n	800c5b6 <__swsetup_r+0xba>
 800c538:	4b25      	ldr	r3, [pc, #148]	; (800c5d0 <__swsetup_r+0xd4>)
 800c53a:	429c      	cmp	r4, r3
 800c53c:	d101      	bne.n	800c542 <__swsetup_r+0x46>
 800c53e:	68ac      	ldr	r4, [r5, #8]
 800c540:	e7eb      	b.n	800c51a <__swsetup_r+0x1e>
 800c542:	4b24      	ldr	r3, [pc, #144]	; (800c5d4 <__swsetup_r+0xd8>)
 800c544:	429c      	cmp	r4, r3
 800c546:	bf08      	it	eq
 800c548:	68ec      	ldreq	r4, [r5, #12]
 800c54a:	e7e6      	b.n	800c51a <__swsetup_r+0x1e>
 800c54c:	0758      	lsls	r0, r3, #29
 800c54e:	d512      	bpl.n	800c576 <__swsetup_r+0x7a>
 800c550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c552:	b141      	cbz	r1, 800c566 <__swsetup_r+0x6a>
 800c554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c558:	4299      	cmp	r1, r3
 800c55a:	d002      	beq.n	800c562 <__swsetup_r+0x66>
 800c55c:	4630      	mov	r0, r6
 800c55e:	f7ff fb75 	bl	800bc4c <_free_r>
 800c562:	2300      	movs	r3, #0
 800c564:	6363      	str	r3, [r4, #52]	; 0x34
 800c566:	89a3      	ldrh	r3, [r4, #12]
 800c568:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c56c:	81a3      	strh	r3, [r4, #12]
 800c56e:	2300      	movs	r3, #0
 800c570:	6063      	str	r3, [r4, #4]
 800c572:	6923      	ldr	r3, [r4, #16]
 800c574:	6023      	str	r3, [r4, #0]
 800c576:	89a3      	ldrh	r3, [r4, #12]
 800c578:	f043 0308 	orr.w	r3, r3, #8
 800c57c:	81a3      	strh	r3, [r4, #12]
 800c57e:	6923      	ldr	r3, [r4, #16]
 800c580:	b94b      	cbnz	r3, 800c596 <__swsetup_r+0x9a>
 800c582:	89a3      	ldrh	r3, [r4, #12]
 800c584:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c58c:	d003      	beq.n	800c596 <__swsetup_r+0x9a>
 800c58e:	4621      	mov	r1, r4
 800c590:	4630      	mov	r0, r6
 800c592:	f000 fa07 	bl	800c9a4 <__smakebuf_r>
 800c596:	89a0      	ldrh	r0, [r4, #12]
 800c598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c59c:	f010 0301 	ands.w	r3, r0, #1
 800c5a0:	d00a      	beq.n	800c5b8 <__swsetup_r+0xbc>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	60a3      	str	r3, [r4, #8]
 800c5a6:	6963      	ldr	r3, [r4, #20]
 800c5a8:	425b      	negs	r3, r3
 800c5aa:	61a3      	str	r3, [r4, #24]
 800c5ac:	6923      	ldr	r3, [r4, #16]
 800c5ae:	b943      	cbnz	r3, 800c5c2 <__swsetup_r+0xc6>
 800c5b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5b4:	d1ba      	bne.n	800c52c <__swsetup_r+0x30>
 800c5b6:	bd70      	pop	{r4, r5, r6, pc}
 800c5b8:	0781      	lsls	r1, r0, #30
 800c5ba:	bf58      	it	pl
 800c5bc:	6963      	ldrpl	r3, [r4, #20]
 800c5be:	60a3      	str	r3, [r4, #8]
 800c5c0:	e7f4      	b.n	800c5ac <__swsetup_r+0xb0>
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	e7f7      	b.n	800c5b6 <__swsetup_r+0xba>
 800c5c6:	bf00      	nop
 800c5c8:	20000010 	.word	0x20000010
 800c5cc:	0800e86c 	.word	0x0800e86c
 800c5d0:	0800e88c 	.word	0x0800e88c
 800c5d4:	0800e84c 	.word	0x0800e84c

0800c5d8 <abort>:
 800c5d8:	2006      	movs	r0, #6
 800c5da:	b508      	push	{r3, lr}
 800c5dc:	f000 fa52 	bl	800ca84 <raise>
 800c5e0:	2001      	movs	r0, #1
 800c5e2:	f7fa fad0 	bl	8006b86 <_exit>
	...

0800c5e8 <__sflush_r>:
 800c5e8:	898a      	ldrh	r2, [r1, #12]
 800c5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	0710      	lsls	r0, r2, #28
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	d458      	bmi.n	800c6a8 <__sflush_r+0xc0>
 800c5f6:	684b      	ldr	r3, [r1, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	dc05      	bgt.n	800c608 <__sflush_r+0x20>
 800c5fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	dc02      	bgt.n	800c608 <__sflush_r+0x20>
 800c602:	2000      	movs	r0, #0
 800c604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c60a:	2e00      	cmp	r6, #0
 800c60c:	d0f9      	beq.n	800c602 <__sflush_r+0x1a>
 800c60e:	2300      	movs	r3, #0
 800c610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c614:	682f      	ldr	r7, [r5, #0]
 800c616:	602b      	str	r3, [r5, #0]
 800c618:	d032      	beq.n	800c680 <__sflush_r+0x98>
 800c61a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c61c:	89a3      	ldrh	r3, [r4, #12]
 800c61e:	075a      	lsls	r2, r3, #29
 800c620:	d505      	bpl.n	800c62e <__sflush_r+0x46>
 800c622:	6863      	ldr	r3, [r4, #4]
 800c624:	1ac0      	subs	r0, r0, r3
 800c626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c628:	b10b      	cbz	r3, 800c62e <__sflush_r+0x46>
 800c62a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c62c:	1ac0      	subs	r0, r0, r3
 800c62e:	2300      	movs	r3, #0
 800c630:	4602      	mov	r2, r0
 800c632:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c634:	4628      	mov	r0, r5
 800c636:	6a21      	ldr	r1, [r4, #32]
 800c638:	47b0      	blx	r6
 800c63a:	1c43      	adds	r3, r0, #1
 800c63c:	89a3      	ldrh	r3, [r4, #12]
 800c63e:	d106      	bne.n	800c64e <__sflush_r+0x66>
 800c640:	6829      	ldr	r1, [r5, #0]
 800c642:	291d      	cmp	r1, #29
 800c644:	d82c      	bhi.n	800c6a0 <__sflush_r+0xb8>
 800c646:	4a2a      	ldr	r2, [pc, #168]	; (800c6f0 <__sflush_r+0x108>)
 800c648:	40ca      	lsrs	r2, r1
 800c64a:	07d6      	lsls	r6, r2, #31
 800c64c:	d528      	bpl.n	800c6a0 <__sflush_r+0xb8>
 800c64e:	2200      	movs	r2, #0
 800c650:	6062      	str	r2, [r4, #4]
 800c652:	6922      	ldr	r2, [r4, #16]
 800c654:	04d9      	lsls	r1, r3, #19
 800c656:	6022      	str	r2, [r4, #0]
 800c658:	d504      	bpl.n	800c664 <__sflush_r+0x7c>
 800c65a:	1c42      	adds	r2, r0, #1
 800c65c:	d101      	bne.n	800c662 <__sflush_r+0x7a>
 800c65e:	682b      	ldr	r3, [r5, #0]
 800c660:	b903      	cbnz	r3, 800c664 <__sflush_r+0x7c>
 800c662:	6560      	str	r0, [r4, #84]	; 0x54
 800c664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c666:	602f      	str	r7, [r5, #0]
 800c668:	2900      	cmp	r1, #0
 800c66a:	d0ca      	beq.n	800c602 <__sflush_r+0x1a>
 800c66c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c670:	4299      	cmp	r1, r3
 800c672:	d002      	beq.n	800c67a <__sflush_r+0x92>
 800c674:	4628      	mov	r0, r5
 800c676:	f7ff fae9 	bl	800bc4c <_free_r>
 800c67a:	2000      	movs	r0, #0
 800c67c:	6360      	str	r0, [r4, #52]	; 0x34
 800c67e:	e7c1      	b.n	800c604 <__sflush_r+0x1c>
 800c680:	6a21      	ldr	r1, [r4, #32]
 800c682:	2301      	movs	r3, #1
 800c684:	4628      	mov	r0, r5
 800c686:	47b0      	blx	r6
 800c688:	1c41      	adds	r1, r0, #1
 800c68a:	d1c7      	bne.n	800c61c <__sflush_r+0x34>
 800c68c:	682b      	ldr	r3, [r5, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d0c4      	beq.n	800c61c <__sflush_r+0x34>
 800c692:	2b1d      	cmp	r3, #29
 800c694:	d001      	beq.n	800c69a <__sflush_r+0xb2>
 800c696:	2b16      	cmp	r3, #22
 800c698:	d101      	bne.n	800c69e <__sflush_r+0xb6>
 800c69a:	602f      	str	r7, [r5, #0]
 800c69c:	e7b1      	b.n	800c602 <__sflush_r+0x1a>
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a4:	81a3      	strh	r3, [r4, #12]
 800c6a6:	e7ad      	b.n	800c604 <__sflush_r+0x1c>
 800c6a8:	690f      	ldr	r7, [r1, #16]
 800c6aa:	2f00      	cmp	r7, #0
 800c6ac:	d0a9      	beq.n	800c602 <__sflush_r+0x1a>
 800c6ae:	0793      	lsls	r3, r2, #30
 800c6b0:	bf18      	it	ne
 800c6b2:	2300      	movne	r3, #0
 800c6b4:	680e      	ldr	r6, [r1, #0]
 800c6b6:	bf08      	it	eq
 800c6b8:	694b      	ldreq	r3, [r1, #20]
 800c6ba:	eba6 0807 	sub.w	r8, r6, r7
 800c6be:	600f      	str	r7, [r1, #0]
 800c6c0:	608b      	str	r3, [r1, #8]
 800c6c2:	f1b8 0f00 	cmp.w	r8, #0
 800c6c6:	dd9c      	ble.n	800c602 <__sflush_r+0x1a>
 800c6c8:	4643      	mov	r3, r8
 800c6ca:	463a      	mov	r2, r7
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	6a21      	ldr	r1, [r4, #32]
 800c6d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6d2:	47b0      	blx	r6
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	dc06      	bgt.n	800c6e6 <__sflush_r+0xfe>
 800c6d8:	89a3      	ldrh	r3, [r4, #12]
 800c6da:	f04f 30ff 	mov.w	r0, #4294967295
 800c6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6e2:	81a3      	strh	r3, [r4, #12]
 800c6e4:	e78e      	b.n	800c604 <__sflush_r+0x1c>
 800c6e6:	4407      	add	r7, r0
 800c6e8:	eba8 0800 	sub.w	r8, r8, r0
 800c6ec:	e7e9      	b.n	800c6c2 <__sflush_r+0xda>
 800c6ee:	bf00      	nop
 800c6f0:	20400001 	.word	0x20400001

0800c6f4 <_fflush_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	690b      	ldr	r3, [r1, #16]
 800c6f8:	4605      	mov	r5, r0
 800c6fa:	460c      	mov	r4, r1
 800c6fc:	b913      	cbnz	r3, 800c704 <_fflush_r+0x10>
 800c6fe:	2500      	movs	r5, #0
 800c700:	4628      	mov	r0, r5
 800c702:	bd38      	pop	{r3, r4, r5, pc}
 800c704:	b118      	cbz	r0, 800c70e <_fflush_r+0x1a>
 800c706:	6983      	ldr	r3, [r0, #24]
 800c708:	b90b      	cbnz	r3, 800c70e <_fflush_r+0x1a>
 800c70a:	f000 f887 	bl	800c81c <__sinit>
 800c70e:	4b14      	ldr	r3, [pc, #80]	; (800c760 <_fflush_r+0x6c>)
 800c710:	429c      	cmp	r4, r3
 800c712:	d11b      	bne.n	800c74c <_fflush_r+0x58>
 800c714:	686c      	ldr	r4, [r5, #4]
 800c716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d0ef      	beq.n	800c6fe <_fflush_r+0xa>
 800c71e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c720:	07d0      	lsls	r0, r2, #31
 800c722:	d404      	bmi.n	800c72e <_fflush_r+0x3a>
 800c724:	0599      	lsls	r1, r3, #22
 800c726:	d402      	bmi.n	800c72e <_fflush_r+0x3a>
 800c728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c72a:	f000 f915 	bl	800c958 <__retarget_lock_acquire_recursive>
 800c72e:	4628      	mov	r0, r5
 800c730:	4621      	mov	r1, r4
 800c732:	f7ff ff59 	bl	800c5e8 <__sflush_r>
 800c736:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c738:	4605      	mov	r5, r0
 800c73a:	07da      	lsls	r2, r3, #31
 800c73c:	d4e0      	bmi.n	800c700 <_fflush_r+0xc>
 800c73e:	89a3      	ldrh	r3, [r4, #12]
 800c740:	059b      	lsls	r3, r3, #22
 800c742:	d4dd      	bmi.n	800c700 <_fflush_r+0xc>
 800c744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c746:	f000 f908 	bl	800c95a <__retarget_lock_release_recursive>
 800c74a:	e7d9      	b.n	800c700 <_fflush_r+0xc>
 800c74c:	4b05      	ldr	r3, [pc, #20]	; (800c764 <_fflush_r+0x70>)
 800c74e:	429c      	cmp	r4, r3
 800c750:	d101      	bne.n	800c756 <_fflush_r+0x62>
 800c752:	68ac      	ldr	r4, [r5, #8]
 800c754:	e7df      	b.n	800c716 <_fflush_r+0x22>
 800c756:	4b04      	ldr	r3, [pc, #16]	; (800c768 <_fflush_r+0x74>)
 800c758:	429c      	cmp	r4, r3
 800c75a:	bf08      	it	eq
 800c75c:	68ec      	ldreq	r4, [r5, #12]
 800c75e:	e7da      	b.n	800c716 <_fflush_r+0x22>
 800c760:	0800e86c 	.word	0x0800e86c
 800c764:	0800e88c 	.word	0x0800e88c
 800c768:	0800e84c 	.word	0x0800e84c

0800c76c <std>:
 800c76c:	2300      	movs	r3, #0
 800c76e:	b510      	push	{r4, lr}
 800c770:	4604      	mov	r4, r0
 800c772:	e9c0 3300 	strd	r3, r3, [r0]
 800c776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c77a:	6083      	str	r3, [r0, #8]
 800c77c:	8181      	strh	r1, [r0, #12]
 800c77e:	6643      	str	r3, [r0, #100]	; 0x64
 800c780:	81c2      	strh	r2, [r0, #14]
 800c782:	6183      	str	r3, [r0, #24]
 800c784:	4619      	mov	r1, r3
 800c786:	2208      	movs	r2, #8
 800c788:	305c      	adds	r0, #92	; 0x5c
 800c78a:	f7fd fba1 	bl	8009ed0 <memset>
 800c78e:	4b05      	ldr	r3, [pc, #20]	; (800c7a4 <std+0x38>)
 800c790:	6224      	str	r4, [r4, #32]
 800c792:	6263      	str	r3, [r4, #36]	; 0x24
 800c794:	4b04      	ldr	r3, [pc, #16]	; (800c7a8 <std+0x3c>)
 800c796:	62a3      	str	r3, [r4, #40]	; 0x28
 800c798:	4b04      	ldr	r3, [pc, #16]	; (800c7ac <std+0x40>)
 800c79a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c79c:	4b04      	ldr	r3, [pc, #16]	; (800c7b0 <std+0x44>)
 800c79e:	6323      	str	r3, [r4, #48]	; 0x30
 800c7a0:	bd10      	pop	{r4, pc}
 800c7a2:	bf00      	nop
 800c7a4:	0800cabd 	.word	0x0800cabd
 800c7a8:	0800cadf 	.word	0x0800cadf
 800c7ac:	0800cb17 	.word	0x0800cb17
 800c7b0:	0800cb3b 	.word	0x0800cb3b

0800c7b4 <_cleanup_r>:
 800c7b4:	4901      	ldr	r1, [pc, #4]	; (800c7bc <_cleanup_r+0x8>)
 800c7b6:	f000 b8af 	b.w	800c918 <_fwalk_reent>
 800c7ba:	bf00      	nop
 800c7bc:	0800c6f5 	.word	0x0800c6f5

0800c7c0 <__sfmoreglue>:
 800c7c0:	b570      	push	{r4, r5, r6, lr}
 800c7c2:	2568      	movs	r5, #104	; 0x68
 800c7c4:	1e4a      	subs	r2, r1, #1
 800c7c6:	4355      	muls	r5, r2
 800c7c8:	460e      	mov	r6, r1
 800c7ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7ce:	f7ff fa89 	bl	800bce4 <_malloc_r>
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	b140      	cbz	r0, 800c7e8 <__sfmoreglue+0x28>
 800c7d6:	2100      	movs	r1, #0
 800c7d8:	e9c0 1600 	strd	r1, r6, [r0]
 800c7dc:	300c      	adds	r0, #12
 800c7de:	60a0      	str	r0, [r4, #8]
 800c7e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c7e4:	f7fd fb74 	bl	8009ed0 <memset>
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	bd70      	pop	{r4, r5, r6, pc}

0800c7ec <__sfp_lock_acquire>:
 800c7ec:	4801      	ldr	r0, [pc, #4]	; (800c7f4 <__sfp_lock_acquire+0x8>)
 800c7ee:	f000 b8b3 	b.w	800c958 <__retarget_lock_acquire_recursive>
 800c7f2:	bf00      	nop
 800c7f4:	200002e8 	.word	0x200002e8

0800c7f8 <__sfp_lock_release>:
 800c7f8:	4801      	ldr	r0, [pc, #4]	; (800c800 <__sfp_lock_release+0x8>)
 800c7fa:	f000 b8ae 	b.w	800c95a <__retarget_lock_release_recursive>
 800c7fe:	bf00      	nop
 800c800:	200002e8 	.word	0x200002e8

0800c804 <__sinit_lock_acquire>:
 800c804:	4801      	ldr	r0, [pc, #4]	; (800c80c <__sinit_lock_acquire+0x8>)
 800c806:	f000 b8a7 	b.w	800c958 <__retarget_lock_acquire_recursive>
 800c80a:	bf00      	nop
 800c80c:	200002e3 	.word	0x200002e3

0800c810 <__sinit_lock_release>:
 800c810:	4801      	ldr	r0, [pc, #4]	; (800c818 <__sinit_lock_release+0x8>)
 800c812:	f000 b8a2 	b.w	800c95a <__retarget_lock_release_recursive>
 800c816:	bf00      	nop
 800c818:	200002e3 	.word	0x200002e3

0800c81c <__sinit>:
 800c81c:	b510      	push	{r4, lr}
 800c81e:	4604      	mov	r4, r0
 800c820:	f7ff fff0 	bl	800c804 <__sinit_lock_acquire>
 800c824:	69a3      	ldr	r3, [r4, #24]
 800c826:	b11b      	cbz	r3, 800c830 <__sinit+0x14>
 800c828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c82c:	f7ff bff0 	b.w	800c810 <__sinit_lock_release>
 800c830:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c834:	6523      	str	r3, [r4, #80]	; 0x50
 800c836:	4b13      	ldr	r3, [pc, #76]	; (800c884 <__sinit+0x68>)
 800c838:	4a13      	ldr	r2, [pc, #76]	; (800c888 <__sinit+0x6c>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c83e:	42a3      	cmp	r3, r4
 800c840:	bf08      	it	eq
 800c842:	2301      	moveq	r3, #1
 800c844:	4620      	mov	r0, r4
 800c846:	bf08      	it	eq
 800c848:	61a3      	streq	r3, [r4, #24]
 800c84a:	f000 f81f 	bl	800c88c <__sfp>
 800c84e:	6060      	str	r0, [r4, #4]
 800c850:	4620      	mov	r0, r4
 800c852:	f000 f81b 	bl	800c88c <__sfp>
 800c856:	60a0      	str	r0, [r4, #8]
 800c858:	4620      	mov	r0, r4
 800c85a:	f000 f817 	bl	800c88c <__sfp>
 800c85e:	2200      	movs	r2, #0
 800c860:	2104      	movs	r1, #4
 800c862:	60e0      	str	r0, [r4, #12]
 800c864:	6860      	ldr	r0, [r4, #4]
 800c866:	f7ff ff81 	bl	800c76c <std>
 800c86a:	2201      	movs	r2, #1
 800c86c:	2109      	movs	r1, #9
 800c86e:	68a0      	ldr	r0, [r4, #8]
 800c870:	f7ff ff7c 	bl	800c76c <std>
 800c874:	2202      	movs	r2, #2
 800c876:	2112      	movs	r1, #18
 800c878:	68e0      	ldr	r0, [r4, #12]
 800c87a:	f7ff ff77 	bl	800c76c <std>
 800c87e:	2301      	movs	r3, #1
 800c880:	61a3      	str	r3, [r4, #24]
 800c882:	e7d1      	b.n	800c828 <__sinit+0xc>
 800c884:	0800e4c8 	.word	0x0800e4c8
 800c888:	0800c7b5 	.word	0x0800c7b5

0800c88c <__sfp>:
 800c88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88e:	4607      	mov	r7, r0
 800c890:	f7ff ffac 	bl	800c7ec <__sfp_lock_acquire>
 800c894:	4b1e      	ldr	r3, [pc, #120]	; (800c910 <__sfp+0x84>)
 800c896:	681e      	ldr	r6, [r3, #0]
 800c898:	69b3      	ldr	r3, [r6, #24]
 800c89a:	b913      	cbnz	r3, 800c8a2 <__sfp+0x16>
 800c89c:	4630      	mov	r0, r6
 800c89e:	f7ff ffbd 	bl	800c81c <__sinit>
 800c8a2:	3648      	adds	r6, #72	; 0x48
 800c8a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	d503      	bpl.n	800c8b4 <__sfp+0x28>
 800c8ac:	6833      	ldr	r3, [r6, #0]
 800c8ae:	b30b      	cbz	r3, 800c8f4 <__sfp+0x68>
 800c8b0:	6836      	ldr	r6, [r6, #0]
 800c8b2:	e7f7      	b.n	800c8a4 <__sfp+0x18>
 800c8b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c8b8:	b9d5      	cbnz	r5, 800c8f0 <__sfp+0x64>
 800c8ba:	4b16      	ldr	r3, [pc, #88]	; (800c914 <__sfp+0x88>)
 800c8bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8c0:	60e3      	str	r3, [r4, #12]
 800c8c2:	6665      	str	r5, [r4, #100]	; 0x64
 800c8c4:	f000 f847 	bl	800c956 <__retarget_lock_init_recursive>
 800c8c8:	f7ff ff96 	bl	800c7f8 <__sfp_lock_release>
 800c8cc:	2208      	movs	r2, #8
 800c8ce:	4629      	mov	r1, r5
 800c8d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c8d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c8d8:	6025      	str	r5, [r4, #0]
 800c8da:	61a5      	str	r5, [r4, #24]
 800c8dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c8e0:	f7fd faf6 	bl	8009ed0 <memset>
 800c8e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c8e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8f0:	3468      	adds	r4, #104	; 0x68
 800c8f2:	e7d9      	b.n	800c8a8 <__sfp+0x1c>
 800c8f4:	2104      	movs	r1, #4
 800c8f6:	4638      	mov	r0, r7
 800c8f8:	f7ff ff62 	bl	800c7c0 <__sfmoreglue>
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	6030      	str	r0, [r6, #0]
 800c900:	2800      	cmp	r0, #0
 800c902:	d1d5      	bne.n	800c8b0 <__sfp+0x24>
 800c904:	f7ff ff78 	bl	800c7f8 <__sfp_lock_release>
 800c908:	230c      	movs	r3, #12
 800c90a:	603b      	str	r3, [r7, #0]
 800c90c:	e7ee      	b.n	800c8ec <__sfp+0x60>
 800c90e:	bf00      	nop
 800c910:	0800e4c8 	.word	0x0800e4c8
 800c914:	ffff0001 	.word	0xffff0001

0800c918 <_fwalk_reent>:
 800c918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c91c:	4606      	mov	r6, r0
 800c91e:	4688      	mov	r8, r1
 800c920:	2700      	movs	r7, #0
 800c922:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c926:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c92a:	f1b9 0901 	subs.w	r9, r9, #1
 800c92e:	d505      	bpl.n	800c93c <_fwalk_reent+0x24>
 800c930:	6824      	ldr	r4, [r4, #0]
 800c932:	2c00      	cmp	r4, #0
 800c934:	d1f7      	bne.n	800c926 <_fwalk_reent+0xe>
 800c936:	4638      	mov	r0, r7
 800c938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c93c:	89ab      	ldrh	r3, [r5, #12]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d907      	bls.n	800c952 <_fwalk_reent+0x3a>
 800c942:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c946:	3301      	adds	r3, #1
 800c948:	d003      	beq.n	800c952 <_fwalk_reent+0x3a>
 800c94a:	4629      	mov	r1, r5
 800c94c:	4630      	mov	r0, r6
 800c94e:	47c0      	blx	r8
 800c950:	4307      	orrs	r7, r0
 800c952:	3568      	adds	r5, #104	; 0x68
 800c954:	e7e9      	b.n	800c92a <_fwalk_reent+0x12>

0800c956 <__retarget_lock_init_recursive>:
 800c956:	4770      	bx	lr

0800c958 <__retarget_lock_acquire_recursive>:
 800c958:	4770      	bx	lr

0800c95a <__retarget_lock_release_recursive>:
 800c95a:	4770      	bx	lr

0800c95c <__swhatbuf_r>:
 800c95c:	b570      	push	{r4, r5, r6, lr}
 800c95e:	460e      	mov	r6, r1
 800c960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c964:	4614      	mov	r4, r2
 800c966:	2900      	cmp	r1, #0
 800c968:	461d      	mov	r5, r3
 800c96a:	b096      	sub	sp, #88	; 0x58
 800c96c:	da07      	bge.n	800c97e <__swhatbuf_r+0x22>
 800c96e:	2300      	movs	r3, #0
 800c970:	602b      	str	r3, [r5, #0]
 800c972:	89b3      	ldrh	r3, [r6, #12]
 800c974:	061a      	lsls	r2, r3, #24
 800c976:	d410      	bmi.n	800c99a <__swhatbuf_r+0x3e>
 800c978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c97c:	e00e      	b.n	800c99c <__swhatbuf_r+0x40>
 800c97e:	466a      	mov	r2, sp
 800c980:	f000 f902 	bl	800cb88 <_fstat_r>
 800c984:	2800      	cmp	r0, #0
 800c986:	dbf2      	blt.n	800c96e <__swhatbuf_r+0x12>
 800c988:	9a01      	ldr	r2, [sp, #4]
 800c98a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c98e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c992:	425a      	negs	r2, r3
 800c994:	415a      	adcs	r2, r3
 800c996:	602a      	str	r2, [r5, #0]
 800c998:	e7ee      	b.n	800c978 <__swhatbuf_r+0x1c>
 800c99a:	2340      	movs	r3, #64	; 0x40
 800c99c:	2000      	movs	r0, #0
 800c99e:	6023      	str	r3, [r4, #0]
 800c9a0:	b016      	add	sp, #88	; 0x58
 800c9a2:	bd70      	pop	{r4, r5, r6, pc}

0800c9a4 <__smakebuf_r>:
 800c9a4:	898b      	ldrh	r3, [r1, #12]
 800c9a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9a8:	079d      	lsls	r5, r3, #30
 800c9aa:	4606      	mov	r6, r0
 800c9ac:	460c      	mov	r4, r1
 800c9ae:	d507      	bpl.n	800c9c0 <__smakebuf_r+0x1c>
 800c9b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9b4:	6023      	str	r3, [r4, #0]
 800c9b6:	6123      	str	r3, [r4, #16]
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	6163      	str	r3, [r4, #20]
 800c9bc:	b002      	add	sp, #8
 800c9be:	bd70      	pop	{r4, r5, r6, pc}
 800c9c0:	466a      	mov	r2, sp
 800c9c2:	ab01      	add	r3, sp, #4
 800c9c4:	f7ff ffca 	bl	800c95c <__swhatbuf_r>
 800c9c8:	9900      	ldr	r1, [sp, #0]
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	f7ff f989 	bl	800bce4 <_malloc_r>
 800c9d2:	b948      	cbnz	r0, 800c9e8 <__smakebuf_r+0x44>
 800c9d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9d8:	059a      	lsls	r2, r3, #22
 800c9da:	d4ef      	bmi.n	800c9bc <__smakebuf_r+0x18>
 800c9dc:	f023 0303 	bic.w	r3, r3, #3
 800c9e0:	f043 0302 	orr.w	r3, r3, #2
 800c9e4:	81a3      	strh	r3, [r4, #12]
 800c9e6:	e7e3      	b.n	800c9b0 <__smakebuf_r+0xc>
 800c9e8:	4b0d      	ldr	r3, [pc, #52]	; (800ca20 <__smakebuf_r+0x7c>)
 800c9ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9ec:	89a3      	ldrh	r3, [r4, #12]
 800c9ee:	6020      	str	r0, [r4, #0]
 800c9f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f4:	81a3      	strh	r3, [r4, #12]
 800c9f6:	9b00      	ldr	r3, [sp, #0]
 800c9f8:	6120      	str	r0, [r4, #16]
 800c9fa:	6163      	str	r3, [r4, #20]
 800c9fc:	9b01      	ldr	r3, [sp, #4]
 800c9fe:	b15b      	cbz	r3, 800ca18 <__smakebuf_r+0x74>
 800ca00:	4630      	mov	r0, r6
 800ca02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca06:	f000 f8d1 	bl	800cbac <_isatty_r>
 800ca0a:	b128      	cbz	r0, 800ca18 <__smakebuf_r+0x74>
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	f023 0303 	bic.w	r3, r3, #3
 800ca12:	f043 0301 	orr.w	r3, r3, #1
 800ca16:	81a3      	strh	r3, [r4, #12]
 800ca18:	89a0      	ldrh	r0, [r4, #12]
 800ca1a:	4305      	orrs	r5, r0
 800ca1c:	81a5      	strh	r5, [r4, #12]
 800ca1e:	e7cd      	b.n	800c9bc <__smakebuf_r+0x18>
 800ca20:	0800c7b5 	.word	0x0800c7b5

0800ca24 <_malloc_usable_size_r>:
 800ca24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca28:	1f18      	subs	r0, r3, #4
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	bfbc      	itt	lt
 800ca2e:	580b      	ldrlt	r3, [r1, r0]
 800ca30:	18c0      	addlt	r0, r0, r3
 800ca32:	4770      	bx	lr

0800ca34 <_raise_r>:
 800ca34:	291f      	cmp	r1, #31
 800ca36:	b538      	push	{r3, r4, r5, lr}
 800ca38:	4604      	mov	r4, r0
 800ca3a:	460d      	mov	r5, r1
 800ca3c:	d904      	bls.n	800ca48 <_raise_r+0x14>
 800ca3e:	2316      	movs	r3, #22
 800ca40:	6003      	str	r3, [r0, #0]
 800ca42:	f04f 30ff 	mov.w	r0, #4294967295
 800ca46:	bd38      	pop	{r3, r4, r5, pc}
 800ca48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca4a:	b112      	cbz	r2, 800ca52 <_raise_r+0x1e>
 800ca4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca50:	b94b      	cbnz	r3, 800ca66 <_raise_r+0x32>
 800ca52:	4620      	mov	r0, r4
 800ca54:	f000 f830 	bl	800cab8 <_getpid_r>
 800ca58:	462a      	mov	r2, r5
 800ca5a:	4601      	mov	r1, r0
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca62:	f000 b817 	b.w	800ca94 <_kill_r>
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d00a      	beq.n	800ca80 <_raise_r+0x4c>
 800ca6a:	1c59      	adds	r1, r3, #1
 800ca6c:	d103      	bne.n	800ca76 <_raise_r+0x42>
 800ca6e:	2316      	movs	r3, #22
 800ca70:	6003      	str	r3, [r0, #0]
 800ca72:	2001      	movs	r0, #1
 800ca74:	e7e7      	b.n	800ca46 <_raise_r+0x12>
 800ca76:	2400      	movs	r4, #0
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca7e:	4798      	blx	r3
 800ca80:	2000      	movs	r0, #0
 800ca82:	e7e0      	b.n	800ca46 <_raise_r+0x12>

0800ca84 <raise>:
 800ca84:	4b02      	ldr	r3, [pc, #8]	; (800ca90 <raise+0xc>)
 800ca86:	4601      	mov	r1, r0
 800ca88:	6818      	ldr	r0, [r3, #0]
 800ca8a:	f7ff bfd3 	b.w	800ca34 <_raise_r>
 800ca8e:	bf00      	nop
 800ca90:	20000010 	.word	0x20000010

0800ca94 <_kill_r>:
 800ca94:	b538      	push	{r3, r4, r5, lr}
 800ca96:	2300      	movs	r3, #0
 800ca98:	4d06      	ldr	r5, [pc, #24]	; (800cab4 <_kill_r+0x20>)
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	4608      	mov	r0, r1
 800ca9e:	4611      	mov	r1, r2
 800caa0:	602b      	str	r3, [r5, #0]
 800caa2:	f7fa f860 	bl	8006b66 <_kill>
 800caa6:	1c43      	adds	r3, r0, #1
 800caa8:	d102      	bne.n	800cab0 <_kill_r+0x1c>
 800caaa:	682b      	ldr	r3, [r5, #0]
 800caac:	b103      	cbz	r3, 800cab0 <_kill_r+0x1c>
 800caae:	6023      	str	r3, [r4, #0]
 800cab0:	bd38      	pop	{r3, r4, r5, pc}
 800cab2:	bf00      	nop
 800cab4:	200002dc 	.word	0x200002dc

0800cab8 <_getpid_r>:
 800cab8:	f7fa b84e 	b.w	8006b58 <_getpid>

0800cabc <__sread>:
 800cabc:	b510      	push	{r4, lr}
 800cabe:	460c      	mov	r4, r1
 800cac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac4:	f000 f894 	bl	800cbf0 <_read_r>
 800cac8:	2800      	cmp	r0, #0
 800caca:	bfab      	itete	ge
 800cacc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cace:	89a3      	ldrhlt	r3, [r4, #12]
 800cad0:	181b      	addge	r3, r3, r0
 800cad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cad6:	bfac      	ite	ge
 800cad8:	6563      	strge	r3, [r4, #84]	; 0x54
 800cada:	81a3      	strhlt	r3, [r4, #12]
 800cadc:	bd10      	pop	{r4, pc}

0800cade <__swrite>:
 800cade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae2:	461f      	mov	r7, r3
 800cae4:	898b      	ldrh	r3, [r1, #12]
 800cae6:	4605      	mov	r5, r0
 800cae8:	05db      	lsls	r3, r3, #23
 800caea:	460c      	mov	r4, r1
 800caec:	4616      	mov	r6, r2
 800caee:	d505      	bpl.n	800cafc <__swrite+0x1e>
 800caf0:	2302      	movs	r3, #2
 800caf2:	2200      	movs	r2, #0
 800caf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf8:	f000 f868 	bl	800cbcc <_lseek_r>
 800cafc:	89a3      	ldrh	r3, [r4, #12]
 800cafe:	4632      	mov	r2, r6
 800cb00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb04:	81a3      	strh	r3, [r4, #12]
 800cb06:	4628      	mov	r0, r5
 800cb08:	463b      	mov	r3, r7
 800cb0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb12:	f000 b817 	b.w	800cb44 <_write_r>

0800cb16 <__sseek>:
 800cb16:	b510      	push	{r4, lr}
 800cb18:	460c      	mov	r4, r1
 800cb1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb1e:	f000 f855 	bl	800cbcc <_lseek_r>
 800cb22:	1c43      	adds	r3, r0, #1
 800cb24:	89a3      	ldrh	r3, [r4, #12]
 800cb26:	bf15      	itete	ne
 800cb28:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb32:	81a3      	strheq	r3, [r4, #12]
 800cb34:	bf18      	it	ne
 800cb36:	81a3      	strhne	r3, [r4, #12]
 800cb38:	bd10      	pop	{r4, pc}

0800cb3a <__sclose>:
 800cb3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb3e:	f000 b813 	b.w	800cb68 <_close_r>
	...

0800cb44 <_write_r>:
 800cb44:	b538      	push	{r3, r4, r5, lr}
 800cb46:	4604      	mov	r4, r0
 800cb48:	4608      	mov	r0, r1
 800cb4a:	4611      	mov	r1, r2
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	4d05      	ldr	r5, [pc, #20]	; (800cb64 <_write_r+0x20>)
 800cb50:	602a      	str	r2, [r5, #0]
 800cb52:	461a      	mov	r2, r3
 800cb54:	f7fa f83e 	bl	8006bd4 <_write>
 800cb58:	1c43      	adds	r3, r0, #1
 800cb5a:	d102      	bne.n	800cb62 <_write_r+0x1e>
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	b103      	cbz	r3, 800cb62 <_write_r+0x1e>
 800cb60:	6023      	str	r3, [r4, #0]
 800cb62:	bd38      	pop	{r3, r4, r5, pc}
 800cb64:	200002dc 	.word	0x200002dc

0800cb68 <_close_r>:
 800cb68:	b538      	push	{r3, r4, r5, lr}
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	4d05      	ldr	r5, [pc, #20]	; (800cb84 <_close_r+0x1c>)
 800cb6e:	4604      	mov	r4, r0
 800cb70:	4608      	mov	r0, r1
 800cb72:	602b      	str	r3, [r5, #0]
 800cb74:	f7fa f84a 	bl	8006c0c <_close>
 800cb78:	1c43      	adds	r3, r0, #1
 800cb7a:	d102      	bne.n	800cb82 <_close_r+0x1a>
 800cb7c:	682b      	ldr	r3, [r5, #0]
 800cb7e:	b103      	cbz	r3, 800cb82 <_close_r+0x1a>
 800cb80:	6023      	str	r3, [r4, #0]
 800cb82:	bd38      	pop	{r3, r4, r5, pc}
 800cb84:	200002dc 	.word	0x200002dc

0800cb88 <_fstat_r>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	4d06      	ldr	r5, [pc, #24]	; (800cba8 <_fstat_r+0x20>)
 800cb8e:	4604      	mov	r4, r0
 800cb90:	4608      	mov	r0, r1
 800cb92:	4611      	mov	r1, r2
 800cb94:	602b      	str	r3, [r5, #0]
 800cb96:	f7fa f844 	bl	8006c22 <_fstat>
 800cb9a:	1c43      	adds	r3, r0, #1
 800cb9c:	d102      	bne.n	800cba4 <_fstat_r+0x1c>
 800cb9e:	682b      	ldr	r3, [r5, #0]
 800cba0:	b103      	cbz	r3, 800cba4 <_fstat_r+0x1c>
 800cba2:	6023      	str	r3, [r4, #0]
 800cba4:	bd38      	pop	{r3, r4, r5, pc}
 800cba6:	bf00      	nop
 800cba8:	200002dc 	.word	0x200002dc

0800cbac <_isatty_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	2300      	movs	r3, #0
 800cbb0:	4d05      	ldr	r5, [pc, #20]	; (800cbc8 <_isatty_r+0x1c>)
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	4608      	mov	r0, r1
 800cbb6:	602b      	str	r3, [r5, #0]
 800cbb8:	f7fa f842 	bl	8006c40 <_isatty>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	d102      	bne.n	800cbc6 <_isatty_r+0x1a>
 800cbc0:	682b      	ldr	r3, [r5, #0]
 800cbc2:	b103      	cbz	r3, 800cbc6 <_isatty_r+0x1a>
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
 800cbc8:	200002dc 	.word	0x200002dc

0800cbcc <_lseek_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4604      	mov	r4, r0
 800cbd0:	4608      	mov	r0, r1
 800cbd2:	4611      	mov	r1, r2
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	4d05      	ldr	r5, [pc, #20]	; (800cbec <_lseek_r+0x20>)
 800cbd8:	602a      	str	r2, [r5, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	f7fa f83a 	bl	8006c54 <_lseek>
 800cbe0:	1c43      	adds	r3, r0, #1
 800cbe2:	d102      	bne.n	800cbea <_lseek_r+0x1e>
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	b103      	cbz	r3, 800cbea <_lseek_r+0x1e>
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	bd38      	pop	{r3, r4, r5, pc}
 800cbec:	200002dc 	.word	0x200002dc

0800cbf0 <_read_r>:
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	4608      	mov	r0, r1
 800cbf6:	4611      	mov	r1, r2
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	4d05      	ldr	r5, [pc, #20]	; (800cc10 <_read_r+0x20>)
 800cbfc:	602a      	str	r2, [r5, #0]
 800cbfe:	461a      	mov	r2, r3
 800cc00:	f7f9 ffcb 	bl	8006b9a <_read>
 800cc04:	1c43      	adds	r3, r0, #1
 800cc06:	d102      	bne.n	800cc0e <_read_r+0x1e>
 800cc08:	682b      	ldr	r3, [r5, #0]
 800cc0a:	b103      	cbz	r3, 800cc0e <_read_r+0x1e>
 800cc0c:	6023      	str	r3, [r4, #0]
 800cc0e:	bd38      	pop	{r3, r4, r5, pc}
 800cc10:	200002dc 	.word	0x200002dc

0800cc14 <_init>:
 800cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc16:	bf00      	nop
 800cc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc1a:	bc08      	pop	{r3}
 800cc1c:	469e      	mov	lr, r3
 800cc1e:	4770      	bx	lr

0800cc20 <_fini>:
 800cc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc22:	bf00      	nop
 800cc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc26:	bc08      	pop	{r3}
 800cc28:	469e      	mov	lr, r3
 800cc2a:	4770      	bx	lr
