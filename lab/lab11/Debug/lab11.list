
lab11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005330  08005330  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005330  08005330  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005330  08005330  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005330  08005330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005334  08005334  00015334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014e4  20000074  080053ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001558  080053ac  00021558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154e4  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a7  00000000  00000000  00035581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00038628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  00039770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0a9  00000000  00000000  0003a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123fa  00000000  00000000  00055849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a07b1  00000000  00000000  00067c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001083f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cbc  00000000  00000000  00108448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	08005188 	.word	0x08005188

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	08005188 	.word	0x08005188

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000090 	.word	0x20000090
 800026c:	20000144 	.word	0x20000144

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b5b0      	push	{r4, r5, r7, lr}
 8000272:	b0a2      	sub	sp, #136	; 0x88
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fb5b 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f891 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f8ff 	bl	8000480 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000282:	f000 f8d3 	bl	800042c <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of bSem01 */
  osSemaphoreDef(bSem01);
 8000286:	2300      	movs	r3, #0
 8000288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800028c:	2300      	movs	r3, #0
 800028e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  bSem01Handle = osSemaphoreCreate(osSemaphore(bSem01), 1);
 8000292:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000296:	2101      	movs	r1, #1
 8000298:	4618      	mov	r0, r3
 800029a:	f001 ff46 	bl	800212a <osSemaphoreCreate>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a34      	ldr	r2, [pc, #208]	; (8000374 <main+0x104>)
 80002a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of cSemEmpty */
  osSemaphoreDef(cSemEmpty);
 80002a4:	2300      	movs	r3, #0
 80002a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80002a8:	2300      	movs	r3, #0
 80002aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  cSemEmptyHandle = osSemaphoreCreate(osSemaphore(cSemEmpty), 4);
 80002ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80002b0:	2104      	movs	r1, #4
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 ff39 	bl	800212a <osSemaphoreCreate>
 80002b8:	4603      	mov	r3, r0
 80002ba:	4a2f      	ldr	r2, [pc, #188]	; (8000378 <main+0x108>)
 80002bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of cSemFilled */
  osSemaphoreDef(cSemFilled);
 80002be:	2300      	movs	r3, #0
 80002c0:	673b      	str	r3, [r7, #112]	; 0x70
 80002c2:	2300      	movs	r3, #0
 80002c4:	677b      	str	r3, [r7, #116]	; 0x74
  cSemFilledHandle = osSemaphoreCreate(osSemaphore(cSemFilled), 2);
 80002c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ca:	2102      	movs	r1, #2
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 ff2c 	bl	800212a <osSemaphoreCreate>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a29      	ldr	r2, [pc, #164]	; (800037c <main+0x10c>)
 80002d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of periodic */
  osThreadDef(periodic, PeriodicTask, osPriorityNormal, 0, 128);
 80002d8:	4b29      	ldr	r3, [pc, #164]	; (8000380 <main+0x110>)
 80002da:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80002de:	461d      	mov	r5, r3
 80002e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  periodicHandle = osThreadCreate(osThread(periodic), NULL);
 80002ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 feb9 	bl	800206a <osThreadCreate>
 80002f8:	4603      	mov	r3, r0
 80002fa:	4a22      	ldr	r2, [pc, #136]	; (8000384 <main+0x114>)
 80002fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of handle */
  osThreadDef(handle, HandleTask, osPriorityIdle, 0, 128);
 80002fe:	4b22      	ldr	r3, [pc, #136]	; (8000388 <main+0x118>)
 8000300:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000304:	461d      	mov	r5, r3
 8000306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800030e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  handleHandle = osThreadCreate(osThread(handle), NULL);
 8000312:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f001 fea6 	bl	800206a <osThreadCreate>
 800031e:	4603      	mov	r3, r0
 8000320:	4a1a      	ldr	r2, [pc, #104]	; (800038c <main+0x11c>)
 8000322:	6013      	str	r3, [r2, #0]

  /* definition and creation of Producer */
  osThreadDef(Producer, FuncProducer, osPriorityNormal, 0, 128);
 8000324:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <main+0x120>)
 8000326:	f107 041c 	add.w	r4, r7, #28
 800032a:	461d      	mov	r5, r3
 800032c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800032e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000330:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProducerHandle = osThreadCreate(osThread(Producer), NULL);
 8000338:	f107 031c 	add.w	r3, r7, #28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fe93 	bl	800206a <osThreadCreate>
 8000344:	4603      	mov	r3, r0
 8000346:	4a13      	ldr	r2, [pc, #76]	; (8000394 <main+0x124>)
 8000348:	6013      	str	r3, [r2, #0]

  /* definition and creation of Consumer */
  osThreadDef(Consumer, FuncConsumer, osPriorityBelowNormal, 0, 128);
 800034a:	4b13      	ldr	r3, [pc, #76]	; (8000398 <main+0x128>)
 800034c:	463c      	mov	r4, r7
 800034e:	461d      	mov	r5, r3
 8000350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ConsumerHandle = osThreadCreate(osThread(Consumer), NULL);
 800035c:	463b      	mov	r3, r7
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f001 fe82 	bl	800206a <osThreadCreate>
 8000366:	4603      	mov	r3, r0
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <main+0x12c>)
 800036a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800036c:	f001 fe76 	bl	800205c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000370:	e7fe      	b.n	8000370 <main+0x100>
 8000372:	bf00      	nop
 8000374:	200014a8 	.word	0x200014a8
 8000378:	200014f4 	.word	0x200014f4
 800037c:	200014a4 	.word	0x200014a4
 8000380:	080051cc 	.word	0x080051cc
 8000384:	200014f0 	.word	0x200014f0
 8000388:	080051e8 	.word	0x080051e8
 800038c:	200014a0 	.word	0x200014a0
 8000390:	08005204 	.word	0x08005204
 8000394:	2000149c 	.word	0x2000149c
 8000398:	08005220 	.word	0x08005220
 800039c:	200014f8 	.word	0x200014f8

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b090      	sub	sp, #64	; 0x40
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0318 	add.w	r3, r7, #24
 80003aa:	2228      	movs	r2, #40	; 0x28
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f004 fa4e 	bl	8004850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c2:	2301      	movs	r3, #1
 80003c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d0:	2301      	movs	r3, #1
 80003d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d4:	2302      	movs	r3, #2
 80003d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e4:	f107 0318 	add.w	r3, r7, #24
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fd9d 	bl	8000f28 <HAL_RCC_OscConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003f4:	f000 f938 	bl	8000668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f8:	230f      	movs	r3, #15
 80003fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fc:	2302      	movs	r3, #2
 80003fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f001 f808 	bl	8001428 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800041e:	f000 f923 	bl	8000668 <Error_Handler>
  }
}
 8000422:	bf00      	nop
 8000424:	3740      	adds	r7, #64	; 0x40
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000432:	4a12      	ldr	r2, [pc, #72]	; (800047c <MX_USART1_UART_Init+0x50>)
 8000434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800043c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000452:	220c      	movs	r2, #12
 8000454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000464:	f001 fc1a 	bl	8001c9c <HAL_UART_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800046e:	f000 f8fb 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200014ac 	.word	0x200014ac
 800047c:	40013800 	.word	0x40013800

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	f107 0308 	add.w	r3, r7, #8
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000494:	4b21      	ldr	r3, [pc, #132]	; (800051c <MX_GPIO_Init+0x9c>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a20      	ldr	r2, [pc, #128]	; (800051c <MX_GPIO_Init+0x9c>)
 800049a:	f043 0320 	orr.w	r3, r3, #32
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b1e      	ldr	r3, [pc, #120]	; (800051c <MX_GPIO_Init+0x9c>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0320 	and.w	r3, r3, #32
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <MX_GPIO_Init+0x9c>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a1a      	ldr	r2, [pc, #104]	; (800051c <MX_GPIO_Init+0x9c>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <MX_GPIO_Init+0x9c>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ca:	4815      	ldr	r0, [pc, #84]	; (8000520 <MX_GPIO_Init+0xa0>)
 80004cc:	f000 fcfa 	bl	8000ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2104      	movs	r1, #4
 80004d4:	4813      	ldr	r0, [pc, #76]	; (8000524 <MX_GPIO_Init+0xa4>)
 80004d6:	f000 fcf5 	bl	8000ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80004da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2302      	movs	r3, #2
 80004ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80004ec:	f107 0308 	add.w	r3, r7, #8
 80004f0:	4619      	mov	r1, r3
 80004f2:	480b      	ldr	r0, [pc, #44]	; (8000520 <MX_GPIO_Init+0xa0>)
 80004f4:	f000 fb52 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80004f8:	2304      	movs	r3, #4
 80004fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fc:	2301      	movs	r3, #1
 80004fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000504:	2302      	movs	r3, #2
 8000506:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000508:	f107 0308 	add.w	r3, r7, #8
 800050c:	4619      	mov	r1, r3
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_GPIO_Init+0xa4>)
 8000510:	f000 fb44 	bl	8000b9c <HAL_GPIO_Init>

}
 8000514:	bf00      	nop
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40021000 	.word	0x40021000
 8000520:	40010800 	.word	0x40010800
 8000524:	40011400 	.word	0x40011400

08000528 <PeriodicTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PeriodicTask */
void PeriodicTask(void const * argument)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000534:	f001 fde5 	bl	8002102 <osDelay>
    osSemaphoreRelease(bSem01Handle);
 8000538:	4b02      	ldr	r3, [pc, #8]	; (8000544 <PeriodicTask+0x1c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f001 fe81 	bl	8002244 <osSemaphoreRelease>
    osDelay(1000);
 8000542:	e7f5      	b.n	8000530 <PeriodicTask+0x8>
 8000544:	200014a8 	.word	0x200014a8

08000548 <HandleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HandleTask */
void HandleTask(void const * argument)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HandleTask */
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreWait(bSem01Handle, osWaitForever);
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <HandleTask+0x2c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f04f 31ff 	mov.w	r1, #4294967295
 8000558:	4618      	mov	r0, r3
 800055a:	f001 fe25 	bl	80021a8 <osSemaphoreWait>
    HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <HandleTask+0x30>)
 8000564:	f000 fcc6 	bl	8000ef4 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000568:	2104      	movs	r1, #4
 800056a:	4804      	ldr	r0, [pc, #16]	; (800057c <HandleTask+0x34>)
 800056c:	f000 fcc2 	bl	8000ef4 <HAL_GPIO_TogglePin>
    osSemaphoreWait(bSem01Handle, osWaitForever);
 8000570:	e7ee      	b.n	8000550 <HandleTask+0x8>
 8000572:	bf00      	nop
 8000574:	200014a8 	.word	0x200014a8
 8000578:	40010800 	.word	0x40010800
 800057c:	40011400 	.word	0x40011400

08000580 <FuncProducer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FuncProducer */
void FuncProducer(void const * argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FuncProducer */
  char msg[30];
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(cSemEmptyHandle, osWaitForever);
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <FuncProducer+0x50>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f04f 31ff 	mov.w	r1, #4294967295
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fe09 	bl	80021a8 <osSemaphoreWait>
	  sprintf(msg, "Producer produce data\r\n");
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	490e      	ldr	r1, [pc, #56]	; (80005d4 <FuncProducer+0x54>)
 800059c:	4618      	mov	r0, r3
 800059e:	f004 fa33 	bl	8004a08 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fe42 	bl	8000230 <strlen>
 80005ac:	4603      	mov	r3, r0
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	f107 0108 	add.w	r1, r7, #8
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <FuncProducer+0x58>)
 80005ba:	f001 fbbc 	bl	8001d36 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80005be:	2064      	movs	r0, #100	; 0x64
 80005c0:	f000 f9e8 	bl	8000994 <HAL_Delay>
	  osSemaphoreRelease(cSemFilledHandle);
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <FuncProducer+0x5c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 fe3b 	bl	8002244 <osSemaphoreRelease>
  {
 80005ce:	e7db      	b.n	8000588 <FuncProducer+0x8>
 80005d0:	200014f4 	.word	0x200014f4
 80005d4:	0800523c 	.word	0x0800523c
 80005d8:	200014ac 	.word	0x200014ac
 80005dc:	200014a4 	.word	0x200014a4

080005e0 <FuncConsumer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FuncConsumer */
void FuncConsumer(void const * argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FuncConsumer */
  char msg[30];
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(cSemFilledHandle, osWaitForever);
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <FuncConsumer+0x54>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f04f 31ff 	mov.w	r1, #4294967295
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fdd9 	bl	80021a8 <osSemaphoreWait>
	  sprintf(msg, "Consumer consume data\r\n");
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	490f      	ldr	r1, [pc, #60]	; (8000638 <FuncConsumer+0x58>)
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 fa03 	bl	8004a08 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fe12 	bl	8000230 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	f107 0108 	add.w	r1, r7, #8
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	4808      	ldr	r0, [pc, #32]	; (800063c <FuncConsumer+0x5c>)
 800061a:	f001 fb8c 	bl	8001d36 <HAL_UART_Transmit>
	  HAL_Delay(400);
 800061e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000622:	f000 f9b7 	bl	8000994 <HAL_Delay>
	  osSemaphoreRelease(cSemEmptyHandle);
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <FuncConsumer+0x60>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fe0a 	bl	8002244 <osSemaphoreRelease>
  {
 8000630:	e7da      	b.n	80005e8 <FuncConsumer+0x8>
 8000632:	bf00      	nop
 8000634:	200014a4 	.word	0x200014a4
 8000638:	08005254 	.word	0x08005254
 800063c:	200014ac 	.word	0x200014ac
 8000640:	200014f4 	.word	0x200014f4

08000644 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d101      	bne.n	800065a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000656:	f000 f981 	bl	800095c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40000400 	.word	0x40000400

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <Error_Handler+0x8>
	...

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <HAL_MspInit+0x68>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <HAL_MspInit+0x68>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6193      	str	r3, [r2, #24]
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_MspInit+0x68>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_MspInit+0x68>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a11      	ldr	r2, [pc, #68]	; (80006dc <HAL_MspInit+0x68>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_MspInit+0x68>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	210f      	movs	r1, #15
 80006ae:	f06f 0001 	mvn.w	r0, #1
 80006b2:	f000 fa48 	bl	8000b46 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_MspInit+0x6c>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_MspInit+0x6c>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010000 	.word	0x40010000

080006e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <HAL_UART_MspInit+0x8c>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d131      	bne.n	8000768 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_UART_MspInit+0x90>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a1a      	ldr	r2, [pc, #104]	; (8000774 <HAL_UART_MspInit+0x90>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_UART_MspInit+0x90>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_UART_MspInit+0x90>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a14      	ldr	r2, [pc, #80]	; (8000774 <HAL_UART_MspInit+0x90>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_UART_MspInit+0x90>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000738:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	2302      	movs	r3, #2
 800073c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4619      	mov	r1, r3
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <HAL_UART_MspInit+0x94>)
 800074a:	f000 fa27 	bl	8000b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800074e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4619      	mov	r1, r3
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <HAL_UART_MspInit+0x94>)
 8000764:	f000 fa1a 	bl	8000b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40013800 	.word	0x40013800
 8000774:	40021000 	.word	0x40021000
 8000778:	40010800 	.word	0x40010800

0800077c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08c      	sub	sp, #48	; 0x30
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 800078c:	2200      	movs	r2, #0
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	201d      	movs	r0, #29
 8000792:	f000 f9d8 	bl	8000b46 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000796:	201d      	movs	r0, #29
 8000798:	f000 f9f1 	bl	8000b7e <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <HAL_InitTick+0xa0>)
 800079e:	69db      	ldr	r3, [r3, #28]
 80007a0:	4a1e      	ldr	r2, [pc, #120]	; (800081c <HAL_InitTick+0xa0>)
 80007a2:	f043 0302 	orr.w	r3, r3, #2
 80007a6:	61d3      	str	r3, [r2, #28]
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <HAL_InitTick+0xa0>)
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	f003 0302 	and.w	r3, r3, #2
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007b4:	f107 0210 	add.w	r2, r7, #16
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 ffae 	bl	8001720 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80007c4:	f000 ff84 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 80007c8:	4603      	mov	r3, r0
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <HAL_InitTick+0xa4>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9b      	lsrs	r3, r3, #18
 80007d8:	3b01      	subs	r3, #1
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_InitTick+0xa8>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <HAL_InitTick+0xac>)
 80007e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_InitTick+0xa8>)
 80007e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007e8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80007ea:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <HAL_InitTick+0xa8>)
 80007ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ee:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <HAL_InitTick+0xa8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <HAL_InitTick+0xa8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <HAL_InitTick+0xa8>)
 80007fe:	f000 ffdd 	bl	80017bc <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d104      	bne.n	8000812 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000808:	4806      	ldr	r0, [pc, #24]	; (8000824 <HAL_InitTick+0xa8>)
 800080a:	f001 f82f 	bl	800186c <HAL_TIM_Base_Start_IT>
 800080e:	4603      	mov	r3, r0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3730      	adds	r7, #48	; 0x30
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000
 8000820:	431bde83 	.word	0x431bde83
 8000824:	200014fc 	.word	0x200014fc
 8000828:	40000400 	.word	0x40000400

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <NMI_Handler+0x4>

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <MemManage_Handler+0x4>

0800083e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <UsageFault_Handler+0x4>

0800084a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
	...

08000858 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <TIM3_IRQHandler+0x10>)
 800085e:	f001 f865 	bl	800192c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200014fc 	.word	0x200014fc

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d207      	bcs.n	80008ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800089c:	f003 ff9e 	bl	80047dc <__errno>
 80008a0:	4603      	mov	r3, r0
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	e009      	b.n	80008c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <_sbrk+0x64>)
 80008bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000c000 	.word	0x2000c000
 80008cc:	00000400 	.word	0x00000400
 80008d0:	20000344 	.word	0x20000344
 80008d4:	20001558 	.word	0x20001558

080008d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800090a:	f7ff ffe5 	bl	80008d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090e:	f003 ff6b 	bl	80047e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000912:	f7ff fcad 	bl	8000270 <main>
  bx lr
 8000916:	4770      	bx	lr
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000920:	08005338 	.word	0x08005338
  ldr r2, =_sbss
 8000924:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000928:	20001558 	.word	0x20001558

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_Init+0x28>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a07      	ldr	r2, [pc, #28]	; (8000958 <HAL_Init+0x28>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 f8f5 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	200f      	movs	r0, #15
 8000948:	f7ff ff18 	bl	800077c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094c:	f7ff fe92 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x1c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x20>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a03      	ldr	r2, [pc, #12]	; (800097c <HAL_IncTick+0x20>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000008 	.word	0x20000008
 800097c:	20001544 	.word	0x20001544

08000980 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b02      	ldr	r3, [pc, #8]	; (8000990 <HAL_GetTick+0x10>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	20001544 	.word	0x20001544

08000994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800099c:	f7ff fff0 	bl	8000980 <HAL_GetTick>
 80009a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ac:	d005      	beq.n	80009ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_Delay+0x44>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ba:	bf00      	nop
 80009bc:	f7ff ffe0 	bl	8000980 <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d8f7      	bhi.n	80009bc <HAL_Delay+0x28>
  {
  }
}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db0b      	blt.n	8000a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 021f 	and.w	r2, r3, #31
 8000a58:	4906      	ldr	r1, [pc, #24]	; (8000a74 <__NVIC_EnableIRQ+0x34>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100

08000a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	db0a      	blt.n	8000aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	490c      	ldr	r1, [pc, #48]	; (8000ac4 <__NVIC_SetPriority+0x4c>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa0:	e00a      	b.n	8000ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4908      	ldr	r1, [pc, #32]	; (8000ac8 <__NVIC_SetPriority+0x50>)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	0112      	lsls	r2, r2, #4
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	761a      	strb	r2, [r3, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000e100 	.word	0xe000e100
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f1c3 0307 	rsb	r3, r3, #7
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	bf28      	it	cs
 8000aea:	2304      	movcs	r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3304      	adds	r3, #4
 8000af2:	2b06      	cmp	r3, #6
 8000af4:	d902      	bls.n	8000afc <NVIC_EncodePriority+0x30>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3b03      	subs	r3, #3
 8000afa:	e000      	b.n	8000afe <NVIC_EncodePriority+0x32>
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43d9      	mvns	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	4313      	orrs	r3, r2
         );
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3724      	adds	r7, #36	; 0x24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff4f 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff64 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ffb2 	bl	8000acc <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff81 	bl	8000a78 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff57 	bl	8000a40 <__NVIC_EnableIRQ>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b08b      	sub	sp, #44	; 0x2c
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bae:	e179      	b.n	8000ea4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	f040 8168 	bne.w	8000e9e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	4aa0      	ldr	r2, [pc, #640]	; (8000e54 <HAL_GPIO_Init+0x2b8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d05e      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000bd8:	4a9e      	ldr	r2, [pc, #632]	; (8000e54 <HAL_GPIO_Init+0x2b8>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d875      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000bde:	4a9e      	ldr	r2, [pc, #632]	; (8000e58 <HAL_GPIO_Init+0x2bc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d058      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000be4:	4a9c      	ldr	r2, [pc, #624]	; (8000e58 <HAL_GPIO_Init+0x2bc>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d86f      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000bea:	4a9c      	ldr	r2, [pc, #624]	; (8000e5c <HAL_GPIO_Init+0x2c0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d052      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000bf0:	4a9a      	ldr	r2, [pc, #616]	; (8000e5c <HAL_GPIO_Init+0x2c0>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d869      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000bf6:	4a9a      	ldr	r2, [pc, #616]	; (8000e60 <HAL_GPIO_Init+0x2c4>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d04c      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000bfc:	4a98      	ldr	r2, [pc, #608]	; (8000e60 <HAL_GPIO_Init+0x2c4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d863      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000c02:	4a98      	ldr	r2, [pc, #608]	; (8000e64 <HAL_GPIO_Init+0x2c8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d046      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000c08:	4a96      	ldr	r2, [pc, #600]	; (8000e64 <HAL_GPIO_Init+0x2c8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d85d      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000c0e:	2b12      	cmp	r3, #18
 8000c10:	d82a      	bhi.n	8000c68 <HAL_GPIO_Init+0xcc>
 8000c12:	2b12      	cmp	r3, #18
 8000c14:	d859      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000c16:	a201      	add	r2, pc, #4	; (adr r2, 8000c1c <HAL_GPIO_Init+0x80>)
 8000c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1c:	08000c97 	.word	0x08000c97
 8000c20:	08000c71 	.word	0x08000c71
 8000c24:	08000c83 	.word	0x08000c83
 8000c28:	08000cc5 	.word	0x08000cc5
 8000c2c:	08000ccb 	.word	0x08000ccb
 8000c30:	08000ccb 	.word	0x08000ccb
 8000c34:	08000ccb 	.word	0x08000ccb
 8000c38:	08000ccb 	.word	0x08000ccb
 8000c3c:	08000ccb 	.word	0x08000ccb
 8000c40:	08000ccb 	.word	0x08000ccb
 8000c44:	08000ccb 	.word	0x08000ccb
 8000c48:	08000ccb 	.word	0x08000ccb
 8000c4c:	08000ccb 	.word	0x08000ccb
 8000c50:	08000ccb 	.word	0x08000ccb
 8000c54:	08000ccb 	.word	0x08000ccb
 8000c58:	08000ccb 	.word	0x08000ccb
 8000c5c:	08000ccb 	.word	0x08000ccb
 8000c60:	08000c79 	.word	0x08000c79
 8000c64:	08000c8d 	.word	0x08000c8d
 8000c68:	4a7f      	ldr	r2, [pc, #508]	; (8000e68 <HAL_GPIO_Init+0x2cc>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d013      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c6e:	e02c      	b.n	8000cca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	623b      	str	r3, [r7, #32]
          break;
 8000c76:	e029      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	623b      	str	r3, [r7, #32]
          break;
 8000c80:	e024      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	3308      	adds	r3, #8
 8000c88:	623b      	str	r3, [r7, #32]
          break;
 8000c8a:	e01f      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	330c      	adds	r3, #12
 8000c92:	623b      	str	r3, [r7, #32]
          break;
 8000c94:	e01a      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	623b      	str	r3, [r7, #32]
          break;
 8000ca2:	e013      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d105      	bne.n	8000cb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cac:	2308      	movs	r3, #8
 8000cae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	611a      	str	r2, [r3, #16]
          break;
 8000cb6:	e009      	b.n	8000ccc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69fa      	ldr	r2, [r7, #28]
 8000cc0:	615a      	str	r2, [r3, #20]
          break;
 8000cc2:	e003      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
          break;
 8000cc8:	e000      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          break;
 8000cca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	2bff      	cmp	r3, #255	; 0xff
 8000cd0:	d801      	bhi.n	8000cd6 <HAL_GPIO_Init+0x13a>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	e001      	b.n	8000cda <HAL_GPIO_Init+0x13e>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	2bff      	cmp	r3, #255	; 0xff
 8000ce0:	d802      	bhi.n	8000ce8 <HAL_GPIO_Init+0x14c>
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	e002      	b.n	8000cee <HAL_GPIO_Init+0x152>
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cea:	3b08      	subs	r3, #8
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	210f      	movs	r1, #15
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	401a      	ands	r2, r3
 8000d00:	6a39      	ldr	r1, [r7, #32]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 80c1 	beq.w	8000e9e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1c:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a52      	ldr	r2, [pc, #328]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b50      	ldr	r3, [pc, #320]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d34:	4a4e      	ldr	r2, [pc, #312]	; (8000e70 <HAL_GPIO_Init+0x2d4>)
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	089b      	lsrs	r3, r3, #2
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	220f      	movs	r2, #15
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a46      	ldr	r2, [pc, #280]	; (8000e74 <HAL_GPIO_Init+0x2d8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d01f      	beq.n	8000da0 <HAL_GPIO_Init+0x204>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a45      	ldr	r2, [pc, #276]	; (8000e78 <HAL_GPIO_Init+0x2dc>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d019      	beq.n	8000d9c <HAL_GPIO_Init+0x200>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a44      	ldr	r2, [pc, #272]	; (8000e7c <HAL_GPIO_Init+0x2e0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d013      	beq.n	8000d98 <HAL_GPIO_Init+0x1fc>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a43      	ldr	r2, [pc, #268]	; (8000e80 <HAL_GPIO_Init+0x2e4>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d00d      	beq.n	8000d94 <HAL_GPIO_Init+0x1f8>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a42      	ldr	r2, [pc, #264]	; (8000e84 <HAL_GPIO_Init+0x2e8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d007      	beq.n	8000d90 <HAL_GPIO_Init+0x1f4>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a41      	ldr	r2, [pc, #260]	; (8000e88 <HAL_GPIO_Init+0x2ec>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d101      	bne.n	8000d8c <HAL_GPIO_Init+0x1f0>
 8000d88:	2305      	movs	r3, #5
 8000d8a:	e00a      	b.n	8000da2 <HAL_GPIO_Init+0x206>
 8000d8c:	2306      	movs	r3, #6
 8000d8e:	e008      	b.n	8000da2 <HAL_GPIO_Init+0x206>
 8000d90:	2304      	movs	r3, #4
 8000d92:	e006      	b.n	8000da2 <HAL_GPIO_Init+0x206>
 8000d94:	2303      	movs	r3, #3
 8000d96:	e004      	b.n	8000da2 <HAL_GPIO_Init+0x206>
 8000d98:	2302      	movs	r3, #2
 8000d9a:	e002      	b.n	8000da2 <HAL_GPIO_Init+0x206>
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <HAL_GPIO_Init+0x206>
 8000da0:	2300      	movs	r3, #0
 8000da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da4:	f002 0203 	and.w	r2, r2, #3
 8000da8:	0092      	lsls	r2, r2, #2
 8000daa:	4093      	lsls	r3, r2
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000db2:	492f      	ldr	r1, [pc, #188]	; (8000e70 <HAL_GPIO_Init+0x2d4>)
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	3302      	adds	r3, #2
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d006      	beq.n	8000dda <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	492e      	ldr	r1, [pc, #184]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	600b      	str	r3, [r1, #0]
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dda:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	492a      	ldr	r1, [pc, #168]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d006      	beq.n	8000e02 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	4924      	ldr	r1, [pc, #144]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	604b      	str	r3, [r1, #4]
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e02:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	4920      	ldr	r1, [pc, #128]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	491a      	ldr	r1, [pc, #104]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	608b      	str	r3, [r1, #8]
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	4916      	ldr	r1, [pc, #88]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d025      	beq.n	8000e90 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	4910      	ldr	r1, [pc, #64]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	60cb      	str	r3, [r1, #12]
 8000e50:	e025      	b.n	8000e9e <HAL_GPIO_Init+0x302>
 8000e52:	bf00      	nop
 8000e54:	10320000 	.word	0x10320000
 8000e58:	10310000 	.word	0x10310000
 8000e5c:	10220000 	.word	0x10220000
 8000e60:	10210000 	.word	0x10210000
 8000e64:	10120000 	.word	0x10120000
 8000e68:	10110000 	.word	0x10110000
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010000 	.word	0x40010000
 8000e74:	40010800 	.word	0x40010800
 8000e78:	40010c00 	.word	0x40010c00
 8000e7c:	40011000 	.word	0x40011000
 8000e80:	40011400 	.word	0x40011400
 8000e84:	40011800 	.word	0x40011800
 8000e88:	40011c00 	.word	0x40011c00
 8000e8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_GPIO_Init+0x324>)
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4909      	ldr	r1, [pc, #36]	; (8000ec0 <HAL_GPIO_Init+0x324>)
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f47f ae7e 	bne.w	8000bb0 <HAL_GPIO_Init+0x14>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	372c      	adds	r7, #44	; 0x2c
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	40010400 	.word	0x40010400

08000ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	807b      	strh	r3, [r7, #2]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed4:	787b      	ldrb	r3, [r7, #1]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eda:	887a      	ldrh	r2, [r7, #2]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ee0:	e003      	b.n	8000eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	041a      	lsls	r2, r3, #16
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	611a      	str	r2, [r3, #16]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	041a      	lsls	r2, r3, #16
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43d9      	mvns	r1, r3
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	400b      	ands	r3, r1
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	611a      	str	r2, [r3, #16]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
	...

08000f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e26c      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 8087 	beq.w	8001056 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f48:	4b92      	ldr	r3, [pc, #584]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d00c      	beq.n	8000f6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f54:	4b8f      	ldr	r3, [pc, #572]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d112      	bne.n	8000f86 <HAL_RCC_OscConfig+0x5e>
 8000f60:	4b8c      	ldr	r3, [pc, #560]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6c:	d10b      	bne.n	8000f86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6e:	4b89      	ldr	r3, [pc, #548]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d06c      	beq.n	8001054 <HAL_RCC_OscConfig+0x12c>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d168      	bne.n	8001054 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e246      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8e:	d106      	bne.n	8000f9e <HAL_RCC_OscConfig+0x76>
 8000f90:	4b80      	ldr	r3, [pc, #512]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a7f      	ldr	r2, [pc, #508]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	e02e      	b.n	8000ffc <HAL_RCC_OscConfig+0xd4>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x98>
 8000fa6:	4b7b      	ldr	r3, [pc, #492]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a7a      	ldr	r2, [pc, #488]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b78      	ldr	r3, [pc, #480]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a77      	ldr	r2, [pc, #476]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e01d      	b.n	8000ffc <HAL_RCC_OscConfig+0xd4>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc8:	d10c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0xbc>
 8000fca:	4b72      	ldr	r3, [pc, #456]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a71      	ldr	r2, [pc, #452]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	4b6f      	ldr	r3, [pc, #444]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a6e      	ldr	r2, [pc, #440]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e00b      	b.n	8000ffc <HAL_RCC_OscConfig+0xd4>
 8000fe4:	4b6b      	ldr	r3, [pc, #428]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a6a      	ldr	r2, [pc, #424]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b68      	ldr	r3, [pc, #416]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a67      	ldr	r2, [pc, #412]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d013      	beq.n	800102c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001004:	f7ff fcbc 	bl	8000980 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fcb8 	bl	8000980 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e1fa      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f0      	beq.n	800100c <HAL_RCC_OscConfig+0xe4>
 800102a:	e014      	b.n	8001056 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fca8 	bl	8000980 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fca4 	bl	8000980 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e1e6      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001046:	4b53      	ldr	r3, [pc, #332]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x10c>
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d063      	beq.n	800112a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001062:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00b      	beq.n	8001086 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800106e:	4b49      	ldr	r3, [pc, #292]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b08      	cmp	r3, #8
 8001078:	d11c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x18c>
 800107a:	4b46      	ldr	r3, [pc, #280]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d116      	bne.n	80010b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001086:	4b43      	ldr	r3, [pc, #268]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <HAL_RCC_OscConfig+0x176>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d001      	beq.n	800109e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e1ba      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109e:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4939      	ldr	r1, [pc, #228]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b2:	e03a      	b.n	800112a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d020      	beq.n	80010fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_RCC_OscConfig+0x270>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fc5d 	bl	8000980 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ca:	f7ff fc59 	bl	8000980 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e19b      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f0      	beq.n	80010ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4927      	ldr	r1, [pc, #156]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	600b      	str	r3, [r1, #0]
 80010fc:	e015      	b.n	800112a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <HAL_RCC_OscConfig+0x270>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fc3c 	bl	8000980 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110c:	f7ff fc38 	bl	8000980 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e17a      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d03a      	beq.n	80011ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d019      	beq.n	8001172 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_RCC_OscConfig+0x274>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001144:	f7ff fc1c 	bl	8000980 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114c:	f7ff fc18 	bl	8000980 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e15a      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800116a:	2001      	movs	r0, #1
 800116c:	f000 fb08 	bl	8001780 <RCC_Delay>
 8001170:	e01c      	b.n	80011ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_RCC_OscConfig+0x274>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001178:	f7ff fc02 	bl	8000980 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117e:	e00f      	b.n	80011a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001180:	f7ff fbfe 	bl	8000980 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d908      	bls.n	80011a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e140      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	42420000 	.word	0x42420000
 800119c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a0:	4b9e      	ldr	r3, [pc, #632]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1e9      	bne.n	8001180 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80a6 	beq.w	8001306 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011be:	4b97      	ldr	r3, [pc, #604]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10d      	bne.n	80011e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	4b94      	ldr	r3, [pc, #592]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4a93      	ldr	r2, [pc, #588]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	61d3      	str	r3, [r2, #28]
 80011d6:	4b91      	ldr	r3, [pc, #580]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011e2:	2301      	movs	r3, #1
 80011e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e6:	4b8e      	ldr	r3, [pc, #568]	; (8001420 <HAL_RCC_OscConfig+0x4f8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d118      	bne.n	8001224 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f2:	4b8b      	ldr	r3, [pc, #556]	; (8001420 <HAL_RCC_OscConfig+0x4f8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a8a      	ldr	r2, [pc, #552]	; (8001420 <HAL_RCC_OscConfig+0x4f8>)
 80011f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fbbf 	bl	8000980 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001206:	f7ff fbbb 	bl	8000980 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b64      	cmp	r3, #100	; 0x64
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e0fd      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001218:	4b81      	ldr	r3, [pc, #516]	; (8001420 <HAL_RCC_OscConfig+0x4f8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d106      	bne.n	800123a <HAL_RCC_OscConfig+0x312>
 800122c:	4b7b      	ldr	r3, [pc, #492]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	4a7a      	ldr	r2, [pc, #488]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6213      	str	r3, [r2, #32]
 8001238:	e02d      	b.n	8001296 <HAL_RCC_OscConfig+0x36e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0x334>
 8001242:	4b76      	ldr	r3, [pc, #472]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4a75      	ldr	r2, [pc, #468]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	6213      	str	r3, [r2, #32]
 800124e:	4b73      	ldr	r3, [pc, #460]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a72      	ldr	r2, [pc, #456]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	6213      	str	r3, [r2, #32]
 800125a:	e01c      	b.n	8001296 <HAL_RCC_OscConfig+0x36e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b05      	cmp	r3, #5
 8001262:	d10c      	bne.n	800127e <HAL_RCC_OscConfig+0x356>
 8001264:	4b6d      	ldr	r3, [pc, #436]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4a6c      	ldr	r2, [pc, #432]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	6213      	str	r3, [r2, #32]
 8001270:	4b6a      	ldr	r3, [pc, #424]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a69      	ldr	r2, [pc, #420]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6213      	str	r3, [r2, #32]
 800127c:	e00b      	b.n	8001296 <HAL_RCC_OscConfig+0x36e>
 800127e:	4b67      	ldr	r3, [pc, #412]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a66      	ldr	r2, [pc, #408]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	6213      	str	r3, [r2, #32]
 800128a:	4b64      	ldr	r3, [pc, #400]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a63      	ldr	r2, [pc, #396]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001290:	f023 0304 	bic.w	r3, r3, #4
 8001294:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d015      	beq.n	80012ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129e:	f7ff fb6f 	bl	8000980 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a4:	e00a      	b.n	80012bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7ff fb6b 	bl	8000980 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e0ab      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012bc:	4b57      	ldr	r3, [pc, #348]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0ee      	beq.n	80012a6 <HAL_RCC_OscConfig+0x37e>
 80012c8:	e014      	b.n	80012f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fb59 	bl	8000980 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d0:	e00a      	b.n	80012e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d2:	f7ff fb55 	bl	8000980 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e095      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e8:	4b4c      	ldr	r3, [pc, #304]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1ee      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d105      	bne.n	8001306 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012fa:	4b48      	ldr	r3, [pc, #288]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a47      	ldr	r2, [pc, #284]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8081 	beq.w	8001412 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001310:	4b42      	ldr	r3, [pc, #264]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b08      	cmp	r3, #8
 800131a:	d061      	beq.n	80013e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d146      	bne.n	80013b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001324:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <HAL_RCC_OscConfig+0x4fc>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fb29 	bl	8000980 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001332:	f7ff fb25 	bl	8000980 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e067      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001344:	4b35      	ldr	r3, [pc, #212]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f0      	bne.n	8001332 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d108      	bne.n	800136c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	492d      	ldr	r1, [pc, #180]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a19      	ldr	r1, [r3, #32]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	430b      	orrs	r3, r1
 800137e:	4927      	ldr	r1, [pc, #156]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_RCC_OscConfig+0x4fc>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff faf9 	bl	8000980 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001392:	f7ff faf5 	bl	8000980 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e037      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x46a>
 80013b0:	e02f      	b.n	8001412 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HAL_RCC_OscConfig+0x4fc>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fae2 	bl	8000980 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c0:	f7ff fade 	bl	8000980 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e020      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x498>
 80013de:	e018      	b.n	8001412 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e013      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140a:	429a      	cmp	r2, r3
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	40007000 	.word	0x40007000
 8001424:	42420060 	.word	0x42420060

08001428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0d0      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800143c:	4b6a      	ldr	r3, [pc, #424]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d910      	bls.n	800146c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144a:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 0207 	bic.w	r2, r3, #7
 8001452:	4965      	ldr	r1, [pc, #404]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145a:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d001      	beq.n	800146c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0b8      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d020      	beq.n	80014ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001484:	4b59      	ldr	r3, [pc, #356]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a58      	ldr	r2, [pc, #352]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800148e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800149c:	4b53      	ldr	r3, [pc, #332]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a52      	ldr	r2, [pc, #328]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a8:	4b50      	ldr	r3, [pc, #320]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	494d      	ldr	r1, [pc, #308]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d040      	beq.n	8001548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b47      	ldr	r3, [pc, #284]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d115      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e07f      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e6:	4b41      	ldr	r3, [pc, #260]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e073      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e06b      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f023 0203 	bic.w	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4936      	ldr	r1, [pc, #216]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001518:	f7ff fa32 	bl	8000980 <HAL_GetTick>
 800151c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	e00a      	b.n	8001536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001520:	f7ff fa2e 	bl	8000980 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f241 3288 	movw	r2, #5000	; 0x1388
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e053      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 020c 	and.w	r2, r3, #12
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	429a      	cmp	r2, r3
 8001546:	d1eb      	bne.n	8001520 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d210      	bcs.n	8001578 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 0207 	bic.w	r2, r3, #7
 800155e:	4922      	ldr	r1, [pc, #136]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e032      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4916      	ldr	r1, [pc, #88]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	490e      	ldr	r1, [pc, #56]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015b6:	f000 f821 	bl	80015fc <HAL_RCC_GetSysClockFreq>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	490a      	ldr	r1, [pc, #40]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80015c8:	5ccb      	ldrb	r3, [r1, r3]
 80015ca:	fa22 f303 	lsr.w	r3, r2, r3
 80015ce:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <HAL_RCC_ClockConfig+0x1cc>)
 80015d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_RCC_ClockConfig+0x1d0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f8d0 	bl	800077c <HAL_InitTick>

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40022000 	.word	0x40022000
 80015ec:	40021000 	.word	0x40021000
 80015f0:	08005284 	.word	0x08005284
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015fc:	b490      	push	{r4, r7}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001604:	1d3c      	adds	r4, r7, #4
 8001606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800160c:	f240 2301 	movw	r3, #513	; 0x201
 8001610:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b04      	cmp	r3, #4
 8001634:	d002      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0x40>
 8001636:	2b08      	cmp	r3, #8
 8001638:	d003      	beq.n	8001642 <HAL_RCC_GetSysClockFreq+0x46>
 800163a:	e02d      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800163e:	623b      	str	r3, [r7, #32]
      break;
 8001640:	e02d      	b.n	800169e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	0c9b      	lsrs	r3, r3, #18
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800164e:	4413      	add	r3, r2
 8001650:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001654:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	0c5b      	lsrs	r3, r3, #17
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800166e:	4413      	add	r3, r2
 8001670:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001674:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800167a:	fb02 f203 	mul.w	r2, r2, r3
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	fbb2 f3f3 	udiv	r3, r2, r3
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
 8001686:	e004      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800168c:	fb02 f303 	mul.w	r3, r2, r3
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	623b      	str	r3, [r7, #32]
      break;
 8001696:	e002      	b.n	800169e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800169a:	623b      	str	r3, [r7, #32]
      break;
 800169c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800169e:	6a3b      	ldr	r3, [r7, #32]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc90      	pop	{r4, r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	0800526c 	.word	0x0800526c
 80016b0:	40021000 	.word	0x40021000
 80016b4:	007a1200 	.word	0x007a1200
 80016b8:	003d0900 	.word	0x003d0900

080016bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <HAL_RCC_GetHCLKFreq+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000000 	.word	0x20000000

080016d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016d4:	f7ff fff2 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	4903      	ldr	r1, [pc, #12]	; (80016f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	08005294 	.word	0x08005294

080016f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016fc:	f7ff ffde 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 8001700:	4602      	mov	r2, r0
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	0adb      	lsrs	r3, r3, #11
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	4903      	ldr	r1, [pc, #12]	; (800171c <HAL_RCC_GetPCLK2Freq+0x24>)
 800170e:	5ccb      	ldrb	r3, [r1, r3]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000
 800171c:	08005294 	.word	0x08005294

08001720 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	220f      	movs	r2, #15
 800172e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_RCC_GetClockConfig+0x58>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_RCC_GetClockConfig+0x58>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_GetClockConfig+0x58>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_RCC_GetClockConfig+0x58>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	08db      	lsrs	r3, r3, #3
 800175a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_RCC_GetClockConfig+0x5c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0207 	and.w	r2, r3, #7
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40021000 	.word	0x40021000
 800177c:	40022000 	.word	0x40022000

08001780 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <RCC_Delay+0x34>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <RCC_Delay+0x38>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0a5b      	lsrs	r3, r3, #9
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	fb02 f303 	mul.w	r3, r2, r3
 800179a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800179c:	bf00      	nop
  }
  while (Delay --);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	60fa      	str	r2, [r7, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f9      	bne.n	800179c <RCC_Delay+0x1c>
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	20000000 	.word	0x20000000
 80017b8:	10624dd3 	.word	0x10624dd3

080017bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e041      	b.n	8001852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d106      	bne.n	80017e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f839 	bl	800185a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3304      	adds	r3, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f000 f9c2 	bl	8001b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d001      	beq.n	8001884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e044      	b.n	800190e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1d      	ldr	r2, [pc, #116]	; (8001918 <HAL_TIM_Base_Start_IT+0xac>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d018      	beq.n	80018d8 <HAL_TIM_Base_Start_IT+0x6c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a1c      	ldr	r2, [pc, #112]	; (800191c <HAL_TIM_Base_Start_IT+0xb0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d013      	beq.n	80018d8 <HAL_TIM_Base_Start_IT+0x6c>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b8:	d00e      	beq.n	80018d8 <HAL_TIM_Base_Start_IT+0x6c>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a18      	ldr	r2, [pc, #96]	; (8001920 <HAL_TIM_Base_Start_IT+0xb4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d009      	beq.n	80018d8 <HAL_TIM_Base_Start_IT+0x6c>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a16      	ldr	r2, [pc, #88]	; (8001924 <HAL_TIM_Base_Start_IT+0xb8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d004      	beq.n	80018d8 <HAL_TIM_Base_Start_IT+0x6c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a15      	ldr	r2, [pc, #84]	; (8001928 <HAL_TIM_Base_Start_IT+0xbc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d111      	bne.n	80018fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d010      	beq.n	800190c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0201 	orr.w	r2, r2, #1
 80018f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018fa:	e007      	b.n	800190c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	40012c00 	.word	0x40012c00
 800191c:	40013400 	.word	0x40013400
 8001920:	40000400 	.word	0x40000400
 8001924:	40000800 	.word	0x40000800
 8001928:	40000c00 	.word	0x40000c00

0800192c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b02      	cmp	r3, #2
 8001940:	d122      	bne.n	8001988 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b02      	cmp	r3, #2
 800194e:	d11b      	bne.n	8001988 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f06f 0202 	mvn.w	r2, #2
 8001958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f8ed 	bl	8001b4e <HAL_TIM_IC_CaptureCallback>
 8001974:	e005      	b.n	8001982 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f8e0 	bl	8001b3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f8ef 	bl	8001b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	2b04      	cmp	r3, #4
 8001994:	d122      	bne.n	80019dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d11b      	bne.n	80019dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f06f 0204 	mvn.w	r2, #4
 80019ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2202      	movs	r2, #2
 80019b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f8c3 	bl	8001b4e <HAL_TIM_IC_CaptureCallback>
 80019c8:	e005      	b.n	80019d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f8b6 	bl	8001b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f8c5 	bl	8001b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d122      	bne.n	8001a30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d11b      	bne.n	8001a30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0208 	mvn.w	r2, #8
 8001a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2204      	movs	r2, #4
 8001a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f899 	bl	8001b4e <HAL_TIM_IC_CaptureCallback>
 8001a1c:	e005      	b.n	8001a2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f88c 	bl	8001b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f89b 	bl	8001b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b10      	cmp	r3, #16
 8001a3c:	d122      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	2b10      	cmp	r3, #16
 8001a4a:	d11b      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 0210 	mvn.w	r2, #16
 8001a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2208      	movs	r2, #8
 8001a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f86f 	bl	8001b4e <HAL_TIM_IC_CaptureCallback>
 8001a70:	e005      	b.n	8001a7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f862 	bl	8001b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f871 	bl	8001b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d10e      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d107      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0201 	mvn.w	r2, #1
 8001aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fdca 	bl	8000644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aba:	2b80      	cmp	r3, #128	; 0x80
 8001abc:	d10e      	bne.n	8001adc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac8:	2b80      	cmp	r3, #128	; 0x80
 8001aca:	d107      	bne.n	8001adc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f8d7 	bl	8001c8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae6:	2b40      	cmp	r3, #64	; 0x40
 8001ae8:	d10e      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af4:	2b40      	cmp	r3, #64	; 0x40
 8001af6:	d107      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f835 	bl	8001b72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	d10e      	bne.n	8001b34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0320 	and.w	r3, r3, #32
 8001b20:	2b20      	cmp	r3, #32
 8001b22:	d107      	bne.n	8001b34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0220 	mvn.w	r2, #32
 8001b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f8a2 	bl	8001c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a33      	ldr	r2, [pc, #204]	; (8001c64 <TIM_Base_SetConfig+0xe0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d013      	beq.n	8001bc4 <TIM_Base_SetConfig+0x40>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <TIM_Base_SetConfig+0xe4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d00f      	beq.n	8001bc4 <TIM_Base_SetConfig+0x40>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001baa:	d00b      	beq.n	8001bc4 <TIM_Base_SetConfig+0x40>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a2f      	ldr	r2, [pc, #188]	; (8001c6c <TIM_Base_SetConfig+0xe8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d007      	beq.n	8001bc4 <TIM_Base_SetConfig+0x40>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a2e      	ldr	r2, [pc, #184]	; (8001c70 <TIM_Base_SetConfig+0xec>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d003      	beq.n	8001bc4 <TIM_Base_SetConfig+0x40>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a2d      	ldr	r2, [pc, #180]	; (8001c74 <TIM_Base_SetConfig+0xf0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d108      	bne.n	8001bd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a22      	ldr	r2, [pc, #136]	; (8001c64 <TIM_Base_SetConfig+0xe0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d013      	beq.n	8001c06 <TIM_Base_SetConfig+0x82>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a21      	ldr	r2, [pc, #132]	; (8001c68 <TIM_Base_SetConfig+0xe4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00f      	beq.n	8001c06 <TIM_Base_SetConfig+0x82>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d00b      	beq.n	8001c06 <TIM_Base_SetConfig+0x82>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <TIM_Base_SetConfig+0xe8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <TIM_Base_SetConfig+0x82>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <TIM_Base_SetConfig+0xec>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d003      	beq.n	8001c06 <TIM_Base_SetConfig+0x82>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <TIM_Base_SetConfig+0xf0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d108      	bne.n	8001c18 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <TIM_Base_SetConfig+0xe0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d003      	beq.n	8001c4c <TIM_Base_SetConfig+0xc8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <TIM_Base_SetConfig+0xe4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d103      	bne.n	8001c54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	615a      	str	r2, [r3, #20]
}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40012c00 	.word	0x40012c00
 8001c68:	40013400 	.word	0x40013400
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40000800 	.word	0x40000800
 8001c74:	40000c00 	.word	0x40000c00

08001c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e03f      	b.n	8001d2e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d106      	bne.n	8001cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe fd0e 	bl	80006e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2224      	movs	r2, #36	; 0x24
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f905 	bl	8001ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b08a      	sub	sp, #40	; 0x28
 8001d3a:	af02      	add	r7, sp, #8
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	4613      	mov	r3, r2
 8001d44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d17c      	bne.n	8001e50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <HAL_UART_Transmit+0x2c>
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e075      	b.n	8001e52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_UART_Transmit+0x3e>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e06e      	b.n	8001e52 <HAL_UART_Transmit+0x11c>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2221      	movs	r2, #33	; 0x21
 8001d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d8a:	f7fe fdf9 	bl	8000980 <HAL_GetTick>
 8001d8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	88fa      	ldrh	r2, [r7, #6]
 8001d9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da4:	d108      	bne.n	8001db8 <HAL_UART_Transmit+0x82>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d104      	bne.n	8001db8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	e003      	b.n	8001dc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001dc8:	e02a      	b.n	8001e20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2180      	movs	r1, #128	; 0x80
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f840 	bl	8001e5a <UART_WaitOnFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e036      	b.n	8001e52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10b      	bne.n	8001e02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001df8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	e007      	b.n	8001e12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1cf      	bne.n	8001dca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2200      	movs	r2, #0
 8001e32:	2140      	movs	r1, #64	; 0x40
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f810 	bl	8001e5a <UART_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e006      	b.n	8001e52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e000      	b.n	8001e52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e50:	2302      	movs	r3, #2
  }
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3720      	adds	r7, #32
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	4613      	mov	r3, r2
 8001e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e6a:	e02c      	b.n	8001ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e72:	d028      	beq.n	8001ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <UART_WaitOnFlagUntilTimeout+0x30>
 8001e7a:	f7fe fd81 	bl	8000980 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d21d      	bcs.n	8001ec6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0201 	bic.w	r2, r2, #1
 8001ea8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e00f      	b.n	8001ee6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	bf0c      	ite	eq
 8001ed6:	2301      	moveq	r3, #1
 8001ed8:	2300      	movne	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d0c3      	beq.n	8001e6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f2a:	f023 030c 	bic.w	r3, r3, #12
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	68b9      	ldr	r1, [r7, #8]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a2c      	ldr	r2, [pc, #176]	; (8002004 <UART_SetConfig+0x114>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d103      	bne.n	8001f60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f58:	f7ff fbce 	bl	80016f8 <HAL_RCC_GetPCLK2Freq>
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	e002      	b.n	8001f66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f60:	f7ff fbb6 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 8001f64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009a      	lsls	r2, r3, #2
 8001f70:	441a      	add	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7c:	4a22      	ldr	r2, [pc, #136]	; (8002008 <UART_SetConfig+0x118>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	0119      	lsls	r1, r3, #4
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009a      	lsls	r2, r3, #2
 8001f90:	441a      	add	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <UART_SetConfig+0x118>)
 8001f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2064      	movs	r0, #100	; 0x64
 8001fa6:	fb00 f303 	mul.w	r3, r0, r3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	3332      	adds	r3, #50	; 0x32
 8001fb0:	4a15      	ldr	r2, [pc, #84]	; (8002008 <UART_SetConfig+0x118>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fbc:	4419      	add	r1, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009a      	lsls	r2, r3, #2
 8001fc8:	441a      	add	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <UART_SetConfig+0x118>)
 8001fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2064      	movs	r0, #100	; 0x64
 8001fde:	fb00 f303 	mul.w	r3, r0, r3
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	3332      	adds	r3, #50	; 0x32
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <UART_SetConfig+0x118>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	f003 020f 	and.w	r2, r3, #15
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	440a      	add	r2, r1
 8001ffa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ffc:	bf00      	nop
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40013800 	.word	0x40013800
 8002008:	51eb851f 	.word	0x51eb851f

0800200c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800201a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800201e:	2b84      	cmp	r3, #132	; 0x84
 8002020:	d005      	beq.n	800202e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002022:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4413      	add	r3, r2
 800202a:	3303      	adds	r3, #3
 800202c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800202e:	68fb      	ldr	r3, [r7, #12]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002040:	f3ef 8305 	mrs	r3, IPSR
 8002044:	607b      	str	r3, [r7, #4]
  return(result);
 8002046:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002060:	f001 f990 	bl	8003384 <vTaskStartScheduler>
  
  return osOK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}

0800206a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800206a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206c:	b089      	sub	sp, #36	; 0x24
 800206e:	af04      	add	r7, sp, #16
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <osThreadCreate+0x54>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01c      	beq.n	80020be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685c      	ldr	r4, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681d      	ldr	r5, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691e      	ldr	r6, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ffb8 	bl	800200c <makeFreeRtosPriority>
 800209c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020a6:	9202      	str	r2, [sp, #8]
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	9100      	str	r1, [sp, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4632      	mov	r2, r6
 80020b0:	4629      	mov	r1, r5
 80020b2:	4620      	mov	r0, r4
 80020b4:	f000 ff91 	bl	8002fda <xTaskCreateStatic>
 80020b8:	4603      	mov	r3, r0
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	e01c      	b.n	80020f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685c      	ldr	r4, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020ca:	b29e      	uxth	r6, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff9a 	bl	800200c <makeFreeRtosPriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f107 030c 	add.w	r3, r7, #12
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	9200      	str	r2, [sp, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	4632      	mov	r2, r6
 80020e6:	4629      	mov	r1, r5
 80020e8:	4620      	mov	r0, r4
 80020ea:	f000 ffd2 	bl	8003092 <xTaskCreate>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d001      	beq.n	80020f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e000      	b.n	80020fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80020f8:	68fb      	ldr	r3, [r7, #12]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002102 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <osDelay+0x16>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	e000      	b.n	800211a <osDelay+0x18>
 8002118:	2301      	movs	r3, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f001 f8fe 	bl	800331c <vTaskDelay>
  
  return osOK;
 8002120:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af02      	add	r7, sp, #8
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d016      	beq.n	800216a <osSemaphoreCreate+0x40>
    if (count == 1) {
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10a      	bne.n	8002158 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2203      	movs	r2, #3
 8002148:	9200      	str	r2, [sp, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	2001      	movs	r0, #1
 8002150:	f000 f9c6 	bl	80024e0 <xQueueGenericCreateStatic>
 8002154:	4603      	mov	r3, r0
 8002156:	e023      	b.n	80021a0 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8002158:	6838      	ldr	r0, [r7, #0]
 800215a:	6839      	ldr	r1, [r7, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	461a      	mov	r2, r3
 8002162:	f000 fa91 	bl	8002688 <xQueueCreateCountingSemaphoreStatic>
 8002166:	4603      	mov	r3, r0
 8002168:	e01a      	b.n	80021a0 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d110      	bne.n	8002192 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8002170:	2203      	movs	r2, #3
 8002172:	2100      	movs	r1, #0
 8002174:	2001      	movs	r0, #1
 8002176:	f000 fa2a 	bl	80025ce <xQueueGenericCreate>
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <osSemaphoreCreate+0x64>
 8002182:	2300      	movs	r3, #0
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 fae7 	bl	800275c <xQueueGenericSend>
      return sema;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	e006      	b.n	80021a0 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f000 faac 	bl	80026f6 <xQueueCreateCountingSemaphore>
 800219e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	e03a      	b.n	8002236 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ca:	d103      	bne.n	80021d4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	e009      	b.n	80021e8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <osSemaphoreWait+0x40>
      ticks = 1;
 80021e4:	2301      	movs	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80021e8:	f7ff ff27 	bl	800203a <inHandlerMode>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d017      	beq.n	8002222 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	461a      	mov	r2, r3
 80021f8:	2100      	movs	r1, #0
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fd46 	bl	8002c8c <xQueueReceiveFromISR>
 8002200:	4603      	mov	r3, r0
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <osSemaphoreWait+0x62>
      return osErrorOS;
 8002206:	23ff      	movs	r3, #255	; 0xff
 8002208:	e015      	b.n	8002236 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d011      	beq.n	8002234 <osSemaphoreWait+0x8c>
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <osSemaphoreWait+0x98>)
 8002212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	f3bf 8f6f 	isb	sy
 8002220:	e008      	b.n	8002234 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002222:	68f9      	ldr	r1, [r7, #12]
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fc25 	bl	8002a74 <xQueueSemaphoreTake>
 800222a:	4603      	mov	r3, r0
 800222c:	2b01      	cmp	r3, #1
 800222e:	d001      	beq.n	8002234 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002230:	23ff      	movs	r3, #255	; 0xff
 8002232:	e000      	b.n	8002236 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	e000ed04 	.word	0xe000ed04

08002244 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002254:	f7ff fef1 	bl	800203a <inHandlerMode>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800225e:	f107 0308 	add.w	r3, r7, #8
 8002262:	4619      	mov	r1, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 fb77 	bl	8002958 <xQueueGiveFromISR>
 800226a:	4603      	mov	r3, r0
 800226c:	2b01      	cmp	r3, #1
 800226e:	d001      	beq.n	8002274 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002270:	23ff      	movs	r3, #255	; 0xff
 8002272:	e017      	b.n	80022a4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d013      	beq.n	80022a2 <osSemaphoreRelease+0x5e>
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <osSemaphoreRelease+0x68>)
 800227c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	f3bf 8f6f 	isb	sy
 800228a:	e00a      	b.n	80022a2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800228c:	2300      	movs	r3, #0
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fa62 	bl	800275c <xQueueGenericSend>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800229e:	23ff      	movs	r3, #255	; 0xff
 80022a0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	e000ed04 	.word	0xe000ed04

080022b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f103 0208 	add.w	r2, r3, #8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f04f 32ff 	mov.w	r2, #4294967295
 80022c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f103 0208 	add.w	r2, r3, #8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f103 0208 	add.w	r2, r3, #8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	601a      	str	r2, [r3, #0]
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002362:	d103      	bne.n	800236c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	e00c      	b.n	8002386 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3308      	adds	r3, #8
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	e002      	b.n	800237a <vListInsert+0x2e>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	429a      	cmp	r2, r3
 8002384:	d2f6      	bcs.n	8002374 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	601a      	str	r2, [r3, #0]
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6892      	ldr	r2, [r2, #8]
 80023d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6852      	ldr	r2, [r2, #4]
 80023dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d103      	bne.n	80023f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1e5a      	subs	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
	...

08002410 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10a      	bne.n	800243a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002436:	bf00      	nop
 8002438:	e7fe      	b.n	8002438 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800243a:	f001 fef7 	bl	800422c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	68f9      	ldr	r1, [r7, #12]
 8002448:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	441a      	add	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	3b01      	subs	r3, #1
 800246c:	68f9      	ldr	r1, [r7, #12]
 800246e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	441a      	add	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	22ff      	movs	r2, #255	; 0xff
 800247e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	22ff      	movs	r2, #255	; 0xff
 8002486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d114      	bne.n	80024ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01a      	beq.n	80024ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3310      	adds	r3, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f001 f9c9 	bl	8003834 <xTaskRemoveFromEventList>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d012      	beq.n	80024ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <xQueueGenericReset+0xcc>)
 80024aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	e009      	b.n	80024ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3310      	adds	r3, #16
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fef6 	bl	80022b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3324      	adds	r3, #36	; 0x24
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fef1 	bl	80022b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80024ce:	f001 fedd 	bl	800428c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80024d2:	2301      	movs	r3, #1
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	e000ed04 	.word	0xe000ed04

080024e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08e      	sub	sp, #56	; 0x38
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80024f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002506:	bf00      	nop
 8002508:	e7fe      	b.n	8002508 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002522:	bf00      	nop
 8002524:	e7fe      	b.n	8002524 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <xQueueGenericCreateStatic+0x52>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <xQueueGenericCreateStatic+0x56>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <xQueueGenericCreateStatic+0x58>
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	623b      	str	r3, [r7, #32]
}
 800254e:	bf00      	nop
 8002550:	e7fe      	b.n	8002550 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <xQueueGenericCreateStatic+0x7e>
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <xQueueGenericCreateStatic+0x82>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <xQueueGenericCreateStatic+0x84>
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10a      	bne.n	800257e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	61fb      	str	r3, [r7, #28]
}
 800257a:	bf00      	nop
 800257c:	e7fe      	b.n	800257c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800257e:	2348      	movs	r3, #72	; 0x48
 8002580:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b48      	cmp	r3, #72	; 0x48
 8002586:	d00a      	beq.n	800259e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	61bb      	str	r3, [r7, #24]
}
 800259a:	bf00      	nop
 800259c:	e7fe      	b.n	800259c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00d      	beq.n	80025c4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80025b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f843 	bl	800264a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3730      	adds	r7, #48	; 0x30
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b08a      	sub	sp, #40	; 0x28
 80025d2:	af02      	add	r7, sp, #8
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	4613      	mov	r3, r2
 80025da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10a      	bne.n	80025f8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80025e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e6:	f383 8811 	msr	BASEPRI, r3
 80025ea:	f3bf 8f6f 	isb	sy
 80025ee:	f3bf 8f4f 	dsb	sy
 80025f2:	613b      	str	r3, [r7, #16]
}
 80025f4:	bf00      	nop
 80025f6:	e7fe      	b.n	80025f6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	e004      	b.n	800260e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3348      	adds	r3, #72	; 0x48
 8002612:	4618      	mov	r0, r3
 8002614:	f001 ff0a 	bl	800442c <pvPortMalloc>
 8002618:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00f      	beq.n	8002640 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	3348      	adds	r3, #72	; 0x48
 8002624:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800262e:	79fa      	ldrb	r2, [r7, #7]
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f805 	bl	800264a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002640:	69bb      	ldr	r3, [r7, #24]
	}
 8002642:	4618      	mov	r0, r3
 8002644:	3720      	adds	r7, #32
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e002      	b.n	800266c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002678:	2101      	movs	r1, #1
 800267a:	69b8      	ldr	r0, [r7, #24]
 800267c:	f7ff fec8 	bl	8002410 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10a      	bne.n	80026b0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800269a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269e:	f383 8811 	msr	BASEPRI, r3
 80026a2:	f3bf 8f6f 	isb	sy
 80026a6:	f3bf 8f4f 	dsb	sy
 80026aa:	61bb      	str	r3, [r7, #24]
}
 80026ac:	bf00      	nop
 80026ae:	e7fe      	b.n	80026ae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d90a      	bls.n	80026ce <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80026b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	617b      	str	r3, [r7, #20]
}
 80026ca:	bf00      	nop
 80026cc:	e7fe      	b.n	80026cc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80026ce:	2302      	movs	r3, #2
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	2100      	movs	r1, #0
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff ff01 	bl	80024e0 <xQueueGenericCreateStatic>
 80026de:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80026ec:	69fb      	ldr	r3, [r7, #28]
	}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10a      	bne.n	800271c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	613b      	str	r3, [r7, #16]
}
 8002718:	bf00      	nop
 800271a:	e7fe      	b.n	800271a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	429a      	cmp	r2, r3
 8002722:	d90a      	bls.n	800273a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	60fb      	str	r3, [r7, #12]
}
 8002736:	bf00      	nop
 8002738:	e7fe      	b.n	8002738 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800273a:	2202      	movs	r2, #2
 800273c:	2100      	movs	r1, #0
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ff45 	bl	80025ce <xQueueGenericCreate>
 8002744:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002752:	697b      	ldr	r3, [r7, #20]
	}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08e      	sub	sp, #56	; 0x38
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800276a:	2300      	movs	r3, #0
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <xQueueGenericSend+0x32>
	__asm volatile
 8002778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800278a:	bf00      	nop
 800278c:	e7fe      	b.n	800278c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d103      	bne.n	800279c <xQueueGenericSend+0x40>
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <xQueueGenericSend+0x44>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <xQueueGenericSend+0x46>
 80027a0:	2300      	movs	r3, #0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <xQueueGenericSend+0x60>
	__asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027b8:	bf00      	nop
 80027ba:	e7fe      	b.n	80027ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d103      	bne.n	80027ca <xQueueGenericSend+0x6e>
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <xQueueGenericSend+0x72>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <xQueueGenericSend+0x74>
 80027ce:	2300      	movs	r3, #0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <xQueueGenericSend+0x8e>
	__asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	623b      	str	r3, [r7, #32]
}
 80027e6:	bf00      	nop
 80027e8:	e7fe      	b.n	80027e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027ea:	f001 f9e7 	bl	8003bbc <xTaskGetSchedulerState>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <xQueueGenericSend+0x9e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <xQueueGenericSend+0xa2>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <xQueueGenericSend+0xa4>
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <xQueueGenericSend+0xbe>
	__asm volatile
 8002804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	61fb      	str	r3, [r7, #28]
}
 8002816:	bf00      	nop
 8002818:	e7fe      	b.n	8002818 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800281a:	f001 fd07 	bl	800422c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	429a      	cmp	r2, r3
 8002828:	d302      	bcc.n	8002830 <xQueueGenericSend+0xd4>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d129      	bne.n	8002884 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002836:	f000 fac0 	bl	8002dba <prvCopyDataToQueue>
 800283a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	3324      	adds	r3, #36	; 0x24
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fff3 	bl	8003834 <xTaskRemoveFromEventList>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002854:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <xQueueGenericSend+0x1f8>)
 8002856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	e00a      	b.n	800287c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800286c:	4b39      	ldr	r3, [pc, #228]	; (8002954 <xQueueGenericSend+0x1f8>)
 800286e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800287c:	f001 fd06 	bl	800428c <vPortExitCritical>
				return pdPASS;
 8002880:	2301      	movs	r3, #1
 8002882:	e063      	b.n	800294c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800288a:	f001 fcff 	bl	800428c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800288e:	2300      	movs	r3, #0
 8002890:	e05c      	b.n	800294c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002894:	2b00      	cmp	r3, #0
 8002896:	d106      	bne.n	80028a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	4618      	mov	r0, r3
 800289e:	f001 f82b 	bl	80038f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028a6:	f001 fcf1 	bl	800428c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028aa:	f000 fdd5 	bl	8003458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028ae:	f001 fcbd 	bl	800422c <vPortEnterCritical>
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028b8:	b25b      	sxtb	r3, r3
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028be:	d103      	bne.n	80028c8 <xQueueGenericSend+0x16c>
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ce:	b25b      	sxtb	r3, r3
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d103      	bne.n	80028de <xQueueGenericSend+0x182>
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028de:	f001 fcd5 	bl	800428c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028e2:	1d3a      	adds	r2, r7, #4
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 f81a 	bl	8003924 <xTaskCheckForTimeOut>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d124      	bne.n	8002940 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028f8:	f000 fb57 	bl	8002faa <prvIsQueueFull>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d018      	beq.n	8002934 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	3310      	adds	r3, #16
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f000 ff6e 	bl	80037ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002912:	f000 fae2 	bl	8002eda <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002916:	f000 fdad 	bl	8003474 <xTaskResumeAll>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	f47f af7c 	bne.w	800281a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <xQueueGenericSend+0x1f8>)
 8002924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	e772      	b.n	800281a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002936:	f000 fad0 	bl	8002eda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800293a:	f000 fd9b 	bl	8003474 <xTaskResumeAll>
 800293e:	e76c      	b.n	800281a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002942:	f000 faca 	bl	8002eda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002946:	f000 fd95 	bl	8003474 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800294a:	2300      	movs	r3, #0
		}
	}
}
 800294c:	4618      	mov	r0, r3
 800294e:	3738      	adds	r7, #56	; 0x38
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	e000ed04 	.word	0xe000ed04

08002958 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	; 0x38
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	623b      	str	r3, [r7, #32]
}
 800297e:	bf00      	nop
 8002980:	e7fe      	b.n	8002980 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	61fb      	str	r3, [r7, #28]
}
 800299c:	bf00      	nop
 800299e:	e7fe      	b.n	800299e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d103      	bne.n	80029b0 <xQueueGiveFromISR+0x58>
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <xQueueGiveFromISR+0x5c>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <xQueueGiveFromISR+0x5e>
 80029b4:	2300      	movs	r3, #0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10a      	bne.n	80029d0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80029ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	61bb      	str	r3, [r7, #24]
}
 80029cc:	bf00      	nop
 80029ce:	e7fe      	b.n	80029ce <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029d0:	f001 fcee 	bl	80043b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80029d4:	f3ef 8211 	mrs	r2, BASEPRI
 80029d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	617a      	str	r2, [r7, #20]
 80029ea:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80029ec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d22b      	bcs.n	8002a58 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1a:	d112      	bne.n	8002a42 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d016      	beq.n	8002a52 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	3324      	adds	r3, #36	; 0x24
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 ff03 	bl	8003834 <xTaskRemoveFromEventList>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00e      	beq.n	8002a52 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e007      	b.n	8002a52 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a46:	3301      	adds	r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	b25a      	sxtb	r2, r3
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a52:	2301      	movs	r3, #1
 8002a54:	637b      	str	r3, [r7, #52]	; 0x34
 8002a56:	e001      	b.n	8002a5c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3738      	adds	r7, #56	; 0x38
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08e      	sub	sp, #56	; 0x38
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	623b      	str	r3, [r7, #32]
}
 8002aa2:	bf00      	nop
 8002aa4:	e7fe      	b.n	8002aa4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	61fb      	str	r3, [r7, #28]
}
 8002ac0:	bf00      	nop
 8002ac2:	e7fe      	b.n	8002ac2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ac4:	f001 f87a 	bl	8003bbc <xTaskGetSchedulerState>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <xQueueSemaphoreTake+0x60>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <xQueueSemaphoreTake+0x64>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <xQueueSemaphoreTake+0x66>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	61bb      	str	r3, [r7, #24]
}
 8002af0:	bf00      	nop
 8002af2:	e7fe      	b.n	8002af2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002af4:	f001 fb9a 	bl	800422c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d024      	beq.n	8002b4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	1e5a      	subs	r2, r3, #1
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002b14:	f001 fa1c 	bl	8003f50 <pvTaskIncrementMutexHeldCount>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00f      	beq.n	8002b46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	3310      	adds	r3, #16
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fe82 	bl	8003834 <xTaskRemoveFromEventList>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b36:	4b54      	ldr	r3, [pc, #336]	; (8002c88 <xQueueSemaphoreTake+0x214>)
 8002b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b46:	f001 fba1 	bl	800428c <vPortExitCritical>
				return pdPASS;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e097      	b.n	8002c7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d111      	bne.n	8002b78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	617b      	str	r3, [r7, #20]
}
 8002b6c:	bf00      	nop
 8002b6e:	e7fe      	b.n	8002b6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002b70:	f001 fb8c 	bl	800428c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e082      	b.n	8002c7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 feb8 	bl	80038f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b8c:	f001 fb7e 	bl	800428c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b90:	f000 fc62 	bl	8003458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b94:	f001 fb4a 	bl	800422c <vPortEnterCritical>
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d103      	bne.n	8002bae <xQueueSemaphoreTake+0x13a>
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bba:	d103      	bne.n	8002bc4 <xQueueSemaphoreTake+0x150>
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bc4:	f001 fb62 	bl	800428c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bc8:	463a      	mov	r2, r7
 8002bca:	f107 030c 	add.w	r3, r7, #12
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fea7 	bl	8003924 <xTaskCheckForTimeOut>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d132      	bne.n	8002c42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bde:	f000 f9ce 	bl	8002f7e <prvIsQueueEmpty>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d026      	beq.n	8002c36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002bf0:	f001 fb1c 	bl	800422c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fffd 	bl	8003bf8 <xTaskPriorityInherit>
 8002bfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002c00:	f001 fb44 	bl	800428c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c06:	3324      	adds	r3, #36	; 0x24
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fded 	bl	80037ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c14:	f000 f961 	bl	8002eda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c18:	f000 fc2c 	bl	8003474 <xTaskResumeAll>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f47f af68 	bne.w	8002af4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002c24:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <xQueueSemaphoreTake+0x214>)
 8002c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	e75e      	b.n	8002af4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002c36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c38:	f000 f94f 	bl	8002eda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c3c:	f000 fc1a 	bl	8003474 <xTaskResumeAll>
 8002c40:	e758      	b.n	8002af4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002c42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c44:	f000 f949 	bl	8002eda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c48:	f000 fc14 	bl	8003474 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c4e:	f000 f996 	bl	8002f7e <prvIsQueueEmpty>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f43f af4d 	beq.w	8002af4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002c60:	f001 fae4 	bl	800422c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002c64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c66:	f000 f891 	bl	8002d8c <prvGetDisinheritPriorityAfterTimeout>
 8002c6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 f8cc 	bl	8003e10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002c78:	f001 fb08 	bl	800428c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3738      	adds	r7, #56	; 0x38
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000ed04 	.word	0xe000ed04

08002c8c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08e      	sub	sp, #56	; 0x38
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10a      	bne.n	8002cb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	623b      	str	r3, [r7, #32]
}
 8002cb4:	bf00      	nop
 8002cb6:	e7fe      	b.n	8002cb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d103      	bne.n	8002cc6 <xQueueReceiveFromISR+0x3a>
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <xQueueReceiveFromISR+0x3e>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <xQueueReceiveFromISR+0x40>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	61fb      	str	r3, [r7, #28]
}
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ce6:	f001 fb63 	bl	80043b0 <vPortValidateInterruptPriority>
	__asm volatile
 8002cea:	f3ef 8211 	mrs	r2, BASEPRI
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	61ba      	str	r2, [r7, #24]
 8002d00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002d02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02f      	beq.n	8002d72 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d20:	f000 f8b5 	bl	8002e8e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	1e5a      	subs	r2, r3, #1
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002d2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d112      	bne.n	8002d5c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d016      	beq.n	8002d6c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	3310      	adds	r3, #16
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fd76 	bl	8003834 <xTaskRemoveFromEventList>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00e      	beq.n	8002d6c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e007      	b.n	8002d6c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d60:	3301      	adds	r3, #1
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	b25a      	sxtb	r2, r3
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d70:	e001      	b.n	8002d76 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	637b      	str	r3, [r7, #52]	; 0x34
 8002d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f383 8811 	msr	BASEPRI, r3
}
 8002d80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3738      	adds	r7, #56	; 0x38
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d006      	beq.n	8002daa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f1c3 0307 	rsb	r3, r3, #7
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e001      	b.n	8002dae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002dae:	68fb      	ldr	r3, [r7, #12]
	}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10d      	bne.n	8002df4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d14d      	bne.n	8002e7c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 ff8d 	bl	8003d04 <xTaskPriorityDisinherit>
 8002dea:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	e043      	b.n	8002e7c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d119      	bne.n	8002e2e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6898      	ldr	r0, [r3, #8]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	461a      	mov	r2, r3
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	f001 fd15 	bl	8004834 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d32b      	bcc.n	8002e7c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	e026      	b.n	8002e7c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	68d8      	ldr	r0, [r3, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	461a      	mov	r2, r3
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	f001 fcfb 	bl	8004834 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	425b      	negs	r3, r3
 8002e48:	441a      	add	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d207      	bcs.n	8002e6a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	425b      	negs	r3, r3
 8002e64:	441a      	add	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d105      	bne.n	8002e7c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e84:	697b      	ldr	r3, [r7, #20]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d018      	beq.n	8002ed2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	441a      	add	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d303      	bcc.n	8002ec2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68d9      	ldr	r1, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	461a      	mov	r2, r3
 8002ecc:	6838      	ldr	r0, [r7, #0]
 8002ece:	f001 fcb1 	bl	8004834 <memcpy>
	}
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ee2:	f001 f9a3 	bl	800422c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002eee:	e011      	b.n	8002f14 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d012      	beq.n	8002f1e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3324      	adds	r3, #36	; 0x24
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fc99 	bl	8003834 <xTaskRemoveFromEventList>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f08:	f000 fd6e 	bl	80039e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	dce9      	bgt.n	8002ef0 <prvUnlockQueue+0x16>
 8002f1c:	e000      	b.n	8002f20 <prvUnlockQueue+0x46>
					break;
 8002f1e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	22ff      	movs	r2, #255	; 0xff
 8002f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f28:	f001 f9b0 	bl	800428c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f2c:	f001 f97e 	bl	800422c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f36:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f38:	e011      	b.n	8002f5e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d012      	beq.n	8002f68 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3310      	adds	r3, #16
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fc74 	bl	8003834 <xTaskRemoveFromEventList>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f52:	f000 fd49 	bl	80039e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f56:	7bbb      	ldrb	r3, [r7, #14]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	dce9      	bgt.n	8002f3a <prvUnlockQueue+0x60>
 8002f66:	e000      	b.n	8002f6a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f68:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	22ff      	movs	r2, #255	; 0xff
 8002f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f72:	f001 f98b 	bl	800428c <vPortExitCritical>
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f86:	f001 f951 	bl	800422c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d102      	bne.n	8002f98 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f92:	2301      	movs	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	e001      	b.n	8002f9c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f9c:	f001 f976 	bl	800428c <vPortExitCritical>

	return xReturn;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fb2:	f001 f93b 	bl	800422c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d102      	bne.n	8002fc8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	e001      	b.n	8002fcc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fcc:	f001 f95e 	bl	800428c <vPortExitCritical>

	return xReturn;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b08e      	sub	sp, #56	; 0x38
 8002fde:	af04      	add	r7, sp, #16
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	623b      	str	r3, [r7, #32]
}
 8003000:	bf00      	nop
 8003002:	e7fe      	b.n	8003002 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10a      	bne.n	8003020 <xTaskCreateStatic+0x46>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	61fb      	str	r3, [r7, #28]
}
 800301c:	bf00      	nop
 800301e:	e7fe      	b.n	800301e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003020:	23b4      	movs	r3, #180	; 0xb4
 8003022:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2bb4      	cmp	r3, #180	; 0xb4
 8003028:	d00a      	beq.n	8003040 <xTaskCreateStatic+0x66>
	__asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	61bb      	str	r3, [r7, #24]
}
 800303c:	bf00      	nop
 800303e:	e7fe      	b.n	800303e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01e      	beq.n	8003084 <xTaskCreateStatic+0xaa>
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01b      	beq.n	8003084 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003054:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	2202      	movs	r2, #2
 800305a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800305e:	2300      	movs	r3, #0
 8003060:	9303      	str	r3, [sp, #12]
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	9302      	str	r3, [sp, #8]
 8003066:	f107 0314 	add.w	r3, r7, #20
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f850 	bl	800311c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800307c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800307e:	f000 f8e3 	bl	8003248 <prvAddNewTaskToReadyList>
 8003082:	e001      	b.n	8003088 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003088:	697b      	ldr	r3, [r7, #20]
	}
 800308a:	4618      	mov	r0, r3
 800308c:	3728      	adds	r7, #40	; 0x28
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003092:	b580      	push	{r7, lr}
 8003094:	b08c      	sub	sp, #48	; 0x30
 8003096:	af04      	add	r7, sp, #16
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 f9c0 	bl	800442c <pvPortMalloc>
 80030ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00e      	beq.n	80030d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80030b4:	20b4      	movs	r0, #180	; 0xb4
 80030b6:	f001 f9b9 	bl	800442c <pvPortMalloc>
 80030ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
 80030c8:	e005      	b.n	80030d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030ca:	6978      	ldr	r0, [r7, #20]
 80030cc:	f001 fa72 	bl	80045b4 <vPortFree>
 80030d0:	e001      	b.n	80030d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d017      	beq.n	800310c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	2300      	movs	r3, #0
 80030e8:	9303      	str	r3, [sp, #12]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	9302      	str	r3, [sp, #8]
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f80e 	bl	800311c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003100:	69f8      	ldr	r0, [r7, #28]
 8003102:	f000 f8a1 	bl	8003248 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003106:	2301      	movs	r3, #1
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	e002      	b.n	8003112 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800310c:	f04f 33ff 	mov.w	r3, #4294967295
 8003110:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003112:	69bb      	ldr	r3, [r7, #24]
	}
 8003114:	4618      	mov	r0, r3
 8003116:	3720      	adds	r7, #32
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003134:	3b01      	subs	r3, #1
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f023 0307 	bic.w	r3, r3, #7
 8003142:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <prvInitialiseNewTask+0x48>
	__asm volatile
 800314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	617b      	str	r3, [r7, #20]
}
 8003160:	bf00      	nop
 8003162:	e7fe      	b.n	8003162 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
 8003168:	e012      	b.n	8003190 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	7819      	ldrb	r1, [r3, #0]
 8003172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	4413      	add	r3, r2
 8003178:	3334      	adds	r3, #52	; 0x34
 800317a:	460a      	mov	r2, r1
 800317c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4413      	add	r3, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d006      	beq.n	8003198 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3301      	adds	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	d9e9      	bls.n	800316a <prvInitialiseNewTask+0x4e>
 8003196:	e000      	b.n	800319a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003198:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	2b06      	cmp	r3, #6
 80031a6:	d901      	bls.n	80031ac <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031a8:	2306      	movs	r3, #6
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	2200      	movs	r2, #0
 80031bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	3304      	adds	r3, #4
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f893 	bl	80022ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	3318      	adds	r3, #24
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff f88e 	bl	80022ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	f1c3 0207 	rsb	r2, r3, #7
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	334c      	adds	r3, #76	; 0x4c
 80031fc:	2260      	movs	r2, #96	; 0x60
 80031fe:	2100      	movs	r1, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f001 fb25 	bl	8004850 <memset>
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	4a0c      	ldr	r2, [pc, #48]	; (800323c <prvInitialiseNewTask+0x120>)
 800320a:	651a      	str	r2, [r3, #80]	; 0x50
 800320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320e:	4a0c      	ldr	r2, [pc, #48]	; (8003240 <prvInitialiseNewTask+0x124>)
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <prvInitialiseNewTask+0x128>)
 8003216:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	69b8      	ldr	r0, [r7, #24]
 800321e:	f000 ff11 	bl	8004044 <pxPortInitialiseStack>
 8003222:	4602      	mov	r2, r0
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003232:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003234:	bf00      	nop
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	080052bc 	.word	0x080052bc
 8003240:	080052dc 	.word	0x080052dc
 8003244:	0800529c 	.word	0x0800529c

08003248 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003250:	f000 ffec 	bl	800422c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003254:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <prvAddNewTaskToReadyList+0xb8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3301      	adds	r3, #1
 800325a:	4a29      	ldr	r2, [pc, #164]	; (8003300 <prvAddNewTaskToReadyList+0xb8>)
 800325c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800325e:	4b29      	ldr	r3, [pc, #164]	; (8003304 <prvAddNewTaskToReadyList+0xbc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003266:	4a27      	ldr	r2, [pc, #156]	; (8003304 <prvAddNewTaskToReadyList+0xbc>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <prvAddNewTaskToReadyList+0xb8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d110      	bne.n	8003296 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003274:	f000 fbdc 	bl	8003a30 <prvInitialiseTaskLists>
 8003278:	e00d      	b.n	8003296 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800327a:	4b23      	ldr	r3, [pc, #140]	; (8003308 <prvAddNewTaskToReadyList+0xc0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <prvAddNewTaskToReadyList+0xbc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	429a      	cmp	r2, r3
 800328e:	d802      	bhi.n	8003296 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003290:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <prvAddNewTaskToReadyList+0xbc>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003296:	4b1d      	ldr	r3, [pc, #116]	; (800330c <prvAddNewTaskToReadyList+0xc4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	4a1b      	ldr	r2, [pc, #108]	; (800330c <prvAddNewTaskToReadyList+0xc4>)
 800329e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	2201      	movs	r2, #1
 80032a6:	409a      	lsls	r2, r3
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <prvAddNewTaskToReadyList+0xc8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	4a18      	ldr	r2, [pc, #96]	; (8003310 <prvAddNewTaskToReadyList+0xc8>)
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4a15      	ldr	r2, [pc, #84]	; (8003314 <prvAddNewTaskToReadyList+0xcc>)
 80032c0:	441a      	add	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4610      	mov	r0, r2
 80032ca:	f7ff f81c 	bl	8002306 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032ce:	f000 ffdd 	bl	800428c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <prvAddNewTaskToReadyList+0xc0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00e      	beq.n	80032f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032da:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <prvAddNewTaskToReadyList+0xbc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d207      	bcs.n	80032f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <prvAddNewTaskToReadyList+0xd0>)
 80032ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000448 	.word	0x20000448
 8003304:	20000348 	.word	0x20000348
 8003308:	20000454 	.word	0x20000454
 800330c:	20000464 	.word	0x20000464
 8003310:	20000450 	.word	0x20000450
 8003314:	2000034c 	.word	0x2000034c
 8003318:	e000ed04 	.word	0xe000ed04

0800331c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d017      	beq.n	800335e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <vTaskDelay+0x60>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <vTaskDelay+0x30>
	__asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	60bb      	str	r3, [r7, #8]
}
 8003348:	bf00      	nop
 800334a:	e7fe      	b.n	800334a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800334c:	f000 f884 	bl	8003458 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003350:	2100      	movs	r1, #0
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fe10 	bl	8003f78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003358:	f000 f88c 	bl	8003474 <xTaskResumeAll>
 800335c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d107      	bne.n	8003374 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <vTaskDelay+0x64>)
 8003366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000470 	.word	0x20000470
 8003380:	e000ed04 	.word	0xe000ed04

08003384 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800338e:	2300      	movs	r3, #0
 8003390:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003392:	463a      	mov	r2, r7
 8003394:	1d39      	adds	r1, r7, #4
 8003396:	f107 0308 	add.w	r3, r7, #8
 800339a:	4618      	mov	r0, r3
 800339c:	f7fc ff50 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033a0:	6839      	ldr	r1, [r7, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	9202      	str	r2, [sp, #8]
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	2300      	movs	r3, #0
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2300      	movs	r3, #0
 80033b0:	460a      	mov	r2, r1
 80033b2:	4921      	ldr	r1, [pc, #132]	; (8003438 <vTaskStartScheduler+0xb4>)
 80033b4:	4821      	ldr	r0, [pc, #132]	; (800343c <vTaskStartScheduler+0xb8>)
 80033b6:	f7ff fe10 	bl	8002fda <xTaskCreateStatic>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4a20      	ldr	r2, [pc, #128]	; (8003440 <vTaskStartScheduler+0xbc>)
 80033be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033c0:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <vTaskStartScheduler+0xbc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033c8:	2301      	movs	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	e001      	b.n	80033d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d11b      	bne.n	8003410 <vTaskStartScheduler+0x8c>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	613b      	str	r3, [r7, #16]
}
 80033ea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80033ec:	4b15      	ldr	r3, [pc, #84]	; (8003444 <vTaskStartScheduler+0xc0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	334c      	adds	r3, #76	; 0x4c
 80033f2:	4a15      	ldr	r2, [pc, #84]	; (8003448 <vTaskStartScheduler+0xc4>)
 80033f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <vTaskStartScheduler+0xc8>)
 80033f8:	f04f 32ff 	mov.w	r2, #4294967295
 80033fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <vTaskStartScheduler+0xcc>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003404:	4b13      	ldr	r3, [pc, #76]	; (8003454 <vTaskStartScheduler+0xd0>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800340a:	f000 fe9d 	bl	8004148 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800340e:	e00e      	b.n	800342e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003416:	d10a      	bne.n	800342e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	60fb      	str	r3, [r7, #12]
}
 800342a:	bf00      	nop
 800342c:	e7fe      	b.n	800342c <vTaskStartScheduler+0xa8>
}
 800342e:	bf00      	nop
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	0800527c 	.word	0x0800527c
 800343c:	08003a01 	.word	0x08003a01
 8003440:	2000046c 	.word	0x2000046c
 8003444:	20000348 	.word	0x20000348
 8003448:	20000010 	.word	0x20000010
 800344c:	20000468 	.word	0x20000468
 8003450:	20000454 	.word	0x20000454
 8003454:	2000044c 	.word	0x2000044c

08003458 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <vTaskSuspendAll+0x18>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	4a03      	ldr	r2, [pc, #12]	; (8003470 <vTaskSuspendAll+0x18>)
 8003464:	6013      	str	r3, [r2, #0]
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000470 	.word	0x20000470

08003474 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <xTaskResumeAll+0x114>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	603b      	str	r3, [r7, #0]
}
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034a0:	f000 fec4 	bl	800422c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034a4:	4b38      	ldr	r3, [pc, #224]	; (8003588 <xTaskResumeAll+0x114>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	4a37      	ldr	r2, [pc, #220]	; (8003588 <xTaskResumeAll+0x114>)
 80034ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ae:	4b36      	ldr	r3, [pc, #216]	; (8003588 <xTaskResumeAll+0x114>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d161      	bne.n	800357a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034b6:	4b35      	ldr	r3, [pc, #212]	; (800358c <xTaskResumeAll+0x118>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d05d      	beq.n	800357a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034be:	e02e      	b.n	800351e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80034c0:	4b33      	ldr	r3, [pc, #204]	; (8003590 <xTaskResumeAll+0x11c>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3318      	adds	r3, #24
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe ff75 	bl	80023bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe ff70 	bl	80023bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	2201      	movs	r2, #1
 80034e2:	409a      	lsls	r2, r3
 80034e4:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <xTaskResumeAll+0x120>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	4a2a      	ldr	r2, [pc, #168]	; (8003594 <xTaskResumeAll+0x120>)
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4a27      	ldr	r2, [pc, #156]	; (8003598 <xTaskResumeAll+0x124>)
 80034fc:	441a      	add	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3304      	adds	r3, #4
 8003502:	4619      	mov	r1, r3
 8003504:	4610      	mov	r0, r2
 8003506:	f7fe fefe 	bl	8002306 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350e:	4b23      	ldr	r3, [pc, #140]	; (800359c <xTaskResumeAll+0x128>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	429a      	cmp	r2, r3
 8003516:	d302      	bcc.n	800351e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003518:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <xTaskResumeAll+0x12c>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800351e:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <xTaskResumeAll+0x11c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1cc      	bne.n	80034c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800352c:	f000 fb22 	bl	8003b74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003530:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <xTaskResumeAll+0x130>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d010      	beq.n	800355e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800353c:	f000 f836 	bl	80035ac <xTaskIncrementTick>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003546:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <xTaskResumeAll+0x12c>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3b01      	subs	r3, #1
 8003550:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f1      	bne.n	800353c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003558:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <xTaskResumeAll+0x130>)
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <xTaskResumeAll+0x12c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003566:	2301      	movs	r3, #1
 8003568:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <xTaskResumeAll+0x134>)
 800356c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800357a:	f000 fe87 	bl	800428c <vPortExitCritical>

	return xAlreadyYielded;
 800357e:	68bb      	ldr	r3, [r7, #8]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	20000470 	.word	0x20000470
 800358c:	20000448 	.word	0x20000448
 8003590:	20000408 	.word	0x20000408
 8003594:	20000450 	.word	0x20000450
 8003598:	2000034c 	.word	0x2000034c
 800359c:	20000348 	.word	0x20000348
 80035a0:	2000045c 	.word	0x2000045c
 80035a4:	20000458 	.word	0x20000458
 80035a8:	e000ed04 	.word	0xe000ed04

080035ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035b6:	4b51      	ldr	r3, [pc, #324]	; (80036fc <xTaskIncrementTick+0x150>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f040 808d 	bne.w	80036da <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035c0:	4b4f      	ldr	r3, [pc, #316]	; (8003700 <xTaskIncrementTick+0x154>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3301      	adds	r3, #1
 80035c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035c8:	4a4d      	ldr	r2, [pc, #308]	; (8003700 <xTaskIncrementTick+0x154>)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d120      	bne.n	8003616 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80035d4:	4b4b      	ldr	r3, [pc, #300]	; (8003704 <xTaskIncrementTick+0x158>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	603b      	str	r3, [r7, #0]
}
 80035f0:	bf00      	nop
 80035f2:	e7fe      	b.n	80035f2 <xTaskIncrementTick+0x46>
 80035f4:	4b43      	ldr	r3, [pc, #268]	; (8003704 <xTaskIncrementTick+0x158>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	4b43      	ldr	r3, [pc, #268]	; (8003708 <xTaskIncrementTick+0x15c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a41      	ldr	r2, [pc, #260]	; (8003704 <xTaskIncrementTick+0x158>)
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4a41      	ldr	r2, [pc, #260]	; (8003708 <xTaskIncrementTick+0x15c>)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b40      	ldr	r3, [pc, #256]	; (800370c <xTaskIncrementTick+0x160>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	4a3f      	ldr	r2, [pc, #252]	; (800370c <xTaskIncrementTick+0x160>)
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	f000 faaf 	bl	8003b74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003616:	4b3e      	ldr	r3, [pc, #248]	; (8003710 <xTaskIncrementTick+0x164>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	429a      	cmp	r2, r3
 800361e:	d34d      	bcc.n	80036bc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003620:	4b38      	ldr	r3, [pc, #224]	; (8003704 <xTaskIncrementTick+0x158>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <xTaskIncrementTick+0x82>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <xTaskIncrementTick+0x84>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003634:	4b36      	ldr	r3, [pc, #216]	; (8003710 <xTaskIncrementTick+0x164>)
 8003636:	f04f 32ff 	mov.w	r2, #4294967295
 800363a:	601a      	str	r2, [r3, #0]
					break;
 800363c:	e03e      	b.n	80036bc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800363e:	4b31      	ldr	r3, [pc, #196]	; (8003704 <xTaskIncrementTick+0x158>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	429a      	cmp	r2, r3
 8003654:	d203      	bcs.n	800365e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003656:	4a2e      	ldr	r2, [pc, #184]	; (8003710 <xTaskIncrementTick+0x164>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6013      	str	r3, [r2, #0]
						break;
 800365c:	e02e      	b.n	80036bc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	3304      	adds	r3, #4
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe feaa 	bl	80023bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	3318      	adds	r3, #24
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe fea1 	bl	80023bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	2201      	movs	r2, #1
 8003680:	409a      	lsls	r2, r3
 8003682:	4b24      	ldr	r3, [pc, #144]	; (8003714 <xTaskIncrementTick+0x168>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4313      	orrs	r3, r2
 8003688:	4a22      	ldr	r2, [pc, #136]	; (8003714 <xTaskIncrementTick+0x168>)
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <xTaskIncrementTick+0x16c>)
 800369a:	441a      	add	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	3304      	adds	r3, #4
 80036a0:	4619      	mov	r1, r3
 80036a2:	4610      	mov	r0, r2
 80036a4:	f7fe fe2f 	bl	8002306 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <xTaskIncrementTick+0x170>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d3b4      	bcc.n	8003620 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80036b6:	2301      	movs	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ba:	e7b1      	b.n	8003620 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <xTaskIncrementTick+0x170>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c2:	4915      	ldr	r1, [pc, #84]	; (8003718 <xTaskIncrementTick+0x16c>)
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d907      	bls.n	80036e4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e004      	b.n	80036e4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80036da:	4b11      	ldr	r3, [pc, #68]	; (8003720 <xTaskIncrementTick+0x174>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3301      	adds	r3, #1
 80036e0:	4a0f      	ldr	r2, [pc, #60]	; (8003720 <xTaskIncrementTick+0x174>)
 80036e2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <xTaskIncrementTick+0x178>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80036ec:	2301      	movs	r3, #1
 80036ee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80036f0:	697b      	ldr	r3, [r7, #20]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000470 	.word	0x20000470
 8003700:	2000044c 	.word	0x2000044c
 8003704:	20000400 	.word	0x20000400
 8003708:	20000404 	.word	0x20000404
 800370c:	20000460 	.word	0x20000460
 8003710:	20000468 	.word	0x20000468
 8003714:	20000450 	.word	0x20000450
 8003718:	2000034c 	.word	0x2000034c
 800371c:	20000348 	.word	0x20000348
 8003720:	20000458 	.word	0x20000458
 8003724:	2000045c 	.word	0x2000045c

08003728 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800372e:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <vTaskSwitchContext+0xac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003736:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <vTaskSwitchContext+0xb0>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800373c:	e044      	b.n	80037c8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <vTaskSwitchContext+0xb0>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003744:	4b25      	ldr	r3, [pc, #148]	; (80037dc <vTaskSwitchContext+0xb4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003752:	7afb      	ldrb	r3, [r7, #11]
 8003754:	f1c3 031f 	rsb	r3, r3, #31
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	4921      	ldr	r1, [pc, #132]	; (80037e0 <vTaskSwitchContext+0xb8>)
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <vTaskSwitchContext+0x5c>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	607b      	str	r3, [r7, #4]
}
 8003780:	bf00      	nop
 8003782:	e7fe      	b.n	8003782 <vTaskSwitchContext+0x5a>
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <vTaskSwitchContext+0xb8>)
 8003790:	4413      	add	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	3308      	adds	r3, #8
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d104      	bne.n	80037b4 <vTaskSwitchContext+0x8c>
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <vTaskSwitchContext+0xbc>)
 80037bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <vTaskSwitchContext+0xbc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	334c      	adds	r3, #76	; 0x4c
 80037c4:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <vTaskSwitchContext+0xc0>)
 80037c6:	6013      	str	r3, [r2, #0]
}
 80037c8:	bf00      	nop
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000470 	.word	0x20000470
 80037d8:	2000045c 	.word	0x2000045c
 80037dc:	20000450 	.word	0x20000450
 80037e0:	2000034c 	.word	0x2000034c
 80037e4:	20000348 	.word	0x20000348
 80037e8:	20000010 	.word	0x20000010

080037ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	60fb      	str	r3, [r7, #12]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <vTaskPlaceOnEventList+0x44>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3318      	adds	r3, #24
 8003818:	4619      	mov	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fe fd96 	bl	800234c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003820:	2101      	movs	r1, #1
 8003822:	6838      	ldr	r0, [r7, #0]
 8003824:	f000 fba8 	bl	8003f78 <prvAddCurrentTaskToDelayedList>
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000348 	.word	0x20000348

08003834 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10a      	bne.n	8003860 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	60fb      	str	r3, [r7, #12]
}
 800385c:	bf00      	nop
 800385e:	e7fe      	b.n	800385e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	3318      	adds	r3, #24
 8003864:	4618      	mov	r0, r3
 8003866:	f7fe fda9 	bl	80023bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800386a:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <xTaskRemoveFromEventList+0xac>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d11c      	bne.n	80038ac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	3304      	adds	r3, #4
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fda0 	bl	80023bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	2201      	movs	r2, #1
 8003882:	409a      	lsls	r2, r3
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <xTaskRemoveFromEventList+0xb0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4313      	orrs	r3, r2
 800388a:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <xTaskRemoveFromEventList+0xb0>)
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <xTaskRemoveFromEventList+0xb4>)
 800389c:	441a      	add	r2, r3
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f7fe fd2e 	bl	8002306 <vListInsertEnd>
 80038aa:	e005      	b.n	80038b8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	3318      	adds	r3, #24
 80038b0:	4619      	mov	r1, r3
 80038b2:	480e      	ldr	r0, [pc, #56]	; (80038ec <xTaskRemoveFromEventList+0xb8>)
 80038b4:	f7fe fd27 	bl	8002306 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <xTaskRemoveFromEventList+0xbc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d905      	bls.n	80038d2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038c6:	2301      	movs	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <xTaskRemoveFromEventList+0xc0>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e001      	b.n	80038d6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80038d6:	697b      	ldr	r3, [r7, #20]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20000470 	.word	0x20000470
 80038e4:	20000450 	.word	0x20000450
 80038e8:	2000034c 	.word	0x2000034c
 80038ec:	20000408 	.word	0x20000408
 80038f0:	20000348 	.word	0x20000348
 80038f4:	2000045c 	.word	0x2000045c

080038f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <vTaskInternalSetTimeOutState+0x24>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <vTaskInternalSetTimeOutState+0x28>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	605a      	str	r2, [r3, #4]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000460 	.word	0x20000460
 8003920:	2000044c 	.word	0x2000044c

08003924 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	613b      	str	r3, [r7, #16]
}
 8003946:	bf00      	nop
 8003948:	e7fe      	b.n	8003948 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	60fb      	str	r3, [r7, #12]
}
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003966:	f000 fc61 	bl	800422c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800396a:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <xTaskCheckForTimeOut+0xbc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d102      	bne.n	800398a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	e023      	b.n	80039d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <xTaskCheckForTimeOut+0xc0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d007      	beq.n	80039a6 <xTaskCheckForTimeOut+0x82>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	429a      	cmp	r2, r3
 800399e:	d302      	bcc.n	80039a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039a0:	2301      	movs	r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	e015      	b.n	80039d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d20b      	bcs.n	80039c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	1ad2      	subs	r2, r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff9b 	bl	80038f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
 80039c6:	e004      	b.n	80039d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039ce:	2301      	movs	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039d2:	f000 fc5b 	bl	800428c <vPortExitCritical>

	return xReturn;
 80039d6:	69fb      	ldr	r3, [r7, #28]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3720      	adds	r7, #32
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	2000044c 	.word	0x2000044c
 80039e4:	20000460 	.word	0x20000460

080039e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <vTaskMissedYield+0x14>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	2000045c 	.word	0x2000045c

08003a00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a08:	f000 f852 	bl	8003ab0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <prvIdleTask+0x28>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d9f9      	bls.n	8003a08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <prvIdleTask+0x2c>)
 8003a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a24:	e7f0      	b.n	8003a08 <prvIdleTask+0x8>
 8003a26:	bf00      	nop
 8003a28:	2000034c 	.word	0x2000034c
 8003a2c:	e000ed04 	.word	0xe000ed04

08003a30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a36:	2300      	movs	r3, #0
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	e00c      	b.n	8003a56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <prvInitialiseTaskLists+0x60>)
 8003a48:	4413      	add	r3, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fc30 	bl	80022b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3301      	adds	r3, #1
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b06      	cmp	r3, #6
 8003a5a:	d9ef      	bls.n	8003a3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a5c:	480d      	ldr	r0, [pc, #52]	; (8003a94 <prvInitialiseTaskLists+0x64>)
 8003a5e:	f7fe fc27 	bl	80022b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a62:	480d      	ldr	r0, [pc, #52]	; (8003a98 <prvInitialiseTaskLists+0x68>)
 8003a64:	f7fe fc24 	bl	80022b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a68:	480c      	ldr	r0, [pc, #48]	; (8003a9c <prvInitialiseTaskLists+0x6c>)
 8003a6a:	f7fe fc21 	bl	80022b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a6e:	480c      	ldr	r0, [pc, #48]	; (8003aa0 <prvInitialiseTaskLists+0x70>)
 8003a70:	f7fe fc1e 	bl	80022b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a74:	480b      	ldr	r0, [pc, #44]	; (8003aa4 <prvInitialiseTaskLists+0x74>)
 8003a76:	f7fe fc1b 	bl	80022b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <prvInitialiseTaskLists+0x78>)
 8003a7c:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <prvInitialiseTaskLists+0x64>)
 8003a7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a80:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <prvInitialiseTaskLists+0x7c>)
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <prvInitialiseTaskLists+0x68>)
 8003a84:	601a      	str	r2, [r3, #0]
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	2000034c 	.word	0x2000034c
 8003a94:	200003d8 	.word	0x200003d8
 8003a98:	200003ec 	.word	0x200003ec
 8003a9c:	20000408 	.word	0x20000408
 8003aa0:	2000041c 	.word	0x2000041c
 8003aa4:	20000434 	.word	0x20000434
 8003aa8:	20000400 	.word	0x20000400
 8003aac:	20000404 	.word	0x20000404

08003ab0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ab6:	e019      	b.n	8003aec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ab8:	f000 fbb8 	bl	800422c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003abc:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <prvCheckTasksWaitingTermination+0x50>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fe fc77 	bl	80023bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ace:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <prvCheckTasksWaitingTermination+0x54>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	4a0b      	ldr	r2, [pc, #44]	; (8003b04 <prvCheckTasksWaitingTermination+0x54>)
 8003ad6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <prvCheckTasksWaitingTermination+0x58>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <prvCheckTasksWaitingTermination+0x58>)
 8003ae0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ae2:	f000 fbd3 	bl	800428c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f810 	bl	8003b0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <prvCheckTasksWaitingTermination+0x58>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e1      	bne.n	8003ab8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	2000041c 	.word	0x2000041c
 8003b04:	20000448 	.word	0x20000448
 8003b08:	20000430 	.word	0x20000430

08003b0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	334c      	adds	r3, #76	; 0x4c
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 ff09 	bl	8004930 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d108      	bne.n	8003b3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fd41 	bl	80045b4 <vPortFree>
				vPortFree( pxTCB );
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fd3e 	bl	80045b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b38:	e018      	b.n	8003b6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d103      	bne.n	8003b4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fd35 	bl	80045b4 <vPortFree>
	}
 8003b4a:	e00f      	b.n	8003b6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d00a      	beq.n	8003b6c <prvDeleteTCB+0x60>
	__asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	60fb      	str	r3, [r7, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	e7fe      	b.n	8003b6a <prvDeleteTCB+0x5e>
	}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <prvResetNextTaskUnblockTime+0x40>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <prvResetNextTaskUnblockTime+0x14>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <prvResetNextTaskUnblockTime+0x16>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d004      	beq.n	8003b98 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <prvResetNextTaskUnblockTime+0x44>)
 8003b90:	f04f 32ff 	mov.w	r2, #4294967295
 8003b94:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b96:	e008      	b.n	8003baa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <prvResetNextTaskUnblockTime+0x40>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <prvResetNextTaskUnblockTime+0x44>)
 8003ba8:	6013      	str	r3, [r2, #0]
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr
 8003bb4:	20000400 	.word	0x20000400
 8003bb8:	20000468 	.word	0x20000468

08003bbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <xTaskGetSchedulerState+0x34>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	e008      	b.n	8003be2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd0:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <xTaskGetSchedulerState+0x38>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d102      	bne.n	8003bde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	e001      	b.n	8003be2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bde:	2300      	movs	r3, #0
 8003be0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003be2:	687b      	ldr	r3, [r7, #4]
	}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000454 	.word	0x20000454
 8003bf4:	20000470 	.word	0x20000470

08003bf8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d06e      	beq.n	8003cec <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c12:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <xTaskPriorityInherit+0x100>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d25e      	bcs.n	8003cda <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	db06      	blt.n	8003c32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c24:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <xTaskPriorityInherit+0x100>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	f1c3 0207 	rsb	r2, r3, #7
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6959      	ldr	r1, [r3, #20]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4a2e      	ldr	r2, [pc, #184]	; (8003cfc <xTaskPriorityInherit+0x104>)
 8003c44:	4413      	add	r3, r2
 8003c46:	4299      	cmp	r1, r3
 8003c48:	d101      	bne.n	8003c4e <xTaskPriorityInherit+0x56>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <xTaskPriorityInherit+0x58>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d03a      	beq.n	8003cca <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fe fbaf 	bl	80023bc <uxListRemove>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d115      	bne.n	8003c90 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	4924      	ldr	r1, [pc, #144]	; (8003cfc <xTaskPriorityInherit+0x104>)
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <xTaskPriorityInherit+0x98>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	2201      	movs	r2, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43da      	mvns	r2, r3
 8003c86:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <xTaskPriorityInherit+0x108>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	4a1c      	ldr	r2, [pc, #112]	; (8003d00 <xTaskPriorityInherit+0x108>)
 8003c8e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c90:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <xTaskPriorityInherit+0x100>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <xTaskPriorityInherit+0x108>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <xTaskPriorityInherit+0x108>)
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <xTaskPriorityInherit+0x104>)
 8003cba:	441a      	add	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f7fe fb1f 	bl	8002306 <vListInsertEnd>
 8003cc8:	e004      	b.n	8003cd4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003cca:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <xTaskPriorityInherit+0x100>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	e008      	b.n	8003cec <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <xTaskPriorityInherit+0x100>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d201      	bcs.n	8003cec <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003cec:	68fb      	ldr	r3, [r7, #12]
	}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000348 	.word	0x20000348
 8003cfc:	2000034c 	.word	0x2000034c
 8003d00:	20000450 	.word	0x20000450

08003d04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d06e      	beq.n	8003df8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d1a:	4b3a      	ldr	r3, [pc, #232]	; (8003e04 <xTaskPriorityDisinherit+0x100>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d00a      	beq.n	8003d3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	60fb      	str	r3, [r7, #12]
}
 8003d36:	bf00      	nop
 8003d38:	e7fe      	b.n	8003d38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10a      	bne.n	8003d58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	60bb      	str	r3, [r7, #8]
}
 8003d54:	bf00      	nop
 8003d56:	e7fe      	b.n	8003d56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5c:	1e5a      	subs	r2, r3, #1
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d044      	beq.n	8003df8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d140      	bne.n	8003df8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fb1e 	bl	80023bc <uxListRemove>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d115      	bne.n	8003db2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8a:	491f      	ldr	r1, [pc, #124]	; (8003e08 <xTaskPriorityDisinherit+0x104>)
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xTaskPriorityDisinherit+0xae>
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	2201      	movs	r2, #1
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43da      	mvns	r2, r3
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <xTaskPriorityDisinherit+0x108>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4013      	ands	r3, r2
 8003dae:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <xTaskPriorityDisinherit+0x108>)
 8003db0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f1c3 0207 	rsb	r2, r3, #7
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	2201      	movs	r2, #1
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <xTaskPriorityDisinherit+0x108>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	4a0d      	ldr	r2, [pc, #52]	; (8003e0c <xTaskPriorityDisinherit+0x108>)
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <xTaskPriorityDisinherit+0x104>)
 8003de6:	441a      	add	r2, r3
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4619      	mov	r1, r3
 8003dee:	4610      	mov	r0, r2
 8003df0:	f7fe fa89 	bl	8002306 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003df8:	697b      	ldr	r3, [r7, #20]
	}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000348 	.word	0x20000348
 8003e08:	2000034c 	.word	0x2000034c
 8003e0c:	20000450 	.word	0x20000450

08003e10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8088 	beq.w	8003f3a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	60fb      	str	r3, [r7, #12]
}
 8003e44:	bf00      	nop
 8003e46:	e7fe      	b.n	8003e46 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d902      	bls.n	8003e58 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	e002      	b.n	8003e5e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d068      	beq.n	8003f3a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d163      	bne.n	8003f3a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003e72:	4b34      	ldr	r3, [pc, #208]	; (8003f44 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d10a      	bne.n	8003e92 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	60bb      	str	r3, [r7, #8]
}
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	db04      	blt.n	8003eb0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f1c3 0207 	rsb	r2, r3, #7
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	6959      	ldr	r1, [r3, #20]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4a22      	ldr	r2, [pc, #136]	; (8003f48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003ec0:	4413      	add	r3, r2
 8003ec2:	4299      	cmp	r1, r3
 8003ec4:	d101      	bne.n	8003eca <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d034      	beq.n	8003f3a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe fa71 	bl	80023bc <uxListRemove>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d115      	bne.n	8003f0c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee4:	4918      	ldr	r1, [pc, #96]	; (8003f48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	2201      	movs	r2, #1
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43da      	mvns	r2, r3
 8003f02:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4013      	ands	r3, r2
 8003f08:	4a10      	ldr	r2, [pc, #64]	; (8003f4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003f0a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	2201      	movs	r2, #1
 8003f12:	409a      	lsls	r2, r3
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4a07      	ldr	r2, [pc, #28]	; (8003f48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003f2c:	441a      	add	r2, r3
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f7fe f9e6 	bl	8002306 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f3a:	bf00      	nop
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000348 	.word	0x20000348
 8003f48:	2000034c 	.word	0x2000034c
 8003f4c:	20000450 	.word	0x20000450

08003f50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003f54:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d004      	beq.n	8003f66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f62:	3201      	adds	r2, #1
 8003f64:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003f66:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f68:	681b      	ldr	r3, [r3, #0]
	}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20000348 	.word	0x20000348

08003f78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f82:	4b29      	ldr	r3, [pc, #164]	; (8004028 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f88:	4b28      	ldr	r3, [pc, #160]	; (800402c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe fa14 	bl	80023bc <uxListRemove>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10b      	bne.n	8003fb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003f9a:	4b24      	ldr	r3, [pc, #144]	; (800402c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4013      	ands	r3, r2
 8003fae:	4a20      	ldr	r2, [pc, #128]	; (8004030 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d10a      	bne.n	8003fd0 <prvAddCurrentTaskToDelayedList+0x58>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d007      	beq.n	8003fd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	; (800402c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	481a      	ldr	r0, [pc, #104]	; (8004034 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003fca:	f7fe f99c 	bl	8002306 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fce:	e026      	b.n	800401e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fd8:	4b14      	ldr	r3, [pc, #80]	; (800402c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d209      	bcs.n	8003ffc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fe8:	4b13      	ldr	r3, [pc, #76]	; (8004038 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b0f      	ldr	r3, [pc, #60]	; (800402c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7fe f9a9 	bl	800234c <vListInsert>
}
 8003ffa:	e010      	b.n	800401e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	; (800403c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3304      	adds	r3, #4
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f7fe f99f 	bl	800234c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800400e:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	429a      	cmp	r2, r3
 8004016:	d202      	bcs.n	800401e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004018:	4a09      	ldr	r2, [pc, #36]	; (8004040 <prvAddCurrentTaskToDelayedList+0xc8>)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	6013      	str	r3, [r2, #0]
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	2000044c 	.word	0x2000044c
 800402c:	20000348 	.word	0x20000348
 8004030:	20000450 	.word	0x20000450
 8004034:	20000434 	.word	0x20000434
 8004038:	20000404 	.word	0x20000404
 800403c:	20000400 	.word	0x20000400
 8004040:	20000468 	.word	0x20000468

08004044 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3b04      	subs	r3, #4
 8004054:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800405c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b04      	subs	r3, #4
 8004062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3b04      	subs	r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004074:	4a08      	ldr	r2, [pc, #32]	; (8004098 <pxPortInitialiseStack+0x54>)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3b14      	subs	r3, #20
 800407e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3b20      	subs	r3, #32
 800408a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800408c:	68fb      	ldr	r3, [r7, #12]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr
 8004098:	0800409d 	.word	0x0800409d

0800409c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <prvTaskExitError+0x54>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ae:	d00a      	beq.n	80040c6 <prvTaskExitError+0x2a>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	60fb      	str	r3, [r7, #12]
}
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <prvTaskExitError+0x28>
	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	60bb      	str	r3, [r7, #8]
}
 80040d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040da:	bf00      	nop
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0fc      	beq.n	80040dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040e2:	bf00      	nop
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	2000000c 	.word	0x2000000c
	...

08004100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <pxCurrentTCBConst2>)
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	6808      	ldr	r0, [r1, #0]
 8004106:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800410a:	f380 8809 	msr	PSP, r0
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8811 	msr	BASEPRI, r0
 800411a:	f04e 0e0d 	orr.w	lr, lr, #13
 800411e:	4770      	bx	lr

08004120 <pxCurrentTCBConst2>:
 8004120:	20000348 	.word	0x20000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop

08004128 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004128:	4806      	ldr	r0, [pc, #24]	; (8004144 <prvPortStartFirstTask+0x1c>)
 800412a:	6800      	ldr	r0, [r0, #0]
 800412c:	6800      	ldr	r0, [r0, #0]
 800412e:	f380 8808 	msr	MSP, r0
 8004132:	b662      	cpsie	i
 8004134:	b661      	cpsie	f
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	df00      	svc	0
 8004140:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004142:	bf00      	nop
 8004144:	e000ed08 	.word	0xe000ed08

08004148 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800414e:	4b32      	ldr	r3, [pc, #200]	; (8004218 <xPortStartScheduler+0xd0>)
 8004150:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	22ff      	movs	r2, #255	; 0xff
 800415e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004170:	b2da      	uxtb	r2, r3
 8004172:	4b2a      	ldr	r3, [pc, #168]	; (800421c <xPortStartScheduler+0xd4>)
 8004174:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004176:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <xPortStartScheduler+0xd8>)
 8004178:	2207      	movs	r2, #7
 800417a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800417c:	e009      	b.n	8004192 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800417e:	4b28      	ldr	r3, [pc, #160]	; (8004220 <xPortStartScheduler+0xd8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3b01      	subs	r3, #1
 8004184:	4a26      	ldr	r2, [pc, #152]	; (8004220 <xPortStartScheduler+0xd8>)
 8004186:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	b2db      	uxtb	r3, r3
 8004190:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	2b80      	cmp	r3, #128	; 0x80
 800419c:	d0ef      	beq.n	800417e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800419e:	4b20      	ldr	r3, [pc, #128]	; (8004220 <xPortStartScheduler+0xd8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f1c3 0307 	rsb	r3, r3, #7
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d00a      	beq.n	80041c0 <xPortStartScheduler+0x78>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	60bb      	str	r3, [r7, #8]
}
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041c0:	4b17      	ldr	r3, [pc, #92]	; (8004220 <xPortStartScheduler+0xd8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <xPortStartScheduler+0xd8>)
 80041c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <xPortStartScheduler+0xd8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041d2:	4a13      	ldr	r2, [pc, #76]	; (8004220 <xPortStartScheduler+0xd8>)
 80041d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041de:	4b11      	ldr	r3, [pc, #68]	; (8004224 <xPortStartScheduler+0xdc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a10      	ldr	r2, [pc, #64]	; (8004224 <xPortStartScheduler+0xdc>)
 80041e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041ea:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <xPortStartScheduler+0xdc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a0d      	ldr	r2, [pc, #52]	; (8004224 <xPortStartScheduler+0xdc>)
 80041f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041f6:	f000 f8b9 	bl	800436c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041fa:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <xPortStartScheduler+0xe0>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004200:	f7ff ff92 	bl	8004128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004204:	f7ff fa90 	bl	8003728 <vTaskSwitchContext>
	prvTaskExitError();
 8004208:	f7ff ff48 	bl	800409c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	e000e400 	.word	0xe000e400
 800421c:	20000474 	.word	0x20000474
 8004220:	20000478 	.word	0x20000478
 8004224:	e000ed20 	.word	0xe000ed20
 8004228:	2000000c 	.word	0x2000000c

0800422c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	607b      	str	r3, [r7, #4]
}
 8004244:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004246:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <vPortEnterCritical+0x58>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3301      	adds	r3, #1
 800424c:	4a0d      	ldr	r2, [pc, #52]	; (8004284 <vPortEnterCritical+0x58>)
 800424e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <vPortEnterCritical+0x58>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10f      	bne.n	8004278 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <vPortEnterCritical+0x5c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <vPortEnterCritical+0x4c>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	603b      	str	r3, [r7, #0]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <vPortEnterCritical+0x4a>
	}
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	2000000c 	.word	0x2000000c
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <vPortExitCritical+0x4c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <vPortExitCritical+0x24>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	607b      	str	r3, [r7, #4]
}
 80042ac:	bf00      	nop
 80042ae:	e7fe      	b.n	80042ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <vPortExitCritical+0x4c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	4a08      	ldr	r2, [pc, #32]	; (80042d8 <vPortExitCritical+0x4c>)
 80042b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042ba:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <vPortExitCritical+0x4c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <vPortExitCritical+0x42>
 80042c2:	2300      	movs	r3, #0
 80042c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	f383 8811 	msr	BASEPRI, r3
}
 80042cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr
 80042d8:	2000000c 	.word	0x2000000c
 80042dc:	00000000 	.word	0x00000000

080042e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042e0:	f3ef 8009 	mrs	r0, PSP
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <pxCurrentTCBConst>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042f0:	6010      	str	r0, [r2, #0]
 80042f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80042f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042fa:	f380 8811 	msr	BASEPRI, r0
 80042fe:	f7ff fa13 	bl	8003728 <vTaskSwitchContext>
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f380 8811 	msr	BASEPRI, r0
 800430a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800430e:	6819      	ldr	r1, [r3, #0]
 8004310:	6808      	ldr	r0, [r1, #0]
 8004312:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004316:	f380 8809 	msr	PSP, r0
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	4770      	bx	lr

08004320 <pxCurrentTCBConst>:
 8004320:	20000348 	.word	0x20000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop

08004328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	607b      	str	r3, [r7, #4]
}
 8004340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004342:	f7ff f933 	bl	80035ac <xTaskIncrementTick>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <SysTick_Handler+0x40>)
 800434e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	2300      	movs	r3, #0
 8004356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f383 8811 	msr	BASEPRI, r3
}
 800435e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <vPortSetupTimerInterrupt+0x30>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <vPortSetupTimerInterrupt+0x34>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <vPortSetupTimerInterrupt+0x38>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <vPortSetupTimerInterrupt+0x3c>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	099b      	lsrs	r3, r3, #6
 8004388:	4a08      	ldr	r2, [pc, #32]	; (80043ac <vPortSetupTimerInterrupt+0x40>)
 800438a:	3b01      	subs	r3, #1
 800438c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800438e:	4b03      	ldr	r3, [pc, #12]	; (800439c <vPortSetupTimerInterrupt+0x30>)
 8004390:	2207      	movs	r2, #7
 8004392:	601a      	str	r2, [r3, #0]
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	e000e010 	.word	0xe000e010
 80043a0:	e000e018 	.word	0xe000e018
 80043a4:	20000000 	.word	0x20000000
 80043a8:	10624dd3 	.word	0x10624dd3
 80043ac:	e000e014 	.word	0xe000e014

080043b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80043b6:	f3ef 8305 	mrs	r3, IPSR
 80043ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b0f      	cmp	r3, #15
 80043c0:	d914      	bls.n	80043ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043c2:	4a16      	ldr	r2, [pc, #88]	; (800441c <vPortValidateInterruptPriority+0x6c>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043cc:	4b14      	ldr	r3, [pc, #80]	; (8004420 <vPortValidateInterruptPriority+0x70>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	7afa      	ldrb	r2, [r7, #11]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d20a      	bcs.n	80043ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	607b      	str	r3, [r7, #4]
}
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043ec:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <vPortValidateInterruptPriority+0x74>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <vPortValidateInterruptPriority+0x78>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d90a      	bls.n	8004412 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	603b      	str	r3, [r7, #0]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <vPortValidateInterruptPriority+0x60>
	}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	e000e3f0 	.word	0xe000e3f0
 8004420:	20000474 	.word	0x20000474
 8004424:	e000ed0c 	.word	0xe000ed0c
 8004428:	20000478 	.word	0x20000478

0800442c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004438:	f7ff f80e 	bl	8003458 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800443c:	4b58      	ldr	r3, [pc, #352]	; (80045a0 <pvPortMalloc+0x174>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004444:	f000 f910 	bl	8004668 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004448:	4b56      	ldr	r3, [pc, #344]	; (80045a4 <pvPortMalloc+0x178>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4013      	ands	r3, r2
 8004450:	2b00      	cmp	r3, #0
 8004452:	f040 808e 	bne.w	8004572 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01d      	beq.n	8004498 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800445c:	2208      	movs	r2, #8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	2b00      	cmp	r3, #0
 800446c:	d014      	beq.n	8004498 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f023 0307 	bic.w	r3, r3, #7
 8004474:	3308      	adds	r3, #8
 8004476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <pvPortMalloc+0x6c>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	617b      	str	r3, [r7, #20]
}
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d069      	beq.n	8004572 <pvPortMalloc+0x146>
 800449e:	4b42      	ldr	r3, [pc, #264]	; (80045a8 <pvPortMalloc+0x17c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d864      	bhi.n	8004572 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044a8:	4b40      	ldr	r3, [pc, #256]	; (80045ac <pvPortMalloc+0x180>)
 80044aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044ac:	4b3f      	ldr	r3, [pc, #252]	; (80045ac <pvPortMalloc+0x180>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044b2:	e004      	b.n	80044be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d903      	bls.n	80044d0 <pvPortMalloc+0xa4>
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f1      	bne.n	80044b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044d0:	4b33      	ldr	r3, [pc, #204]	; (80045a0 <pvPortMalloc+0x174>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d04b      	beq.n	8004572 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2208      	movs	r2, #8
 80044e0:	4413      	add	r3, r2
 80044e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	1ad2      	subs	r2, r2, r3
 80044f4:	2308      	movs	r3, #8
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d91f      	bls.n	800453c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4413      	add	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <pvPortMalloc+0xf8>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	613b      	str	r3, [r7, #16]
}
 8004520:	bf00      	nop
 8004522:	e7fe      	b.n	8004522 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	1ad2      	subs	r2, r2, r3
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004536:	69b8      	ldr	r0, [r7, #24]
 8004538:	f000 f8f8 	bl	800472c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <pvPortMalloc+0x17c>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	4a18      	ldr	r2, [pc, #96]	; (80045a8 <pvPortMalloc+0x17c>)
 8004548:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800454a:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <pvPortMalloc+0x17c>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <pvPortMalloc+0x184>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d203      	bcs.n	800455e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <pvPortMalloc+0x17c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <pvPortMalloc+0x184>)
 800455c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <pvPortMalloc+0x178>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	431a      	orrs	r2, r3
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004572:	f7fe ff7f 	bl	8003474 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <pvPortMalloc+0x16a>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	60fb      	str	r3, [r7, #12]
}
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <pvPortMalloc+0x168>
	return pvReturn;
 8004596:	69fb      	ldr	r3, [r7, #28]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3728      	adds	r7, #40	; 0x28
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20001484 	.word	0x20001484
 80045a4:	20001490 	.word	0x20001490
 80045a8:	20001488 	.word	0x20001488
 80045ac:	2000147c 	.word	0x2000147c
 80045b0:	2000148c 	.word	0x2000148c

080045b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d048      	beq.n	8004658 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045c6:	2308      	movs	r3, #8
 80045c8:	425b      	negs	r3, r3
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4413      	add	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	4b21      	ldr	r3, [pc, #132]	; (8004660 <vPortFree+0xac>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4013      	ands	r3, r2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <vPortFree+0x44>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	60fb      	str	r3, [r7, #12]
}
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <vPortFree+0x62>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	60bb      	str	r3, [r7, #8]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	4b11      	ldr	r3, [pc, #68]	; (8004660 <vPortFree+0xac>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d019      	beq.n	8004658 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d115      	bne.n	8004658 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <vPortFree+0xac>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	43db      	mvns	r3, r3
 8004636:	401a      	ands	r2, r3
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800463c:	f7fe ff0c 	bl	8003458 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	4b07      	ldr	r3, [pc, #28]	; (8004664 <vPortFree+0xb0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4413      	add	r3, r2
 800464a:	4a06      	ldr	r2, [pc, #24]	; (8004664 <vPortFree+0xb0>)
 800464c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800464e:	6938      	ldr	r0, [r7, #16]
 8004650:	f000 f86c 	bl	800472c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004654:	f7fe ff0e 	bl	8003474 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004658:	bf00      	nop
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20001490 	.word	0x20001490
 8004664:	20001488 	.word	0x20001488

08004668 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800466e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004672:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004674:	4b27      	ldr	r3, [pc, #156]	; (8004714 <prvHeapInit+0xac>)
 8004676:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3307      	adds	r3, #7
 8004686:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0307 	bic.w	r3, r3, #7
 800468e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	4a1f      	ldr	r2, [pc, #124]	; (8004714 <prvHeapInit+0xac>)
 8004698:	4413      	add	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046a0:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <prvHeapInit+0xb0>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <prvHeapInit+0xb0>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	4413      	add	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046b4:	2208      	movs	r2, #8
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0307 	bic.w	r3, r3, #7
 80046c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a15      	ldr	r2, [pc, #84]	; (800471c <prvHeapInit+0xb4>)
 80046c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046ca:	4b14      	ldr	r3, [pc, #80]	; (800471c <prvHeapInit+0xb4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2200      	movs	r2, #0
 80046d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <prvHeapInit+0xb4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	1ad2      	subs	r2, r2, r3
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <prvHeapInit+0xb4>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <prvHeapInit+0xb8>)
 80046f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4a09      	ldr	r2, [pc, #36]	; (8004724 <prvHeapInit+0xbc>)
 80046fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004700:	4b09      	ldr	r3, [pc, #36]	; (8004728 <prvHeapInit+0xc0>)
 8004702:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004706:	601a      	str	r2, [r3, #0]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	2000047c 	.word	0x2000047c
 8004718:	2000147c 	.word	0x2000147c
 800471c:	20001484 	.word	0x20001484
 8004720:	2000148c 	.word	0x2000148c
 8004724:	20001488 	.word	0x20001488
 8004728:	20001490 	.word	0x20001490

0800472c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004734:	4b27      	ldr	r3, [pc, #156]	; (80047d4 <prvInsertBlockIntoFreeList+0xa8>)
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e002      	b.n	8004740 <prvInsertBlockIntoFreeList+0x14>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d8f7      	bhi.n	800473a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4413      	add	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	429a      	cmp	r2, r3
 800475a:	d108      	bne.n	800476e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	441a      	add	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	441a      	add	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d118      	bne.n	80047b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <prvInsertBlockIntoFreeList+0xac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d00d      	beq.n	80047aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	441a      	add	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e008      	b.n	80047bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <prvInsertBlockIntoFreeList+0xac>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e003      	b.n	80047bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d002      	beq.n	80047ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr
 80047d4:	2000147c 	.word	0x2000147c
 80047d8:	20001484 	.word	0x20001484

080047dc <__errno>:
 80047dc:	4b01      	ldr	r3, [pc, #4]	; (80047e4 <__errno+0x8>)
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000010 	.word	0x20000010

080047e8 <__libc_init_array>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	2600      	movs	r6, #0
 80047ec:	4d0c      	ldr	r5, [pc, #48]	; (8004820 <__libc_init_array+0x38>)
 80047ee:	4c0d      	ldr	r4, [pc, #52]	; (8004824 <__libc_init_array+0x3c>)
 80047f0:	1b64      	subs	r4, r4, r5
 80047f2:	10a4      	asrs	r4, r4, #2
 80047f4:	42a6      	cmp	r6, r4
 80047f6:	d109      	bne.n	800480c <__libc_init_array+0x24>
 80047f8:	f000 fcc6 	bl	8005188 <_init>
 80047fc:	2600      	movs	r6, #0
 80047fe:	4d0a      	ldr	r5, [pc, #40]	; (8004828 <__libc_init_array+0x40>)
 8004800:	4c0a      	ldr	r4, [pc, #40]	; (800482c <__libc_init_array+0x44>)
 8004802:	1b64      	subs	r4, r4, r5
 8004804:	10a4      	asrs	r4, r4, #2
 8004806:	42a6      	cmp	r6, r4
 8004808:	d105      	bne.n	8004816 <__libc_init_array+0x2e>
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004810:	4798      	blx	r3
 8004812:	3601      	adds	r6, #1
 8004814:	e7ee      	b.n	80047f4 <__libc_init_array+0xc>
 8004816:	f855 3b04 	ldr.w	r3, [r5], #4
 800481a:	4798      	blx	r3
 800481c:	3601      	adds	r6, #1
 800481e:	e7f2      	b.n	8004806 <__libc_init_array+0x1e>
 8004820:	08005330 	.word	0x08005330
 8004824:	08005330 	.word	0x08005330
 8004828:	08005330 	.word	0x08005330
 800482c:	08005334 	.word	0x08005334

08004830 <__retarget_lock_acquire_recursive>:
 8004830:	4770      	bx	lr

08004832 <__retarget_lock_release_recursive>:
 8004832:	4770      	bx	lr

08004834 <memcpy>:
 8004834:	440a      	add	r2, r1
 8004836:	4291      	cmp	r1, r2
 8004838:	f100 33ff 	add.w	r3, r0, #4294967295
 800483c:	d100      	bne.n	8004840 <memcpy+0xc>
 800483e:	4770      	bx	lr
 8004840:	b510      	push	{r4, lr}
 8004842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004846:	4291      	cmp	r1, r2
 8004848:	f803 4f01 	strb.w	r4, [r3, #1]!
 800484c:	d1f9      	bne.n	8004842 <memcpy+0xe>
 800484e:	bd10      	pop	{r4, pc}

08004850 <memset>:
 8004850:	4603      	mov	r3, r0
 8004852:	4402      	add	r2, r0
 8004854:	4293      	cmp	r3, r2
 8004856:	d100      	bne.n	800485a <memset+0xa>
 8004858:	4770      	bx	lr
 800485a:	f803 1b01 	strb.w	r1, [r3], #1
 800485e:	e7f9      	b.n	8004854 <memset+0x4>

08004860 <_malloc_r>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	1ccd      	adds	r5, r1, #3
 8004864:	f025 0503 	bic.w	r5, r5, #3
 8004868:	3508      	adds	r5, #8
 800486a:	2d0c      	cmp	r5, #12
 800486c:	bf38      	it	cc
 800486e:	250c      	movcc	r5, #12
 8004870:	2d00      	cmp	r5, #0
 8004872:	4606      	mov	r6, r0
 8004874:	db01      	blt.n	800487a <_malloc_r+0x1a>
 8004876:	42a9      	cmp	r1, r5
 8004878:	d903      	bls.n	8004882 <_malloc_r+0x22>
 800487a:	230c      	movs	r3, #12
 800487c:	6033      	str	r3, [r6, #0]
 800487e:	2000      	movs	r0, #0
 8004880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004882:	f000 f8e1 	bl	8004a48 <__malloc_lock>
 8004886:	4921      	ldr	r1, [pc, #132]	; (800490c <_malloc_r+0xac>)
 8004888:	680a      	ldr	r2, [r1, #0]
 800488a:	4614      	mov	r4, r2
 800488c:	b99c      	cbnz	r4, 80048b6 <_malloc_r+0x56>
 800488e:	4f20      	ldr	r7, [pc, #128]	; (8004910 <_malloc_r+0xb0>)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	b923      	cbnz	r3, 800489e <_malloc_r+0x3e>
 8004894:	4621      	mov	r1, r4
 8004896:	4630      	mov	r0, r6
 8004898:	f000 f8a6 	bl	80049e8 <_sbrk_r>
 800489c:	6038      	str	r0, [r7, #0]
 800489e:	4629      	mov	r1, r5
 80048a0:	4630      	mov	r0, r6
 80048a2:	f000 f8a1 	bl	80049e8 <_sbrk_r>
 80048a6:	1c43      	adds	r3, r0, #1
 80048a8:	d123      	bne.n	80048f2 <_malloc_r+0x92>
 80048aa:	230c      	movs	r3, #12
 80048ac:	4630      	mov	r0, r6
 80048ae:	6033      	str	r3, [r6, #0]
 80048b0:	f000 f8d0 	bl	8004a54 <__malloc_unlock>
 80048b4:	e7e3      	b.n	800487e <_malloc_r+0x1e>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	1b5b      	subs	r3, r3, r5
 80048ba:	d417      	bmi.n	80048ec <_malloc_r+0x8c>
 80048bc:	2b0b      	cmp	r3, #11
 80048be:	d903      	bls.n	80048c8 <_malloc_r+0x68>
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	441c      	add	r4, r3
 80048c4:	6025      	str	r5, [r4, #0]
 80048c6:	e004      	b.n	80048d2 <_malloc_r+0x72>
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	42a2      	cmp	r2, r4
 80048cc:	bf0c      	ite	eq
 80048ce:	600b      	streq	r3, [r1, #0]
 80048d0:	6053      	strne	r3, [r2, #4]
 80048d2:	4630      	mov	r0, r6
 80048d4:	f000 f8be 	bl	8004a54 <__malloc_unlock>
 80048d8:	f104 000b 	add.w	r0, r4, #11
 80048dc:	1d23      	adds	r3, r4, #4
 80048de:	f020 0007 	bic.w	r0, r0, #7
 80048e2:	1ac2      	subs	r2, r0, r3
 80048e4:	d0cc      	beq.n	8004880 <_malloc_r+0x20>
 80048e6:	1a1b      	subs	r3, r3, r0
 80048e8:	50a3      	str	r3, [r4, r2]
 80048ea:	e7c9      	b.n	8004880 <_malloc_r+0x20>
 80048ec:	4622      	mov	r2, r4
 80048ee:	6864      	ldr	r4, [r4, #4]
 80048f0:	e7cc      	b.n	800488c <_malloc_r+0x2c>
 80048f2:	1cc4      	adds	r4, r0, #3
 80048f4:	f024 0403 	bic.w	r4, r4, #3
 80048f8:	42a0      	cmp	r0, r4
 80048fa:	d0e3      	beq.n	80048c4 <_malloc_r+0x64>
 80048fc:	1a21      	subs	r1, r4, r0
 80048fe:	4630      	mov	r0, r6
 8004900:	f000 f872 	bl	80049e8 <_sbrk_r>
 8004904:	3001      	adds	r0, #1
 8004906:	d1dd      	bne.n	80048c4 <_malloc_r+0x64>
 8004908:	e7cf      	b.n	80048aa <_malloc_r+0x4a>
 800490a:	bf00      	nop
 800490c:	20001494 	.word	0x20001494
 8004910:	20001498 	.word	0x20001498

08004914 <cleanup_glue>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	460c      	mov	r4, r1
 8004918:	6809      	ldr	r1, [r1, #0]
 800491a:	4605      	mov	r5, r0
 800491c:	b109      	cbz	r1, 8004922 <cleanup_glue+0xe>
 800491e:	f7ff fff9 	bl	8004914 <cleanup_glue>
 8004922:	4621      	mov	r1, r4
 8004924:	4628      	mov	r0, r5
 8004926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800492a:	f000 b899 	b.w	8004a60 <_free_r>
	...

08004930 <_reclaim_reent>:
 8004930:	4b2c      	ldr	r3, [pc, #176]	; (80049e4 <_reclaim_reent+0xb4>)
 8004932:	b570      	push	{r4, r5, r6, lr}
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4604      	mov	r4, r0
 8004938:	4283      	cmp	r3, r0
 800493a:	d051      	beq.n	80049e0 <_reclaim_reent+0xb0>
 800493c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800493e:	b143      	cbz	r3, 8004952 <_reclaim_reent+0x22>
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d14a      	bne.n	80049dc <_reclaim_reent+0xac>
 8004946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004948:	6819      	ldr	r1, [r3, #0]
 800494a:	b111      	cbz	r1, 8004952 <_reclaim_reent+0x22>
 800494c:	4620      	mov	r0, r4
 800494e:	f000 f887 	bl	8004a60 <_free_r>
 8004952:	6961      	ldr	r1, [r4, #20]
 8004954:	b111      	cbz	r1, 800495c <_reclaim_reent+0x2c>
 8004956:	4620      	mov	r0, r4
 8004958:	f000 f882 	bl	8004a60 <_free_r>
 800495c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800495e:	b111      	cbz	r1, 8004966 <_reclaim_reent+0x36>
 8004960:	4620      	mov	r0, r4
 8004962:	f000 f87d 	bl	8004a60 <_free_r>
 8004966:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004968:	b111      	cbz	r1, 8004970 <_reclaim_reent+0x40>
 800496a:	4620      	mov	r0, r4
 800496c:	f000 f878 	bl	8004a60 <_free_r>
 8004970:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004972:	b111      	cbz	r1, 800497a <_reclaim_reent+0x4a>
 8004974:	4620      	mov	r0, r4
 8004976:	f000 f873 	bl	8004a60 <_free_r>
 800497a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800497c:	b111      	cbz	r1, 8004984 <_reclaim_reent+0x54>
 800497e:	4620      	mov	r0, r4
 8004980:	f000 f86e 	bl	8004a60 <_free_r>
 8004984:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004986:	b111      	cbz	r1, 800498e <_reclaim_reent+0x5e>
 8004988:	4620      	mov	r0, r4
 800498a:	f000 f869 	bl	8004a60 <_free_r>
 800498e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004990:	b111      	cbz	r1, 8004998 <_reclaim_reent+0x68>
 8004992:	4620      	mov	r0, r4
 8004994:	f000 f864 	bl	8004a60 <_free_r>
 8004998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800499a:	b111      	cbz	r1, 80049a2 <_reclaim_reent+0x72>
 800499c:	4620      	mov	r0, r4
 800499e:	f000 f85f 	bl	8004a60 <_free_r>
 80049a2:	69a3      	ldr	r3, [r4, #24]
 80049a4:	b1e3      	cbz	r3, 80049e0 <_reclaim_reent+0xb0>
 80049a6:	4620      	mov	r0, r4
 80049a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80049aa:	4798      	blx	r3
 80049ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80049ae:	b1b9      	cbz	r1, 80049e0 <_reclaim_reent+0xb0>
 80049b0:	4620      	mov	r0, r4
 80049b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80049b6:	f7ff bfad 	b.w	8004914 <cleanup_glue>
 80049ba:	5949      	ldr	r1, [r1, r5]
 80049bc:	b941      	cbnz	r1, 80049d0 <_reclaim_reent+0xa0>
 80049be:	3504      	adds	r5, #4
 80049c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049c2:	2d80      	cmp	r5, #128	; 0x80
 80049c4:	68d9      	ldr	r1, [r3, #12]
 80049c6:	d1f8      	bne.n	80049ba <_reclaim_reent+0x8a>
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 f849 	bl	8004a60 <_free_r>
 80049ce:	e7ba      	b.n	8004946 <_reclaim_reent+0x16>
 80049d0:	680e      	ldr	r6, [r1, #0]
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 f844 	bl	8004a60 <_free_r>
 80049d8:	4631      	mov	r1, r6
 80049da:	e7ef      	b.n	80049bc <_reclaim_reent+0x8c>
 80049dc:	2500      	movs	r5, #0
 80049de:	e7ef      	b.n	80049c0 <_reclaim_reent+0x90>
 80049e0:	bd70      	pop	{r4, r5, r6, pc}
 80049e2:	bf00      	nop
 80049e4:	20000010 	.word	0x20000010

080049e8 <_sbrk_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	2300      	movs	r3, #0
 80049ec:	4d05      	ldr	r5, [pc, #20]	; (8004a04 <_sbrk_r+0x1c>)
 80049ee:	4604      	mov	r4, r0
 80049f0:	4608      	mov	r0, r1
 80049f2:	602b      	str	r3, [r5, #0]
 80049f4:	f7fb ff3a 	bl	800086c <_sbrk>
 80049f8:	1c43      	adds	r3, r0, #1
 80049fa:	d102      	bne.n	8004a02 <_sbrk_r+0x1a>
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	b103      	cbz	r3, 8004a02 <_sbrk_r+0x1a>
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	bd38      	pop	{r3, r4, r5, pc}
 8004a04:	20001554 	.word	0x20001554

08004a08 <siprintf>:
 8004a08:	b40e      	push	{r1, r2, r3}
 8004a0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a0e:	b500      	push	{lr}
 8004a10:	b09c      	sub	sp, #112	; 0x70
 8004a12:	ab1d      	add	r3, sp, #116	; 0x74
 8004a14:	9002      	str	r0, [sp, #8]
 8004a16:	9006      	str	r0, [sp, #24]
 8004a18:	9107      	str	r1, [sp, #28]
 8004a1a:	9104      	str	r1, [sp, #16]
 8004a1c:	4808      	ldr	r0, [pc, #32]	; (8004a40 <siprintf+0x38>)
 8004a1e:	4909      	ldr	r1, [pc, #36]	; (8004a44 <siprintf+0x3c>)
 8004a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a24:	9105      	str	r1, [sp, #20]
 8004a26:	6800      	ldr	r0, [r0, #0]
 8004a28:	a902      	add	r1, sp, #8
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	f000 f8c0 	bl	8004bb0 <_svfiprintf_r>
 8004a30:	2200      	movs	r2, #0
 8004a32:	9b02      	ldr	r3, [sp, #8]
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	b01c      	add	sp, #112	; 0x70
 8004a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a3c:	b003      	add	sp, #12
 8004a3e:	4770      	bx	lr
 8004a40:	20000010 	.word	0x20000010
 8004a44:	ffff0208 	.word	0xffff0208

08004a48 <__malloc_lock>:
 8004a48:	4801      	ldr	r0, [pc, #4]	; (8004a50 <__malloc_lock+0x8>)
 8004a4a:	f7ff bef1 	b.w	8004830 <__retarget_lock_acquire_recursive>
 8004a4e:	bf00      	nop
 8004a50:	2000154c 	.word	0x2000154c

08004a54 <__malloc_unlock>:
 8004a54:	4801      	ldr	r0, [pc, #4]	; (8004a5c <__malloc_unlock+0x8>)
 8004a56:	f7ff beec 	b.w	8004832 <__retarget_lock_release_recursive>
 8004a5a:	bf00      	nop
 8004a5c:	2000154c 	.word	0x2000154c

08004a60 <_free_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4605      	mov	r5, r0
 8004a64:	2900      	cmp	r1, #0
 8004a66:	d043      	beq.n	8004af0 <_free_r+0x90>
 8004a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a6c:	1f0c      	subs	r4, r1, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bfb8      	it	lt
 8004a72:	18e4      	addlt	r4, r4, r3
 8004a74:	f7ff ffe8 	bl	8004a48 <__malloc_lock>
 8004a78:	4a1e      	ldr	r2, [pc, #120]	; (8004af4 <_free_r+0x94>)
 8004a7a:	6813      	ldr	r3, [r2, #0]
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	b933      	cbnz	r3, 8004a8e <_free_r+0x2e>
 8004a80:	6063      	str	r3, [r4, #4]
 8004a82:	6014      	str	r4, [r2, #0]
 8004a84:	4628      	mov	r0, r5
 8004a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a8a:	f7ff bfe3 	b.w	8004a54 <__malloc_unlock>
 8004a8e:	42a3      	cmp	r3, r4
 8004a90:	d90a      	bls.n	8004aa8 <_free_r+0x48>
 8004a92:	6821      	ldr	r1, [r4, #0]
 8004a94:	1862      	adds	r2, r4, r1
 8004a96:	4293      	cmp	r3, r2
 8004a98:	bf01      	itttt	eq
 8004a9a:	681a      	ldreq	r2, [r3, #0]
 8004a9c:	685b      	ldreq	r3, [r3, #4]
 8004a9e:	1852      	addeq	r2, r2, r1
 8004aa0:	6022      	streq	r2, [r4, #0]
 8004aa2:	6063      	str	r3, [r4, #4]
 8004aa4:	6004      	str	r4, [r0, #0]
 8004aa6:	e7ed      	b.n	8004a84 <_free_r+0x24>
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	b10b      	cbz	r3, 8004ab2 <_free_r+0x52>
 8004aae:	42a3      	cmp	r3, r4
 8004ab0:	d9fa      	bls.n	8004aa8 <_free_r+0x48>
 8004ab2:	6811      	ldr	r1, [r2, #0]
 8004ab4:	1850      	adds	r0, r2, r1
 8004ab6:	42a0      	cmp	r0, r4
 8004ab8:	d10b      	bne.n	8004ad2 <_free_r+0x72>
 8004aba:	6820      	ldr	r0, [r4, #0]
 8004abc:	4401      	add	r1, r0
 8004abe:	1850      	adds	r0, r2, r1
 8004ac0:	4283      	cmp	r3, r0
 8004ac2:	6011      	str	r1, [r2, #0]
 8004ac4:	d1de      	bne.n	8004a84 <_free_r+0x24>
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4401      	add	r1, r0
 8004acc:	6011      	str	r1, [r2, #0]
 8004ace:	6053      	str	r3, [r2, #4]
 8004ad0:	e7d8      	b.n	8004a84 <_free_r+0x24>
 8004ad2:	d902      	bls.n	8004ada <_free_r+0x7a>
 8004ad4:	230c      	movs	r3, #12
 8004ad6:	602b      	str	r3, [r5, #0]
 8004ad8:	e7d4      	b.n	8004a84 <_free_r+0x24>
 8004ada:	6820      	ldr	r0, [r4, #0]
 8004adc:	1821      	adds	r1, r4, r0
 8004ade:	428b      	cmp	r3, r1
 8004ae0:	bf01      	itttt	eq
 8004ae2:	6819      	ldreq	r1, [r3, #0]
 8004ae4:	685b      	ldreq	r3, [r3, #4]
 8004ae6:	1809      	addeq	r1, r1, r0
 8004ae8:	6021      	streq	r1, [r4, #0]
 8004aea:	6063      	str	r3, [r4, #4]
 8004aec:	6054      	str	r4, [r2, #4]
 8004aee:	e7c9      	b.n	8004a84 <_free_r+0x24>
 8004af0:	bd38      	pop	{r3, r4, r5, pc}
 8004af2:	bf00      	nop
 8004af4:	20001494 	.word	0x20001494

08004af8 <__ssputs_r>:
 8004af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004afc:	688e      	ldr	r6, [r1, #8]
 8004afe:	4682      	mov	sl, r0
 8004b00:	429e      	cmp	r6, r3
 8004b02:	460c      	mov	r4, r1
 8004b04:	4690      	mov	r8, r2
 8004b06:	461f      	mov	r7, r3
 8004b08:	d838      	bhi.n	8004b7c <__ssputs_r+0x84>
 8004b0a:	898a      	ldrh	r2, [r1, #12]
 8004b0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b10:	d032      	beq.n	8004b78 <__ssputs_r+0x80>
 8004b12:	6825      	ldr	r5, [r4, #0]
 8004b14:	6909      	ldr	r1, [r1, #16]
 8004b16:	3301      	adds	r3, #1
 8004b18:	eba5 0901 	sub.w	r9, r5, r1
 8004b1c:	6965      	ldr	r5, [r4, #20]
 8004b1e:	444b      	add	r3, r9
 8004b20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b28:	106d      	asrs	r5, r5, #1
 8004b2a:	429d      	cmp	r5, r3
 8004b2c:	bf38      	it	cc
 8004b2e:	461d      	movcc	r5, r3
 8004b30:	0553      	lsls	r3, r2, #21
 8004b32:	d531      	bpl.n	8004b98 <__ssputs_r+0xa0>
 8004b34:	4629      	mov	r1, r5
 8004b36:	f7ff fe93 	bl	8004860 <_malloc_r>
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	b950      	cbnz	r0, 8004b54 <__ssputs_r+0x5c>
 8004b3e:	230c      	movs	r3, #12
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	f8ca 3000 	str.w	r3, [sl]
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b4e:	81a3      	strh	r3, [r4, #12]
 8004b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b54:	464a      	mov	r2, r9
 8004b56:	6921      	ldr	r1, [r4, #16]
 8004b58:	f7ff fe6c 	bl	8004834 <memcpy>
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b66:	81a3      	strh	r3, [r4, #12]
 8004b68:	6126      	str	r6, [r4, #16]
 8004b6a:	444e      	add	r6, r9
 8004b6c:	6026      	str	r6, [r4, #0]
 8004b6e:	463e      	mov	r6, r7
 8004b70:	6165      	str	r5, [r4, #20]
 8004b72:	eba5 0509 	sub.w	r5, r5, r9
 8004b76:	60a5      	str	r5, [r4, #8]
 8004b78:	42be      	cmp	r6, r7
 8004b7a:	d900      	bls.n	8004b7e <__ssputs_r+0x86>
 8004b7c:	463e      	mov	r6, r7
 8004b7e:	4632      	mov	r2, r6
 8004b80:	4641      	mov	r1, r8
 8004b82:	6820      	ldr	r0, [r4, #0]
 8004b84:	f000 fab8 	bl	80050f8 <memmove>
 8004b88:	68a3      	ldr	r3, [r4, #8]
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	1b9b      	subs	r3, r3, r6
 8004b8e:	4432      	add	r2, r6
 8004b90:	2000      	movs	r0, #0
 8004b92:	60a3      	str	r3, [r4, #8]
 8004b94:	6022      	str	r2, [r4, #0]
 8004b96:	e7db      	b.n	8004b50 <__ssputs_r+0x58>
 8004b98:	462a      	mov	r2, r5
 8004b9a:	f000 fac7 	bl	800512c <_realloc_r>
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d1e1      	bne.n	8004b68 <__ssputs_r+0x70>
 8004ba4:	4650      	mov	r0, sl
 8004ba6:	6921      	ldr	r1, [r4, #16]
 8004ba8:	f7ff ff5a 	bl	8004a60 <_free_r>
 8004bac:	e7c7      	b.n	8004b3e <__ssputs_r+0x46>
	...

08004bb0 <_svfiprintf_r>:
 8004bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb4:	4698      	mov	r8, r3
 8004bb6:	898b      	ldrh	r3, [r1, #12]
 8004bb8:	4607      	mov	r7, r0
 8004bba:	061b      	lsls	r3, r3, #24
 8004bbc:	460d      	mov	r5, r1
 8004bbe:	4614      	mov	r4, r2
 8004bc0:	b09d      	sub	sp, #116	; 0x74
 8004bc2:	d50e      	bpl.n	8004be2 <_svfiprintf_r+0x32>
 8004bc4:	690b      	ldr	r3, [r1, #16]
 8004bc6:	b963      	cbnz	r3, 8004be2 <_svfiprintf_r+0x32>
 8004bc8:	2140      	movs	r1, #64	; 0x40
 8004bca:	f7ff fe49 	bl	8004860 <_malloc_r>
 8004bce:	6028      	str	r0, [r5, #0]
 8004bd0:	6128      	str	r0, [r5, #16]
 8004bd2:	b920      	cbnz	r0, 8004bde <_svfiprintf_r+0x2e>
 8004bd4:	230c      	movs	r3, #12
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bdc:	e0d1      	b.n	8004d82 <_svfiprintf_r+0x1d2>
 8004bde:	2340      	movs	r3, #64	; 0x40
 8004be0:	616b      	str	r3, [r5, #20]
 8004be2:	2300      	movs	r3, #0
 8004be4:	9309      	str	r3, [sp, #36]	; 0x24
 8004be6:	2320      	movs	r3, #32
 8004be8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bec:	2330      	movs	r3, #48	; 0x30
 8004bee:	f04f 0901 	mov.w	r9, #1
 8004bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bf6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d9c <_svfiprintf_r+0x1ec>
 8004bfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bfe:	4623      	mov	r3, r4
 8004c00:	469a      	mov	sl, r3
 8004c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c06:	b10a      	cbz	r2, 8004c0c <_svfiprintf_r+0x5c>
 8004c08:	2a25      	cmp	r2, #37	; 0x25
 8004c0a:	d1f9      	bne.n	8004c00 <_svfiprintf_r+0x50>
 8004c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8004c10:	d00b      	beq.n	8004c2a <_svfiprintf_r+0x7a>
 8004c12:	465b      	mov	r3, fp
 8004c14:	4622      	mov	r2, r4
 8004c16:	4629      	mov	r1, r5
 8004c18:	4638      	mov	r0, r7
 8004c1a:	f7ff ff6d 	bl	8004af8 <__ssputs_r>
 8004c1e:	3001      	adds	r0, #1
 8004c20:	f000 80aa 	beq.w	8004d78 <_svfiprintf_r+0x1c8>
 8004c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c26:	445a      	add	r2, fp
 8004c28:	9209      	str	r2, [sp, #36]	; 0x24
 8004c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 80a2 	beq.w	8004d78 <_svfiprintf_r+0x1c8>
 8004c34:	2300      	movs	r3, #0
 8004c36:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c3e:	f10a 0a01 	add.w	sl, sl, #1
 8004c42:	9304      	str	r3, [sp, #16]
 8004c44:	9307      	str	r3, [sp, #28]
 8004c46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c4a:	931a      	str	r3, [sp, #104]	; 0x68
 8004c4c:	4654      	mov	r4, sl
 8004c4e:	2205      	movs	r2, #5
 8004c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c54:	4851      	ldr	r0, [pc, #324]	; (8004d9c <_svfiprintf_r+0x1ec>)
 8004c56:	f000 fa41 	bl	80050dc <memchr>
 8004c5a:	9a04      	ldr	r2, [sp, #16]
 8004c5c:	b9d8      	cbnz	r0, 8004c96 <_svfiprintf_r+0xe6>
 8004c5e:	06d0      	lsls	r0, r2, #27
 8004c60:	bf44      	itt	mi
 8004c62:	2320      	movmi	r3, #32
 8004c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c68:	0711      	lsls	r1, r2, #28
 8004c6a:	bf44      	itt	mi
 8004c6c:	232b      	movmi	r3, #43	; 0x2b
 8004c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c72:	f89a 3000 	ldrb.w	r3, [sl]
 8004c76:	2b2a      	cmp	r3, #42	; 0x2a
 8004c78:	d015      	beq.n	8004ca6 <_svfiprintf_r+0xf6>
 8004c7a:	4654      	mov	r4, sl
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f04f 0c0a 	mov.w	ip, #10
 8004c82:	9a07      	ldr	r2, [sp, #28]
 8004c84:	4621      	mov	r1, r4
 8004c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c8a:	3b30      	subs	r3, #48	; 0x30
 8004c8c:	2b09      	cmp	r3, #9
 8004c8e:	d94e      	bls.n	8004d2e <_svfiprintf_r+0x17e>
 8004c90:	b1b0      	cbz	r0, 8004cc0 <_svfiprintf_r+0x110>
 8004c92:	9207      	str	r2, [sp, #28]
 8004c94:	e014      	b.n	8004cc0 <_svfiprintf_r+0x110>
 8004c96:	eba0 0308 	sub.w	r3, r0, r8
 8004c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	46a2      	mov	sl, r4
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	e7d2      	b.n	8004c4c <_svfiprintf_r+0x9c>
 8004ca6:	9b03      	ldr	r3, [sp, #12]
 8004ca8:	1d19      	adds	r1, r3, #4
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	9103      	str	r1, [sp, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	bfbb      	ittet	lt
 8004cb2:	425b      	neglt	r3, r3
 8004cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8004cb8:	9307      	strge	r3, [sp, #28]
 8004cba:	9307      	strlt	r3, [sp, #28]
 8004cbc:	bfb8      	it	lt
 8004cbe:	9204      	strlt	r2, [sp, #16]
 8004cc0:	7823      	ldrb	r3, [r4, #0]
 8004cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8004cc4:	d10c      	bne.n	8004ce0 <_svfiprintf_r+0x130>
 8004cc6:	7863      	ldrb	r3, [r4, #1]
 8004cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cca:	d135      	bne.n	8004d38 <_svfiprintf_r+0x188>
 8004ccc:	9b03      	ldr	r3, [sp, #12]
 8004cce:	3402      	adds	r4, #2
 8004cd0:	1d1a      	adds	r2, r3, #4
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	9203      	str	r2, [sp, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bfb8      	it	lt
 8004cda:	f04f 33ff 	movlt.w	r3, #4294967295
 8004cde:	9305      	str	r3, [sp, #20]
 8004ce0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004dac <_svfiprintf_r+0x1fc>
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	4650      	mov	r0, sl
 8004ce8:	7821      	ldrb	r1, [r4, #0]
 8004cea:	f000 f9f7 	bl	80050dc <memchr>
 8004cee:	b140      	cbz	r0, 8004d02 <_svfiprintf_r+0x152>
 8004cf0:	2340      	movs	r3, #64	; 0x40
 8004cf2:	eba0 000a 	sub.w	r0, r0, sl
 8004cf6:	fa03 f000 	lsl.w	r0, r3, r0
 8004cfa:	9b04      	ldr	r3, [sp, #16]
 8004cfc:	3401      	adds	r4, #1
 8004cfe:	4303      	orrs	r3, r0
 8004d00:	9304      	str	r3, [sp, #16]
 8004d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d06:	2206      	movs	r2, #6
 8004d08:	4825      	ldr	r0, [pc, #148]	; (8004da0 <_svfiprintf_r+0x1f0>)
 8004d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d0e:	f000 f9e5 	bl	80050dc <memchr>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d038      	beq.n	8004d88 <_svfiprintf_r+0x1d8>
 8004d16:	4b23      	ldr	r3, [pc, #140]	; (8004da4 <_svfiprintf_r+0x1f4>)
 8004d18:	bb1b      	cbnz	r3, 8004d62 <_svfiprintf_r+0x1b2>
 8004d1a:	9b03      	ldr	r3, [sp, #12]
 8004d1c:	3307      	adds	r3, #7
 8004d1e:	f023 0307 	bic.w	r3, r3, #7
 8004d22:	3308      	adds	r3, #8
 8004d24:	9303      	str	r3, [sp, #12]
 8004d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d28:	4433      	add	r3, r6
 8004d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d2c:	e767      	b.n	8004bfe <_svfiprintf_r+0x4e>
 8004d2e:	460c      	mov	r4, r1
 8004d30:	2001      	movs	r0, #1
 8004d32:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d36:	e7a5      	b.n	8004c84 <_svfiprintf_r+0xd4>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f04f 0c0a 	mov.w	ip, #10
 8004d3e:	4619      	mov	r1, r3
 8004d40:	3401      	adds	r4, #1
 8004d42:	9305      	str	r3, [sp, #20]
 8004d44:	4620      	mov	r0, r4
 8004d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d4a:	3a30      	subs	r2, #48	; 0x30
 8004d4c:	2a09      	cmp	r2, #9
 8004d4e:	d903      	bls.n	8004d58 <_svfiprintf_r+0x1a8>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0c5      	beq.n	8004ce0 <_svfiprintf_r+0x130>
 8004d54:	9105      	str	r1, [sp, #20]
 8004d56:	e7c3      	b.n	8004ce0 <_svfiprintf_r+0x130>
 8004d58:	4604      	mov	r4, r0
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d60:	e7f0      	b.n	8004d44 <_svfiprintf_r+0x194>
 8004d62:	ab03      	add	r3, sp, #12
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	462a      	mov	r2, r5
 8004d68:	4638      	mov	r0, r7
 8004d6a:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <_svfiprintf_r+0x1f8>)
 8004d6c:	a904      	add	r1, sp, #16
 8004d6e:	f3af 8000 	nop.w
 8004d72:	1c42      	adds	r2, r0, #1
 8004d74:	4606      	mov	r6, r0
 8004d76:	d1d6      	bne.n	8004d26 <_svfiprintf_r+0x176>
 8004d78:	89ab      	ldrh	r3, [r5, #12]
 8004d7a:	065b      	lsls	r3, r3, #25
 8004d7c:	f53f af2c 	bmi.w	8004bd8 <_svfiprintf_r+0x28>
 8004d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d82:	b01d      	add	sp, #116	; 0x74
 8004d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d88:	ab03      	add	r3, sp, #12
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	462a      	mov	r2, r5
 8004d8e:	4638      	mov	r0, r7
 8004d90:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <_svfiprintf_r+0x1f8>)
 8004d92:	a904      	add	r1, sp, #16
 8004d94:	f000 f87c 	bl	8004e90 <_printf_i>
 8004d98:	e7eb      	b.n	8004d72 <_svfiprintf_r+0x1c2>
 8004d9a:	bf00      	nop
 8004d9c:	080052fc 	.word	0x080052fc
 8004da0:	08005306 	.word	0x08005306
 8004da4:	00000000 	.word	0x00000000
 8004da8:	08004af9 	.word	0x08004af9
 8004dac:	08005302 	.word	0x08005302

08004db0 <_printf_common>:
 8004db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db4:	4616      	mov	r6, r2
 8004db6:	4699      	mov	r9, r3
 8004db8:	688a      	ldr	r2, [r1, #8]
 8004dba:	690b      	ldr	r3, [r1, #16]
 8004dbc:	4607      	mov	r7, r0
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	bfb8      	it	lt
 8004dc2:	4613      	movlt	r3, r2
 8004dc4:	6033      	str	r3, [r6, #0]
 8004dc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dca:	460c      	mov	r4, r1
 8004dcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dd0:	b10a      	cbz	r2, 8004dd6 <_printf_common+0x26>
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	6033      	str	r3, [r6, #0]
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	0699      	lsls	r1, r3, #26
 8004dda:	bf42      	ittt	mi
 8004ddc:	6833      	ldrmi	r3, [r6, #0]
 8004dde:	3302      	addmi	r3, #2
 8004de0:	6033      	strmi	r3, [r6, #0]
 8004de2:	6825      	ldr	r5, [r4, #0]
 8004de4:	f015 0506 	ands.w	r5, r5, #6
 8004de8:	d106      	bne.n	8004df8 <_printf_common+0x48>
 8004dea:	f104 0a19 	add.w	sl, r4, #25
 8004dee:	68e3      	ldr	r3, [r4, #12]
 8004df0:	6832      	ldr	r2, [r6, #0]
 8004df2:	1a9b      	subs	r3, r3, r2
 8004df4:	42ab      	cmp	r3, r5
 8004df6:	dc28      	bgt.n	8004e4a <_printf_common+0x9a>
 8004df8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dfc:	1e13      	subs	r3, r2, #0
 8004dfe:	6822      	ldr	r2, [r4, #0]
 8004e00:	bf18      	it	ne
 8004e02:	2301      	movne	r3, #1
 8004e04:	0692      	lsls	r2, r2, #26
 8004e06:	d42d      	bmi.n	8004e64 <_printf_common+0xb4>
 8004e08:	4649      	mov	r1, r9
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e10:	47c0      	blx	r8
 8004e12:	3001      	adds	r0, #1
 8004e14:	d020      	beq.n	8004e58 <_printf_common+0xa8>
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	68e5      	ldr	r5, [r4, #12]
 8004e1a:	f003 0306 	and.w	r3, r3, #6
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	bf18      	it	ne
 8004e22:	2500      	movne	r5, #0
 8004e24:	6832      	ldr	r2, [r6, #0]
 8004e26:	f04f 0600 	mov.w	r6, #0
 8004e2a:	68a3      	ldr	r3, [r4, #8]
 8004e2c:	bf08      	it	eq
 8004e2e:	1aad      	subeq	r5, r5, r2
 8004e30:	6922      	ldr	r2, [r4, #16]
 8004e32:	bf08      	it	eq
 8004e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	bfc4      	itt	gt
 8004e3c:	1a9b      	subgt	r3, r3, r2
 8004e3e:	18ed      	addgt	r5, r5, r3
 8004e40:	341a      	adds	r4, #26
 8004e42:	42b5      	cmp	r5, r6
 8004e44:	d11a      	bne.n	8004e7c <_printf_common+0xcc>
 8004e46:	2000      	movs	r0, #0
 8004e48:	e008      	b.n	8004e5c <_printf_common+0xac>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	4652      	mov	r2, sl
 8004e4e:	4649      	mov	r1, r9
 8004e50:	4638      	mov	r0, r7
 8004e52:	47c0      	blx	r8
 8004e54:	3001      	adds	r0, #1
 8004e56:	d103      	bne.n	8004e60 <_printf_common+0xb0>
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e60:	3501      	adds	r5, #1
 8004e62:	e7c4      	b.n	8004dee <_printf_common+0x3e>
 8004e64:	2030      	movs	r0, #48	; 0x30
 8004e66:	18e1      	adds	r1, r4, r3
 8004e68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e72:	4422      	add	r2, r4
 8004e74:	3302      	adds	r3, #2
 8004e76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e7a:	e7c5      	b.n	8004e08 <_printf_common+0x58>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4622      	mov	r2, r4
 8004e80:	4649      	mov	r1, r9
 8004e82:	4638      	mov	r0, r7
 8004e84:	47c0      	blx	r8
 8004e86:	3001      	adds	r0, #1
 8004e88:	d0e6      	beq.n	8004e58 <_printf_common+0xa8>
 8004e8a:	3601      	adds	r6, #1
 8004e8c:	e7d9      	b.n	8004e42 <_printf_common+0x92>
	...

08004e90 <_printf_i>:
 8004e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e94:	460c      	mov	r4, r1
 8004e96:	7e27      	ldrb	r7, [r4, #24]
 8004e98:	4691      	mov	r9, r2
 8004e9a:	2f78      	cmp	r7, #120	; 0x78
 8004e9c:	4680      	mov	r8, r0
 8004e9e:	469a      	mov	sl, r3
 8004ea0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ea2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ea6:	d807      	bhi.n	8004eb8 <_printf_i+0x28>
 8004ea8:	2f62      	cmp	r7, #98	; 0x62
 8004eaa:	d80a      	bhi.n	8004ec2 <_printf_i+0x32>
 8004eac:	2f00      	cmp	r7, #0
 8004eae:	f000 80d9 	beq.w	8005064 <_printf_i+0x1d4>
 8004eb2:	2f58      	cmp	r7, #88	; 0x58
 8004eb4:	f000 80a4 	beq.w	8005000 <_printf_i+0x170>
 8004eb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ec0:	e03a      	b.n	8004f38 <_printf_i+0xa8>
 8004ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ec6:	2b15      	cmp	r3, #21
 8004ec8:	d8f6      	bhi.n	8004eb8 <_printf_i+0x28>
 8004eca:	a001      	add	r0, pc, #4	; (adr r0, 8004ed0 <_printf_i+0x40>)
 8004ecc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ed0:	08004f29 	.word	0x08004f29
 8004ed4:	08004f3d 	.word	0x08004f3d
 8004ed8:	08004eb9 	.word	0x08004eb9
 8004edc:	08004eb9 	.word	0x08004eb9
 8004ee0:	08004eb9 	.word	0x08004eb9
 8004ee4:	08004eb9 	.word	0x08004eb9
 8004ee8:	08004f3d 	.word	0x08004f3d
 8004eec:	08004eb9 	.word	0x08004eb9
 8004ef0:	08004eb9 	.word	0x08004eb9
 8004ef4:	08004eb9 	.word	0x08004eb9
 8004ef8:	08004eb9 	.word	0x08004eb9
 8004efc:	0800504b 	.word	0x0800504b
 8004f00:	08004f6d 	.word	0x08004f6d
 8004f04:	0800502d 	.word	0x0800502d
 8004f08:	08004eb9 	.word	0x08004eb9
 8004f0c:	08004eb9 	.word	0x08004eb9
 8004f10:	0800506d 	.word	0x0800506d
 8004f14:	08004eb9 	.word	0x08004eb9
 8004f18:	08004f6d 	.word	0x08004f6d
 8004f1c:	08004eb9 	.word	0x08004eb9
 8004f20:	08004eb9 	.word	0x08004eb9
 8004f24:	08005035 	.word	0x08005035
 8004f28:	680b      	ldr	r3, [r1, #0]
 8004f2a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f2e:	1d1a      	adds	r2, r3, #4
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	600a      	str	r2, [r1, #0]
 8004f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0a4      	b.n	8005086 <_printf_i+0x1f6>
 8004f3c:	6825      	ldr	r5, [r4, #0]
 8004f3e:	6808      	ldr	r0, [r1, #0]
 8004f40:	062e      	lsls	r6, r5, #24
 8004f42:	f100 0304 	add.w	r3, r0, #4
 8004f46:	d50a      	bpl.n	8004f5e <_printf_i+0xce>
 8004f48:	6805      	ldr	r5, [r0, #0]
 8004f4a:	600b      	str	r3, [r1, #0]
 8004f4c:	2d00      	cmp	r5, #0
 8004f4e:	da03      	bge.n	8004f58 <_printf_i+0xc8>
 8004f50:	232d      	movs	r3, #45	; 0x2d
 8004f52:	426d      	negs	r5, r5
 8004f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f58:	230a      	movs	r3, #10
 8004f5a:	485e      	ldr	r0, [pc, #376]	; (80050d4 <_printf_i+0x244>)
 8004f5c:	e019      	b.n	8004f92 <_printf_i+0x102>
 8004f5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f62:	6805      	ldr	r5, [r0, #0]
 8004f64:	600b      	str	r3, [r1, #0]
 8004f66:	bf18      	it	ne
 8004f68:	b22d      	sxthne	r5, r5
 8004f6a:	e7ef      	b.n	8004f4c <_printf_i+0xbc>
 8004f6c:	680b      	ldr	r3, [r1, #0]
 8004f6e:	6825      	ldr	r5, [r4, #0]
 8004f70:	1d18      	adds	r0, r3, #4
 8004f72:	6008      	str	r0, [r1, #0]
 8004f74:	0628      	lsls	r0, r5, #24
 8004f76:	d501      	bpl.n	8004f7c <_printf_i+0xec>
 8004f78:	681d      	ldr	r5, [r3, #0]
 8004f7a:	e002      	b.n	8004f82 <_printf_i+0xf2>
 8004f7c:	0669      	lsls	r1, r5, #25
 8004f7e:	d5fb      	bpl.n	8004f78 <_printf_i+0xe8>
 8004f80:	881d      	ldrh	r5, [r3, #0]
 8004f82:	2f6f      	cmp	r7, #111	; 0x6f
 8004f84:	bf0c      	ite	eq
 8004f86:	2308      	moveq	r3, #8
 8004f88:	230a      	movne	r3, #10
 8004f8a:	4852      	ldr	r0, [pc, #328]	; (80050d4 <_printf_i+0x244>)
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f92:	6866      	ldr	r6, [r4, #4]
 8004f94:	2e00      	cmp	r6, #0
 8004f96:	bfa8      	it	ge
 8004f98:	6821      	ldrge	r1, [r4, #0]
 8004f9a:	60a6      	str	r6, [r4, #8]
 8004f9c:	bfa4      	itt	ge
 8004f9e:	f021 0104 	bicge.w	r1, r1, #4
 8004fa2:	6021      	strge	r1, [r4, #0]
 8004fa4:	b90d      	cbnz	r5, 8004faa <_printf_i+0x11a>
 8004fa6:	2e00      	cmp	r6, #0
 8004fa8:	d04d      	beq.n	8005046 <_printf_i+0x1b6>
 8004faa:	4616      	mov	r6, r2
 8004fac:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fb0:	fb03 5711 	mls	r7, r3, r1, r5
 8004fb4:	5dc7      	ldrb	r7, [r0, r7]
 8004fb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fba:	462f      	mov	r7, r5
 8004fbc:	42bb      	cmp	r3, r7
 8004fbe:	460d      	mov	r5, r1
 8004fc0:	d9f4      	bls.n	8004fac <_printf_i+0x11c>
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d10b      	bne.n	8004fde <_printf_i+0x14e>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	07df      	lsls	r7, r3, #31
 8004fca:	d508      	bpl.n	8004fde <_printf_i+0x14e>
 8004fcc:	6923      	ldr	r3, [r4, #16]
 8004fce:	6861      	ldr	r1, [r4, #4]
 8004fd0:	4299      	cmp	r1, r3
 8004fd2:	bfde      	ittt	le
 8004fd4:	2330      	movle	r3, #48	; 0x30
 8004fd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fde:	1b92      	subs	r2, r2, r6
 8004fe0:	6122      	str	r2, [r4, #16]
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	4640      	mov	r0, r8
 8004fe8:	f8cd a000 	str.w	sl, [sp]
 8004fec:	aa03      	add	r2, sp, #12
 8004fee:	f7ff fedf 	bl	8004db0 <_printf_common>
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	d14c      	bne.n	8005090 <_printf_i+0x200>
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffa:	b004      	add	sp, #16
 8004ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005000:	4834      	ldr	r0, [pc, #208]	; (80050d4 <_printf_i+0x244>)
 8005002:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005006:	680e      	ldr	r6, [r1, #0]
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	f856 5b04 	ldr.w	r5, [r6], #4
 800500e:	061f      	lsls	r7, r3, #24
 8005010:	600e      	str	r6, [r1, #0]
 8005012:	d514      	bpl.n	800503e <_printf_i+0x1ae>
 8005014:	07d9      	lsls	r1, r3, #31
 8005016:	bf44      	itt	mi
 8005018:	f043 0320 	orrmi.w	r3, r3, #32
 800501c:	6023      	strmi	r3, [r4, #0]
 800501e:	b91d      	cbnz	r5, 8005028 <_printf_i+0x198>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	f023 0320 	bic.w	r3, r3, #32
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	2310      	movs	r3, #16
 800502a:	e7af      	b.n	8004f8c <_printf_i+0xfc>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	f043 0320 	orr.w	r3, r3, #32
 8005032:	6023      	str	r3, [r4, #0]
 8005034:	2378      	movs	r3, #120	; 0x78
 8005036:	4828      	ldr	r0, [pc, #160]	; (80050d8 <_printf_i+0x248>)
 8005038:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800503c:	e7e3      	b.n	8005006 <_printf_i+0x176>
 800503e:	065e      	lsls	r6, r3, #25
 8005040:	bf48      	it	mi
 8005042:	b2ad      	uxthmi	r5, r5
 8005044:	e7e6      	b.n	8005014 <_printf_i+0x184>
 8005046:	4616      	mov	r6, r2
 8005048:	e7bb      	b.n	8004fc2 <_printf_i+0x132>
 800504a:	680b      	ldr	r3, [r1, #0]
 800504c:	6826      	ldr	r6, [r4, #0]
 800504e:	1d1d      	adds	r5, r3, #4
 8005050:	6960      	ldr	r0, [r4, #20]
 8005052:	600d      	str	r5, [r1, #0]
 8005054:	0635      	lsls	r5, r6, #24
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	d501      	bpl.n	800505e <_printf_i+0x1ce>
 800505a:	6018      	str	r0, [r3, #0]
 800505c:	e002      	b.n	8005064 <_printf_i+0x1d4>
 800505e:	0671      	lsls	r1, r6, #25
 8005060:	d5fb      	bpl.n	800505a <_printf_i+0x1ca>
 8005062:	8018      	strh	r0, [r3, #0]
 8005064:	2300      	movs	r3, #0
 8005066:	4616      	mov	r6, r2
 8005068:	6123      	str	r3, [r4, #16]
 800506a:	e7ba      	b.n	8004fe2 <_printf_i+0x152>
 800506c:	680b      	ldr	r3, [r1, #0]
 800506e:	1d1a      	adds	r2, r3, #4
 8005070:	600a      	str	r2, [r1, #0]
 8005072:	681e      	ldr	r6, [r3, #0]
 8005074:	2100      	movs	r1, #0
 8005076:	4630      	mov	r0, r6
 8005078:	6862      	ldr	r2, [r4, #4]
 800507a:	f000 f82f 	bl	80050dc <memchr>
 800507e:	b108      	cbz	r0, 8005084 <_printf_i+0x1f4>
 8005080:	1b80      	subs	r0, r0, r6
 8005082:	6060      	str	r0, [r4, #4]
 8005084:	6863      	ldr	r3, [r4, #4]
 8005086:	6123      	str	r3, [r4, #16]
 8005088:	2300      	movs	r3, #0
 800508a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800508e:	e7a8      	b.n	8004fe2 <_printf_i+0x152>
 8005090:	4632      	mov	r2, r6
 8005092:	4649      	mov	r1, r9
 8005094:	4640      	mov	r0, r8
 8005096:	6923      	ldr	r3, [r4, #16]
 8005098:	47d0      	blx	sl
 800509a:	3001      	adds	r0, #1
 800509c:	d0ab      	beq.n	8004ff6 <_printf_i+0x166>
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	079b      	lsls	r3, r3, #30
 80050a2:	d413      	bmi.n	80050cc <_printf_i+0x23c>
 80050a4:	68e0      	ldr	r0, [r4, #12]
 80050a6:	9b03      	ldr	r3, [sp, #12]
 80050a8:	4298      	cmp	r0, r3
 80050aa:	bfb8      	it	lt
 80050ac:	4618      	movlt	r0, r3
 80050ae:	e7a4      	b.n	8004ffa <_printf_i+0x16a>
 80050b0:	2301      	movs	r3, #1
 80050b2:	4632      	mov	r2, r6
 80050b4:	4649      	mov	r1, r9
 80050b6:	4640      	mov	r0, r8
 80050b8:	47d0      	blx	sl
 80050ba:	3001      	adds	r0, #1
 80050bc:	d09b      	beq.n	8004ff6 <_printf_i+0x166>
 80050be:	3501      	adds	r5, #1
 80050c0:	68e3      	ldr	r3, [r4, #12]
 80050c2:	9903      	ldr	r1, [sp, #12]
 80050c4:	1a5b      	subs	r3, r3, r1
 80050c6:	42ab      	cmp	r3, r5
 80050c8:	dcf2      	bgt.n	80050b0 <_printf_i+0x220>
 80050ca:	e7eb      	b.n	80050a4 <_printf_i+0x214>
 80050cc:	2500      	movs	r5, #0
 80050ce:	f104 0619 	add.w	r6, r4, #25
 80050d2:	e7f5      	b.n	80050c0 <_printf_i+0x230>
 80050d4:	0800530d 	.word	0x0800530d
 80050d8:	0800531e 	.word	0x0800531e

080050dc <memchr>:
 80050dc:	4603      	mov	r3, r0
 80050de:	b510      	push	{r4, lr}
 80050e0:	b2c9      	uxtb	r1, r1
 80050e2:	4402      	add	r2, r0
 80050e4:	4293      	cmp	r3, r2
 80050e6:	4618      	mov	r0, r3
 80050e8:	d101      	bne.n	80050ee <memchr+0x12>
 80050ea:	2000      	movs	r0, #0
 80050ec:	e003      	b.n	80050f6 <memchr+0x1a>
 80050ee:	7804      	ldrb	r4, [r0, #0]
 80050f0:	3301      	adds	r3, #1
 80050f2:	428c      	cmp	r4, r1
 80050f4:	d1f6      	bne.n	80050e4 <memchr+0x8>
 80050f6:	bd10      	pop	{r4, pc}

080050f8 <memmove>:
 80050f8:	4288      	cmp	r0, r1
 80050fa:	b510      	push	{r4, lr}
 80050fc:	eb01 0402 	add.w	r4, r1, r2
 8005100:	d902      	bls.n	8005108 <memmove+0x10>
 8005102:	4284      	cmp	r4, r0
 8005104:	4623      	mov	r3, r4
 8005106:	d807      	bhi.n	8005118 <memmove+0x20>
 8005108:	1e43      	subs	r3, r0, #1
 800510a:	42a1      	cmp	r1, r4
 800510c:	d008      	beq.n	8005120 <memmove+0x28>
 800510e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005112:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005116:	e7f8      	b.n	800510a <memmove+0x12>
 8005118:	4601      	mov	r1, r0
 800511a:	4402      	add	r2, r0
 800511c:	428a      	cmp	r2, r1
 800511e:	d100      	bne.n	8005122 <memmove+0x2a>
 8005120:	bd10      	pop	{r4, pc}
 8005122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800512a:	e7f7      	b.n	800511c <memmove+0x24>

0800512c <_realloc_r>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	4607      	mov	r7, r0
 8005130:	4614      	mov	r4, r2
 8005132:	460e      	mov	r6, r1
 8005134:	b921      	cbnz	r1, 8005140 <_realloc_r+0x14>
 8005136:	4611      	mov	r1, r2
 8005138:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800513c:	f7ff bb90 	b.w	8004860 <_malloc_r>
 8005140:	b922      	cbnz	r2, 800514c <_realloc_r+0x20>
 8005142:	f7ff fc8d 	bl	8004a60 <_free_r>
 8005146:	4625      	mov	r5, r4
 8005148:	4628      	mov	r0, r5
 800514a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800514c:	f000 f814 	bl	8005178 <_malloc_usable_size_r>
 8005150:	42a0      	cmp	r0, r4
 8005152:	d20f      	bcs.n	8005174 <_realloc_r+0x48>
 8005154:	4621      	mov	r1, r4
 8005156:	4638      	mov	r0, r7
 8005158:	f7ff fb82 	bl	8004860 <_malloc_r>
 800515c:	4605      	mov	r5, r0
 800515e:	2800      	cmp	r0, #0
 8005160:	d0f2      	beq.n	8005148 <_realloc_r+0x1c>
 8005162:	4631      	mov	r1, r6
 8005164:	4622      	mov	r2, r4
 8005166:	f7ff fb65 	bl	8004834 <memcpy>
 800516a:	4631      	mov	r1, r6
 800516c:	4638      	mov	r0, r7
 800516e:	f7ff fc77 	bl	8004a60 <_free_r>
 8005172:	e7e9      	b.n	8005148 <_realloc_r+0x1c>
 8005174:	4635      	mov	r5, r6
 8005176:	e7e7      	b.n	8005148 <_realloc_r+0x1c>

08005178 <_malloc_usable_size_r>:
 8005178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800517c:	1f18      	subs	r0, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	bfbc      	itt	lt
 8005182:	580b      	ldrlt	r3, [r1, r0]
 8005184:	18c0      	addlt	r0, r0, r3
 8005186:	4770      	bx	lr

08005188 <_init>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	bf00      	nop
 800518c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518e:	bc08      	pop	{r3}
 8005190:	469e      	mov	lr, r3
 8005192:	4770      	bx	lr

08005194 <_fini>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr
