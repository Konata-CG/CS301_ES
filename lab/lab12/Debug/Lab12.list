
Lab12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d50  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005078  08005078  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005078  08005078  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005078  08005078  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800507c  0800507c  0001507c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010d8  20000074  080050f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000114c  080050f4  0002114c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153c1  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e1  00000000  00000000  0003545e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00038540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00039668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b072  00000000  00000000  0003a678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012019  00000000  00000000  000556ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a06a7  00000000  00000000  00067703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107daa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c38  00000000  00000000  00107e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	08004f28 	.word	0x08004f28

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	08004f28 	.word	0x08004f28

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000090 	.word	0x20000090
 800026c:	20000144 	.word	0x20000144

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b5b0      	push	{r4, r5, r7, lr}
 8000272:	b096      	sub	sp, #88	; 0x58
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 facb 	bl	8000810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f859 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f8c7 	bl	8000410 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000282:	f000 f89b 	bl	80003bc <MX_USART1_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000286:	4b23      	ldr	r3, [pc, #140]	; (8000314 <main+0xa4>)
 8000288:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800028c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800028e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000292:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000296:	2100      	movs	r1, #0
 8000298:	4618      	mov	r0, r3
 800029a:	f001 ff5f 	bl	800215c <osMessageCreate>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a1d      	ldr	r2, [pc, #116]	; (8000318 <main+0xa8>)
 80002a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMailQDef(mail01, 4, mailStruct);
 80002a4:	2304      	movs	r3, #4
 80002a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80002a8:	2302      	movs	r3, #2
 80002aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80002ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002b0:	643b      	str	r3, [r7, #64]	; 0x40
  mail01Handle = osMailCreate(osMailQ(mail01), NULL);
 80002b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002b6:	2100      	movs	r1, #0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 ff77 	bl	80021ac <osMailCreate>
 80002be:	4603      	mov	r3, r0
 80002c0:	4a16      	ldr	r2, [pc, #88]	; (800031c <main+0xac>)
 80002c2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MsgProducer */
  osThreadDef(MsgProducer, MsgProducerTask, osPriorityNormal, 0, 128);
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <main+0xb0>)
 80002c6:	f107 041c 	add.w	r4, r7, #28
 80002ca:	461d      	mov	r5, r3
 80002cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MsgProducerHandle = osThreadCreate(osThread(MsgProducer), NULL);
 80002d8:	f107 031c 	add.w	r3, r7, #28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 fddd 	bl	8001e9e <osThreadCreate>
 80002e4:	4603      	mov	r3, r0
 80002e6:	4a0f      	ldr	r2, [pc, #60]	; (8000324 <main+0xb4>)
 80002e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of MsgConsumer */
  osThreadDef(MsgConsumer, MsgConsumerTask, osPriorityNormal, 0, 128);
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <main+0xb8>)
 80002ec:	463c      	mov	r4, r7
 80002ee:	461d      	mov	r5, r3
 80002f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MsgConsumerHandle = osThreadCreate(osThread(MsgConsumer), NULL);
 80002fc:	463b      	mov	r3, r7
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f001 fdcc 	bl	8001e9e <osThreadCreate>
 8000306:	4603      	mov	r3, r0
 8000308:	4a08      	ldr	r2, [pc, #32]	; (800032c <main+0xbc>)
 800030a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800030c:	f001 fdc0 	bl	8001e90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000310:	e7fe      	b.n	8000310 <main+0xa0>
 8000312:	bf00      	nop
 8000314:	08004f58 	.word	0x08004f58
 8000318:	200010ec 	.word	0x200010ec
 800031c:	200010e8 	.word	0x200010e8
 8000320:	08004f68 	.word	0x08004f68
 8000324:	200010a0 	.word	0x200010a0
 8000328:	08004f84 	.word	0x08004f84
 800032c:	2000109c 	.word	0x2000109c

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b090      	sub	sp, #64	; 0x40
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0318 	add.w	r3, r7, #24
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f004 f956 	bl	80045f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000352:	2301      	movs	r3, #1
 8000354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000360:	2301      	movs	r3, #1
 8000362:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000364:	2302      	movs	r3, #2
 8000366:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000372:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000374:	f107 0318 	add.w	r3, r7, #24
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fcef 	bl	8000d5c <HAL_RCC_OscConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000384:	f000 f8e0 	bl	8000548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000388:	230f      	movs	r3, #15
 800038a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038c:	2302      	movs	r3, #2
 800038e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2102      	movs	r1, #2
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 ff5a 	bl	800125c <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ae:	f000 f8cb 	bl	8000548 <Error_Handler>
  }
}
 80003b2:	bf00      	nop
 80003b4:	3740      	adds	r7, #64	; 0x40
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003c2:	4a12      	ldr	r2, [pc, #72]	; (800040c <MX_USART1_UART_Init+0x50>)
 80003c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_USART1_UART_Init+0x4c>)
 80003f4:	f001 fb6c 	bl	8001ad0 <HAL_UART_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003fe:	f000 f8a3 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	200010a4 	.word	0x200010a4
 800040c:	40013800 	.word	0x40013800

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_GPIO_Init+0x40>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <MX_GPIO_Init+0x40>)
 800041c:	f043 0320 	orr.w	r3, r3, #32
 8000420:	6193      	str	r3, [r2, #24]
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <MX_GPIO_Init+0x40>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0320 	and.w	r3, r3, #32
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_GPIO_Init+0x40>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a07      	ldr	r2, [pc, #28]	; (8000450 <MX_GPIO_Init+0x40>)
 8000434:	f043 0304 	orr.w	r3, r3, #4
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <MX_GPIO_Init+0x40>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0304 	and.w	r3, r3, #4
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]

}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000

08000454 <MsgProducerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MsgProducerTask */
void MsgProducerTask(void const * argument)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  mailStruct * mail;
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 800045c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000460:	f001 fd69 	bl	8001f36 <osDelay>
	  mail = (mailStruct *)osMailAlloc(mail01Handle, osWaitForever);
 8000464:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MsgProducerTask+0x60>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f04f 31ff 	mov.w	r1, #4294967295
 800046c:	4618      	mov	r0, r3
 800046e:	f001 fef5 	bl	800225c <osMailAlloc>
 8000472:	60f8      	str	r0, [r7, #12]
	  mail->var = 1;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	2201      	movs	r2, #1
 8000478:	801a      	strh	r2, [r3, #0]
	  osMailPut(mail01Handle, mail);
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MsgProducerTask+0x60>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	68f9      	ldr	r1, [r7, #12]
 8000480:	4618      	mov	r0, r3
 8000482:	f001 ff01 	bl	8002288 <osMailPut>
	  osDelay(2000);
 8000486:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800048a:	f001 fd54 	bl	8001f36 <osDelay>
	  mail = (mailStruct *)osMailAlloc(mail01Handle, osWaitForever);
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MsgProducerTask+0x60>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f04f 31ff 	mov.w	r1, #4294967295
 8000496:	4618      	mov	r0, r3
 8000498:	f001 fee0 	bl	800225c <osMailAlloc>
 800049c:	60f8      	str	r0, [r7, #12]
	  mail->var = 2;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	2202      	movs	r2, #2
 80004a2:	801a      	strh	r2, [r3, #0]
	  osMailPut(mail01Handle, mail);
 80004a4:	4b03      	ldr	r3, [pc, #12]	; (80004b4 <MsgProducerTask+0x60>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	68f9      	ldr	r1, [r7, #12]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 feec 	bl	8002288 <osMailPut>
	  osDelay(1000);
 80004b0:	e7d4      	b.n	800045c <MsgProducerTask+0x8>
 80004b2:	bf00      	nop
 80004b4:	200010e8 	.word	0x200010e8

080004b8 <MsgConsumerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MsgConsumerTask */
void MsgConsumerTask(void const * argument)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08c      	sub	sp, #48	; 0x30
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  mailStruct * pMail;
  char msg[20];
  /* Infinite loop */
  for(;;)
  {
	  event = osMailGet(mail01Handle, osWaitForever);
 80004c0:	4b15      	ldr	r3, [pc, #84]	; (8000518 <MsgConsumerTask+0x60>)
 80004c2:	6819      	ldr	r1, [r3, #0]
 80004c4:	f107 0320 	add.w	r3, r7, #32
 80004c8:	f04f 32ff 	mov.w	r2, #4294967295
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 ff19 	bl	8002304 <osMailGet>
	  if (event.status == osEventMail)
 80004d2:	6a3b      	ldr	r3, [r7, #32]
 80004d4:	2b20      	cmp	r3, #32
 80004d6:	d1f3      	bne.n	80004c0 <MsgConsumerTask+0x8>
	  {
		  pMail = event.value.p;
 80004d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004da:	62fb      	str	r3, [r7, #44]	; 0x2c
		  sprintf(msg, "Mail value: %d\r\n", pMail->var);
 80004dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	490d      	ldr	r1, [pc, #52]	; (800051c <MsgConsumerTask+0x64>)
 80004e8:	4618      	mov	r0, r3
 80004ea:	f004 f95d 	bl	80047a8 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fe9c 	bl	8000230 <strlen>
 80004f8:	4603      	mov	r3, r0
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	f107 010c 	add.w	r1, r7, #12
 8000500:	f04f 33ff 	mov.w	r3, #4294967295
 8000504:	4806      	ldr	r0, [pc, #24]	; (8000520 <MsgConsumerTask+0x68>)
 8000506:	f001 fb30 	bl	8001b6a <HAL_UART_Transmit>
		  osMailFree(mail01Handle, pMail);
 800050a:	4b03      	ldr	r3, [pc, #12]	; (8000518 <MsgConsumerTask+0x60>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000510:	4618      	mov	r0, r3
 8000512:	f001 ff6b 	bl	80023ec <osMailFree>
	  event = osMailGet(mail01Handle, osWaitForever);
 8000516:	e7d3      	b.n	80004c0 <MsgConsumerTask+0x8>
 8000518:	200010e8 	.word	0x200010e8
 800051c:	08004fa0 	.word	0x08004fa0
 8000520:	200010a4 	.word	0x200010a4

08000524 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d101      	bne.n	800053a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000536:	f000 f981 	bl	800083c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40000400 	.word	0x40000400

08000548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054c:	b672      	cpsid	i
}
 800054e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000550:	e7fe      	b.n	8000550 <Error_Handler+0x8>
	...

08000554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800055a:	4b18      	ldr	r3, [pc, #96]	; (80005bc <HAL_MspInit+0x68>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	4a17      	ldr	r2, [pc, #92]	; (80005bc <HAL_MspInit+0x68>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <HAL_MspInit+0x68>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_MspInit+0x68>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4a11      	ldr	r2, [pc, #68]	; (80005bc <HAL_MspInit+0x68>)
 8000578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057c:	61d3      	str	r3, [r2, #28]
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_MspInit+0x68>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	210f      	movs	r1, #15
 800058e:	f06f 0001 	mvn.w	r0, #1
 8000592:	f000 fa24 	bl	80009de <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <HAL_MspInit+0x6c>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_MspInit+0x6c>)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40010000 	.word	0x40010000

080005c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <HAL_UART_MspInit+0x8c>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d131      	bne.n	8000648 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <HAL_UART_MspInit+0x90>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a1a      	ldr	r2, [pc, #104]	; (8000654 <HAL_UART_MspInit+0x90>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <HAL_UART_MspInit+0x90>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_UART_MspInit+0x90>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <HAL_UART_MspInit+0x90>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_UART_MspInit+0x90>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000618:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061a:	2302      	movs	r3, #2
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	4619      	mov	r1, r3
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <HAL_UART_MspInit+0x94>)
 800062a:	f000 fa03 	bl	8000a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800062e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4619      	mov	r1, r3
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <HAL_UART_MspInit+0x94>)
 8000644:	f000 f9f6 	bl	8000a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40013800 	.word	0x40013800
 8000654:	40021000 	.word	0x40021000
 8000658:	40010800 	.word	0x40010800

0800065c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 800066c:	2200      	movs	r2, #0
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	201d      	movs	r0, #29
 8000672:	f000 f9b4 	bl	80009de <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000676:	201d      	movs	r0, #29
 8000678:	f000 f9cd 	bl	8000a16 <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <HAL_InitTick+0xa0>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	4a1e      	ldr	r2, [pc, #120]	; (80006fc <HAL_InitTick+0xa0>)
 8000682:	f043 0302 	orr.w	r3, r3, #2
 8000686:	61d3      	str	r3, [r2, #28]
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <HAL_InitTick+0xa0>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000694:	f107 0210 	add.w	r2, r7, #16
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ff58 	bl	8001554 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80006a4:	f000 ff2e 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
 80006a8:	4603      	mov	r3, r0
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b0:	4a13      	ldr	r2, [pc, #76]	; (8000700 <HAL_InitTick+0xa4>)
 80006b2:	fba2 2303 	umull	r2, r3, r2, r3
 80006b6:	0c9b      	lsrs	r3, r3, #18
 80006b8:	3b01      	subs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <HAL_InitTick+0xa8>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <HAL_InitTick+0xac>)
 80006c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <HAL_InitTick+0xa8>)
 80006c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006c8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80006ca:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <HAL_InitTick+0xa8>)
 80006cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ce:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <HAL_InitTick+0xa8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <HAL_InitTick+0xa8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80006dc:	4809      	ldr	r0, [pc, #36]	; (8000704 <HAL_InitTick+0xa8>)
 80006de:	f000 ff87 	bl	80015f0 <HAL_TIM_Base_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d104      	bne.n	80006f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <HAL_InitTick+0xa8>)
 80006ea:	f000 ffd9 	bl	80016a0 <HAL_TIM_Base_Start_IT>
 80006ee:	4603      	mov	r3, r0
 80006f0:	e000      	b.n	80006f4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3730      	adds	r7, #48	; 0x30
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000
 8000700:	431bde83 	.word	0x431bde83
 8000704:	200010f0 	.word	0x200010f0
 8000708:	40000400 	.word	0x40000400

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <NMI_Handler+0x4>

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <MemManage_Handler+0x4>

0800071e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <UsageFault_Handler+0x4>

0800072a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
	...

08000738 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <TIM3_IRQHandler+0x10>)
 800073e:	f001 f80f 	bl	8001760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200010f0 	.word	0x200010f0

0800074c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000754:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <_sbrk+0x5c>)
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <_sbrk+0x60>)
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d102      	bne.n	800076e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <_sbrk+0x64>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <_sbrk+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	429a      	cmp	r2, r3
 800077a:	d207      	bcs.n	800078c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800077c:	f003 fefe 	bl	800457c <__errno>
 8000780:	4603      	mov	r3, r0
 8000782:	220c      	movs	r2, #12
 8000784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	e009      	b.n	80007a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <_sbrk+0x64>)
 800079c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800079e:	68fb      	ldr	r3, [r7, #12]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000c000 	.word	0x2000c000
 80007ac:	00000400 	.word	0x00000400
 80007b0:	20000344 	.word	0x20000344
 80007b4:	20001150 	.word	0x20001150

080007b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007c6:	490d      	ldr	r1, [pc, #52]	; (80007fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007cc:	e002      	b.n	80007d4 <LoopCopyDataInit>

080007ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d2:	3304      	adds	r3, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d8:	d3f9      	bcc.n	80007ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007dc:	4c0a      	ldr	r4, [pc, #40]	; (8000808 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e0:	e001      	b.n	80007e6 <LoopFillZerobss>

080007e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e4:	3204      	adds	r2, #4

080007e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e8:	d3fb      	bcc.n	80007e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ea:	f7ff ffe5 	bl	80007b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ee:	f003 fecb 	bl	8004588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f2:	f7ff fd3d 	bl	8000270 <main>
  bx lr
 80007f6:	4770      	bx	lr
  ldr r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000800:	08005080 	.word	0x08005080
  ldr r2, =_sbss
 8000804:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000808:	2000114c 	.word	0x2000114c

0800080c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC1_2_IRQHandler>
	...

08000810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_Init+0x28>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a07      	ldr	r2, [pc, #28]	; (8000838 <HAL_Init+0x28>)
 800081a:	f043 0310 	orr.w	r3, r3, #16
 800081e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000820:	2003      	movs	r0, #3
 8000822:	f000 f8d1 	bl	80009c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000826:	200f      	movs	r0, #15
 8000828:	f7ff ff18 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800082c:	f7ff fe92 	bl	8000554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40022000 	.word	0x40022000

0800083c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x1c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x20>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <HAL_IncTick+0x20>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	20000008 	.word	0x20000008
 800085c:	20001138 	.word	0x20001138

08000860 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return uwTick;
 8000864:	4b02      	ldr	r3, [pc, #8]	; (8000870 <HAL_GetTick+0x10>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20001138 	.word	0x20001138

08000874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800089c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	60d3      	str	r3, [r2, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <__NVIC_GetPriorityGrouping+0x18>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	f003 0307 	and.w	r3, r3, #7
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	db0b      	blt.n	8000902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 021f 	and.w	r2, r3, #31
 80008f0:	4906      	ldr	r1, [pc, #24]	; (800090c <__NVIC_EnableIRQ+0x34>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	095b      	lsrs	r3, r3, #5
 80008f8:	2001      	movs	r0, #1
 80008fa:	fa00 f202 	lsl.w	r2, r0, r2
 80008fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	e000e100 	.word	0xe000e100

08000910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db0a      	blt.n	800093a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	490c      	ldr	r1, [pc, #48]	; (800095c <__NVIC_SetPriority+0x4c>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	0112      	lsls	r2, r2, #4
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	440b      	add	r3, r1
 8000934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000938:	e00a      	b.n	8000950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4908      	ldr	r1, [pc, #32]	; (8000960 <__NVIC_SetPriority+0x50>)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	3b04      	subs	r3, #4
 8000948:	0112      	lsls	r2, r2, #4
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	440b      	add	r3, r1
 800094e:	761a      	strb	r2, [r3, #24]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000e100 	.word	0xe000e100
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000964:	b480      	push	{r7}
 8000966:	b089      	sub	sp, #36	; 0x24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f1c3 0307 	rsb	r3, r3, #7
 800097e:	2b04      	cmp	r3, #4
 8000980:	bf28      	it	cs
 8000982:	2304      	movcs	r3, #4
 8000984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3304      	adds	r3, #4
 800098a:	2b06      	cmp	r3, #6
 800098c:	d902      	bls.n	8000994 <NVIC_EncodePriority+0x30>
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3b03      	subs	r3, #3
 8000992:	e000      	b.n	8000996 <NVIC_EncodePriority+0x32>
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	f04f 32ff 	mov.w	r2, #4294967295
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43da      	mvns	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	401a      	ands	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	43d9      	mvns	r1, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	4313      	orrs	r3, r2
         );
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff4f 	bl	8000874 <__NVIC_SetPriorityGrouping>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f0:	f7ff ff64 	bl	80008bc <__NVIC_GetPriorityGrouping>
 80009f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	6978      	ldr	r0, [r7, #20]
 80009fc:	f7ff ffb2 	bl	8000964 <NVIC_EncodePriority>
 8000a00:	4602      	mov	r2, r0
 8000a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a06:	4611      	mov	r1, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff81 	bl	8000910 <__NVIC_SetPriority>
}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff57 	bl	80008d8 <__NVIC_EnableIRQ>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a46:	e179      	b.n	8000d3c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	f040 8168 	bne.w	8000d36 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	4aa0      	ldr	r2, [pc, #640]	; (8000cec <HAL_GPIO_Init+0x2b8>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d05e      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a70:	4a9e      	ldr	r2, [pc, #632]	; (8000cec <HAL_GPIO_Init+0x2b8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d875      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a76:	4a9e      	ldr	r2, [pc, #632]	; (8000cf0 <HAL_GPIO_Init+0x2bc>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d058      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a7c:	4a9c      	ldr	r2, [pc, #624]	; (8000cf0 <HAL_GPIO_Init+0x2bc>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d86f      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a82:	4a9c      	ldr	r2, [pc, #624]	; (8000cf4 <HAL_GPIO_Init+0x2c0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d052      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a88:	4a9a      	ldr	r2, [pc, #616]	; (8000cf4 <HAL_GPIO_Init+0x2c0>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d869      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a8e:	4a9a      	ldr	r2, [pc, #616]	; (8000cf8 <HAL_GPIO_Init+0x2c4>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d04c      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a94:	4a98      	ldr	r2, [pc, #608]	; (8000cf8 <HAL_GPIO_Init+0x2c4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d863      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a9a:	4a98      	ldr	r2, [pc, #608]	; (8000cfc <HAL_GPIO_Init+0x2c8>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d046      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000aa0:	4a96      	ldr	r2, [pc, #600]	; (8000cfc <HAL_GPIO_Init+0x2c8>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d85d      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000aa6:	2b12      	cmp	r3, #18
 8000aa8:	d82a      	bhi.n	8000b00 <HAL_GPIO_Init+0xcc>
 8000aaa:	2b12      	cmp	r3, #18
 8000aac:	d859      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000aae:	a201      	add	r2, pc, #4	; (adr r2, 8000ab4 <HAL_GPIO_Init+0x80>)
 8000ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab4:	08000b2f 	.word	0x08000b2f
 8000ab8:	08000b09 	.word	0x08000b09
 8000abc:	08000b1b 	.word	0x08000b1b
 8000ac0:	08000b5d 	.word	0x08000b5d
 8000ac4:	08000b63 	.word	0x08000b63
 8000ac8:	08000b63 	.word	0x08000b63
 8000acc:	08000b63 	.word	0x08000b63
 8000ad0:	08000b63 	.word	0x08000b63
 8000ad4:	08000b63 	.word	0x08000b63
 8000ad8:	08000b63 	.word	0x08000b63
 8000adc:	08000b63 	.word	0x08000b63
 8000ae0:	08000b63 	.word	0x08000b63
 8000ae4:	08000b63 	.word	0x08000b63
 8000ae8:	08000b63 	.word	0x08000b63
 8000aec:	08000b63 	.word	0x08000b63
 8000af0:	08000b63 	.word	0x08000b63
 8000af4:	08000b63 	.word	0x08000b63
 8000af8:	08000b11 	.word	0x08000b11
 8000afc:	08000b25 	.word	0x08000b25
 8000b00:	4a7f      	ldr	r2, [pc, #508]	; (8000d00 <HAL_GPIO_Init+0x2cc>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d013      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b06:	e02c      	b.n	8000b62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	623b      	str	r3, [r7, #32]
          break;
 8000b0e:	e029      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	3304      	adds	r3, #4
 8000b16:	623b      	str	r3, [r7, #32]
          break;
 8000b18:	e024      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	3308      	adds	r3, #8
 8000b20:	623b      	str	r3, [r7, #32]
          break;
 8000b22:	e01f      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	330c      	adds	r3, #12
 8000b2a:	623b      	str	r3, [r7, #32]
          break;
 8000b2c:	e01a      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b36:	2304      	movs	r3, #4
 8000b38:	623b      	str	r3, [r7, #32]
          break;
 8000b3a:	e013      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d105      	bne.n	8000b50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b44:	2308      	movs	r3, #8
 8000b46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	611a      	str	r2, [r3, #16]
          break;
 8000b4e:	e009      	b.n	8000b64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b50:	2308      	movs	r3, #8
 8000b52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	615a      	str	r2, [r3, #20]
          break;
 8000b5a:	e003      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
          break;
 8000b60:	e000      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          break;
 8000b62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	2bff      	cmp	r3, #255	; 0xff
 8000b68:	d801      	bhi.n	8000b6e <HAL_GPIO_Init+0x13a>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	e001      	b.n	8000b72 <HAL_GPIO_Init+0x13e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3304      	adds	r3, #4
 8000b72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	2bff      	cmp	r3, #255	; 0xff
 8000b78:	d802      	bhi.n	8000b80 <HAL_GPIO_Init+0x14c>
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	e002      	b.n	8000b86 <HAL_GPIO_Init+0x152>
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	3b08      	subs	r3, #8
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	401a      	ands	r2, r3
 8000b98:	6a39      	ldr	r1, [r7, #32]
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 80c1 	beq.w	8000d36 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb4:	4b53      	ldr	r3, [pc, #332]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a52      	ldr	r2, [pc, #328]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b50      	ldr	r3, [pc, #320]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bcc:	4a4e      	ldr	r2, [pc, #312]	; (8000d08 <HAL_GPIO_Init+0x2d4>)
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a46      	ldr	r2, [pc, #280]	; (8000d0c <HAL_GPIO_Init+0x2d8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d01f      	beq.n	8000c38 <HAL_GPIO_Init+0x204>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a45      	ldr	r2, [pc, #276]	; (8000d10 <HAL_GPIO_Init+0x2dc>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d019      	beq.n	8000c34 <HAL_GPIO_Init+0x200>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a44      	ldr	r2, [pc, #272]	; (8000d14 <HAL_GPIO_Init+0x2e0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d013      	beq.n	8000c30 <HAL_GPIO_Init+0x1fc>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a43      	ldr	r2, [pc, #268]	; (8000d18 <HAL_GPIO_Init+0x2e4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d00d      	beq.n	8000c2c <HAL_GPIO_Init+0x1f8>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a42      	ldr	r2, [pc, #264]	; (8000d1c <HAL_GPIO_Init+0x2e8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d007      	beq.n	8000c28 <HAL_GPIO_Init+0x1f4>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a41      	ldr	r2, [pc, #260]	; (8000d20 <HAL_GPIO_Init+0x2ec>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d101      	bne.n	8000c24 <HAL_GPIO_Init+0x1f0>
 8000c20:	2305      	movs	r3, #5
 8000c22:	e00a      	b.n	8000c3a <HAL_GPIO_Init+0x206>
 8000c24:	2306      	movs	r3, #6
 8000c26:	e008      	b.n	8000c3a <HAL_GPIO_Init+0x206>
 8000c28:	2304      	movs	r3, #4
 8000c2a:	e006      	b.n	8000c3a <HAL_GPIO_Init+0x206>
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e004      	b.n	8000c3a <HAL_GPIO_Init+0x206>
 8000c30:	2302      	movs	r3, #2
 8000c32:	e002      	b.n	8000c3a <HAL_GPIO_Init+0x206>
 8000c34:	2301      	movs	r3, #1
 8000c36:	e000      	b.n	8000c3a <HAL_GPIO_Init+0x206>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c3c:	f002 0203 	and.w	r2, r2, #3
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	4093      	lsls	r3, r2
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c4a:	492f      	ldr	r1, [pc, #188]	; (8000d08 <HAL_GPIO_Init+0x2d4>)
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	3302      	adds	r3, #2
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d006      	beq.n	8000c72 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c64:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	492e      	ldr	r1, [pc, #184]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	600b      	str	r3, [r1, #0]
 8000c70:	e006      	b.n	8000c80 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c72:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	492a      	ldr	r1, [pc, #168]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c8c:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	4924      	ldr	r1, [pc, #144]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	604b      	str	r3, [r1, #4]
 8000c98:	e006      	b.n	8000ca8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c9a:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	4920      	ldr	r1, [pc, #128]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d006      	beq.n	8000cc2 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	491a      	ldr	r1, [pc, #104]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	608b      	str	r3, [r1, #8]
 8000cc0:	e006      	b.n	8000cd0 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	4916      	ldr	r1, [pc, #88]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d025      	beq.n	8000d28 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	4910      	ldr	r1, [pc, #64]	; (8000d24 <HAL_GPIO_Init+0x2f0>)
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	60cb      	str	r3, [r1, #12]
 8000ce8:	e025      	b.n	8000d36 <HAL_GPIO_Init+0x302>
 8000cea:	bf00      	nop
 8000cec:	10320000 	.word	0x10320000
 8000cf0:	10310000 	.word	0x10310000
 8000cf4:	10220000 	.word	0x10220000
 8000cf8:	10210000 	.word	0x10210000
 8000cfc:	10120000 	.word	0x10120000
 8000d00:	10110000 	.word	0x10110000
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000
 8000d0c:	40010800 	.word	0x40010800
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	40011000 	.word	0x40011000
 8000d18:	40011400 	.word	0x40011400
 8000d1c:	40011800 	.word	0x40011800
 8000d20:	40011c00 	.word	0x40011c00
 8000d24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_GPIO_Init+0x324>)
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	4909      	ldr	r1, [pc, #36]	; (8000d58 <HAL_GPIO_Init+0x324>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	3301      	adds	r3, #1
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	fa22 f303 	lsr.w	r3, r2, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f47f ae7e 	bne.w	8000a48 <HAL_GPIO_Init+0x14>
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	372c      	adds	r7, #44	; 0x2c
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	40010400 	.word	0x40010400

08000d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e26c      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 8087 	beq.w	8000e8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d7c:	4b92      	ldr	r3, [pc, #584]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d00c      	beq.n	8000da2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d88:	4b8f      	ldr	r3, [pc, #572]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 030c 	and.w	r3, r3, #12
 8000d90:	2b08      	cmp	r3, #8
 8000d92:	d112      	bne.n	8000dba <HAL_RCC_OscConfig+0x5e>
 8000d94:	4b8c      	ldr	r3, [pc, #560]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da0:	d10b      	bne.n	8000dba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da2:	4b89      	ldr	r3, [pc, #548]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d06c      	beq.n	8000e88 <HAL_RCC_OscConfig+0x12c>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d168      	bne.n	8000e88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e246      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc2:	d106      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x76>
 8000dc4:	4b80      	ldr	r3, [pc, #512]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a7f      	ldr	r2, [pc, #508]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	e02e      	b.n	8000e30 <HAL_RCC_OscConfig+0xd4>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x98>
 8000dda:	4b7b      	ldr	r3, [pc, #492]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a7a      	ldr	r2, [pc, #488]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b78      	ldr	r3, [pc, #480]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a77      	ldr	r2, [pc, #476]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e01d      	b.n	8000e30 <HAL_RCC_OscConfig+0xd4>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dfc:	d10c      	bne.n	8000e18 <HAL_RCC_OscConfig+0xbc>
 8000dfe:	4b72      	ldr	r3, [pc, #456]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a71      	ldr	r2, [pc, #452]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b6f      	ldr	r3, [pc, #444]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a6e      	ldr	r2, [pc, #440]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e00b      	b.n	8000e30 <HAL_RCC_OscConfig+0xd4>
 8000e18:	4b6b      	ldr	r3, [pc, #428]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a6a      	ldr	r2, [pc, #424]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b68      	ldr	r3, [pc, #416]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a67      	ldr	r2, [pc, #412]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d013      	beq.n	8000e60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e38:	f7ff fd12 	bl	8000860 <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fd0e 	bl	8000860 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b64      	cmp	r3, #100	; 0x64
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e1fa      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e52:	4b5d      	ldr	r3, [pc, #372]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f0      	beq.n	8000e40 <HAL_RCC_OscConfig+0xe4>
 8000e5e:	e014      	b.n	8000e8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e60:	f7ff fcfe 	bl	8000860 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e68:	f7ff fcfa 	bl	8000860 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b64      	cmp	r3, #100	; 0x64
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e1e6      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7a:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f0      	bne.n	8000e68 <HAL_RCC_OscConfig+0x10c>
 8000e86:	e000      	b.n	8000e8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d063      	beq.n	8000f5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e96:	4b4c      	ldr	r3, [pc, #304]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00b      	beq.n	8000eba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 030c 	and.w	r3, r3, #12
 8000eaa:	2b08      	cmp	r3, #8
 8000eac:	d11c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x18c>
 8000eae:	4b46      	ldr	r3, [pc, #280]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d116      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eba:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d005      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x176>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d001      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e1ba      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed2:	4b3d      	ldr	r3, [pc, #244]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	4939      	ldr	r1, [pc, #228]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee6:	e03a      	b.n	8000f5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d020      	beq.n	8000f32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ef0:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef6:	f7ff fcb3 	bl	8000860 <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efe:	f7ff fcaf 	bl	8000860 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e19b      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f10:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f0      	beq.n	8000efe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4927      	ldr	r1, [pc, #156]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]
 8000f30:	e015      	b.n	8000f5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fc92 	bl	8000860 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f40:	f7ff fc8e 	bl	8000860 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e17a      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d03a      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d019      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_RCC_OscConfig+0x274>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f78:	f7ff fc72 	bl	8000860 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f80:	f7ff fc6e 	bl	8000860 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e15a      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f0      	beq.n	8000f80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f000 fb08 	bl	80015b4 <RCC_Delay>
 8000fa4:	e01c      	b.n	8000fe0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_RCC_OscConfig+0x274>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fac:	f7ff fc58 	bl	8000860 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb2:	e00f      	b.n	8000fd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fc54 	bl	8000860 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d908      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e140      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	42420000 	.word	0x42420000
 8000fd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd4:	4b9e      	ldr	r3, [pc, #632]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1e9      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80a6 	beq.w	800113a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff2:	4b97      	ldr	r3, [pc, #604]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10d      	bne.n	800101a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b94      	ldr	r3, [pc, #592]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a93      	ldr	r2, [pc, #588]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b91      	ldr	r3, [pc, #580]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001016:	2301      	movs	r3, #1
 8001018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101a:	4b8e      	ldr	r3, [pc, #568]	; (8001254 <HAL_RCC_OscConfig+0x4f8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001022:	2b00      	cmp	r3, #0
 8001024:	d118      	bne.n	8001058 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001026:	4b8b      	ldr	r3, [pc, #556]	; (8001254 <HAL_RCC_OscConfig+0x4f8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a8a      	ldr	r2, [pc, #552]	; (8001254 <HAL_RCC_OscConfig+0x4f8>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001032:	f7ff fc15 	bl	8000860 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800103a:	f7ff fc11 	bl	8000860 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b64      	cmp	r3, #100	; 0x64
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e0fd      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104c:	4b81      	ldr	r3, [pc, #516]	; (8001254 <HAL_RCC_OscConfig+0x4f8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d106      	bne.n	800106e <HAL_RCC_OscConfig+0x312>
 8001060:	4b7b      	ldr	r3, [pc, #492]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4a7a      	ldr	r2, [pc, #488]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6213      	str	r3, [r2, #32]
 800106c:	e02d      	b.n	80010ca <HAL_RCC_OscConfig+0x36e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10c      	bne.n	8001090 <HAL_RCC_OscConfig+0x334>
 8001076:	4b76      	ldr	r3, [pc, #472]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a75      	ldr	r2, [pc, #468]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	4b73      	ldr	r3, [pc, #460]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a72      	ldr	r2, [pc, #456]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001088:	f023 0304 	bic.w	r3, r3, #4
 800108c:	6213      	str	r3, [r2, #32]
 800108e:	e01c      	b.n	80010ca <HAL_RCC_OscConfig+0x36e>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b05      	cmp	r3, #5
 8001096:	d10c      	bne.n	80010b2 <HAL_RCC_OscConfig+0x356>
 8001098:	4b6d      	ldr	r3, [pc, #436]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a6c      	ldr	r2, [pc, #432]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	4b6a      	ldr	r3, [pc, #424]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4a69      	ldr	r2, [pc, #420]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6213      	str	r3, [r2, #32]
 80010b0:	e00b      	b.n	80010ca <HAL_RCC_OscConfig+0x36e>
 80010b2:	4b67      	ldr	r3, [pc, #412]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a66      	ldr	r2, [pc, #408]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	6213      	str	r3, [r2, #32]
 80010be:	4b64      	ldr	r3, [pc, #400]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	4a63      	ldr	r2, [pc, #396]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	f023 0304 	bic.w	r3, r3, #4
 80010c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d015      	beq.n	80010fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d2:	f7ff fbc5 	bl	8000860 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d8:	e00a      	b.n	80010f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010da:	f7ff fbc1 	bl	8000860 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e0ab      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f0:	4b57      	ldr	r3, [pc, #348]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0ee      	beq.n	80010da <HAL_RCC_OscConfig+0x37e>
 80010fc:	e014      	b.n	8001128 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fe:	f7ff fbaf 	bl	8000860 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001104:	e00a      	b.n	800111c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001106:	f7ff fbab 	bl	8000860 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	f241 3288 	movw	r2, #5000	; 0x1388
 8001114:	4293      	cmp	r3, r2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e095      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800111c:	4b4c      	ldr	r3, [pc, #304]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1ee      	bne.n	8001106 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d105      	bne.n	800113a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800112e:	4b48      	ldr	r3, [pc, #288]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a47      	ldr	r2, [pc, #284]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8081 	beq.w	8001246 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001144:	4b42      	ldr	r3, [pc, #264]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b08      	cmp	r3, #8
 800114e:	d061      	beq.n	8001214 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d146      	bne.n	80011e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001158:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <HAL_RCC_OscConfig+0x4fc>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115e:	f7ff fb7f 	bl	8000860 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001166:	f7ff fb7b 	bl	8000860 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e067      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f0      	bne.n	8001166 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118c:	d108      	bne.n	80011a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	492d      	ldr	r1, [pc, #180]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a19      	ldr	r1, [r3, #32]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	430b      	orrs	r3, r1
 80011b2:	4927      	ldr	r1, [pc, #156]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_RCC_OscConfig+0x4fc>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fb4f 	bl	8000860 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff fb4b 	bl	8000860 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e037      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f0      	beq.n	80011c6 <HAL_RCC_OscConfig+0x46a>
 80011e4:	e02f      	b.n	8001246 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <HAL_RCC_OscConfig+0x4fc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fb38 	bl	8000860 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f4:	f7ff fb34 	bl	8000860 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e020      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x498>
 8001212:	e018      	b.n	8001246 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e013      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_RCC_OscConfig+0x4f4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	429a      	cmp	r2, r3
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123e:	429a      	cmp	r2, r3
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	40007000 	.word	0x40007000
 8001258:	42420060 	.word	0x42420060

0800125c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0d0      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001270:	4b6a      	ldr	r3, [pc, #424]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d910      	bls.n	80012a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b67      	ldr	r3, [pc, #412]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 0207 	bic.w	r2, r3, #7
 8001286:	4965      	ldr	r1, [pc, #404]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128e:	4b63      	ldr	r3, [pc, #396]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e0b8      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d020      	beq.n	80012ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b8:	4b59      	ldr	r3, [pc, #356]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a58      	ldr	r2, [pc, #352]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d0:	4b53      	ldr	r3, [pc, #332]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4a52      	ldr	r2, [pc, #328]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012dc:	4b50      	ldr	r3, [pc, #320]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	494d      	ldr	r1, [pc, #308]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d040      	beq.n	800137c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d107      	bne.n	8001312 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b47      	ldr	r3, [pc, #284]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d115      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e07f      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e073      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e06b      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133a:	4b39      	ldr	r3, [pc, #228]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f023 0203 	bic.w	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4936      	ldr	r1, [pc, #216]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800134c:	f7ff fa88 	bl	8000860 <HAL_GetTick>
 8001350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001352:	e00a      	b.n	800136a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001354:	f7ff fa84 	bl	8000860 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e053      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 020c 	and.w	r2, r3, #12
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	429a      	cmp	r2, r3
 800137a:	d1eb      	bne.n	8001354 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d210      	bcs.n	80013ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 0207 	bic.w	r2, r3, #7
 8001392:	4922      	ldr	r1, [pc, #136]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e032      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d008      	beq.n	80013ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	4916      	ldr	r1, [pc, #88]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d009      	beq.n	80013ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	490e      	ldr	r1, [pc, #56]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ea:	f000 f821 	bl	8001430 <HAL_RCC_GetSysClockFreq>
 80013ee:	4602      	mov	r2, r0
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	490a      	ldr	r1, [pc, #40]	; (8001424 <HAL_RCC_ClockConfig+0x1c8>)
 80013fc:	5ccb      	ldrb	r3, [r1, r3]
 80013fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_RCC_ClockConfig+0x1cc>)
 8001404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_RCC_ClockConfig+0x1d0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f926 	bl	800065c <HAL_InitTick>

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40022000 	.word	0x40022000
 8001420:	40021000 	.word	0x40021000
 8001424:	08004fcc 	.word	0x08004fcc
 8001428:	20000000 	.word	0x20000000
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001430:	b490      	push	{r4, r7}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001438:	1d3c      	adds	r4, r7, #4
 800143a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800143c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001440:	f240 2301 	movw	r3, #513	; 0x201
 8001444:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800145a:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d002      	beq.n	8001470 <HAL_RCC_GetSysClockFreq+0x40>
 800146a:	2b08      	cmp	r3, #8
 800146c:	d003      	beq.n	8001476 <HAL_RCC_GetSysClockFreq+0x46>
 800146e:	e02d      	b.n	80014cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001472:	623b      	str	r3, [r7, #32]
      break;
 8001474:	e02d      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	0c9b      	lsrs	r3, r3, #18
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001482:	4413      	add	r3, r2
 8001484:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001488:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	0c5b      	lsrs	r3, r3, #17
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014a2:	4413      	add	r3, r2
 80014a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014ae:	fb02 f203 	mul.w	r2, r2, r3
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ba:	e004      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	623b      	str	r3, [r7, #32]
      break;
 80014ca:	e002      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014ce:	623b      	str	r3, [r7, #32]
      break;
 80014d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014d2:	6a3b      	ldr	r3, [r7, #32]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3728      	adds	r7, #40	; 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc90      	pop	{r4, r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	08004fb4 	.word	0x08004fb4
 80014e4:	40021000 	.word	0x40021000
 80014e8:	007a1200 	.word	0x007a1200
 80014ec:	003d0900 	.word	0x003d0900

080014f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <HAL_RCC_GetHCLKFreq+0x10>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	20000000 	.word	0x20000000

08001504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001508:	f7ff fff2 	bl	80014f0 <HAL_RCC_GetHCLKFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	4903      	ldr	r1, [pc, #12]	; (8001528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000
 8001528:	08004fdc 	.word	0x08004fdc

0800152c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001530:	f7ff ffde 	bl	80014f0 <HAL_RCC_GetHCLKFreq>
 8001534:	4602      	mov	r2, r0
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	0adb      	lsrs	r3, r3, #11
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	4903      	ldr	r1, [pc, #12]	; (8001550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001542:	5ccb      	ldrb	r3, [r1, r3]
 8001544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001548:	4618      	mov	r0, r3
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	08004fdc 	.word	0x08004fdc

08001554 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	220f      	movs	r2, #15
 8001562:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_RCC_GetClockConfig+0x58>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_RCC_GetClockConfig+0x58>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_RCC_GetClockConfig+0x58>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_RCC_GetClockConfig+0x58>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0207 	and.w	r2, r3, #7
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40022000 	.word	0x40022000

080015b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <RCC_Delay+0x34>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <RCC_Delay+0x38>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0a5b      	lsrs	r3, r3, #9
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015d0:	bf00      	nop
  }
  while (Delay --);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1e5a      	subs	r2, r3, #1
 80015d6:	60fa      	str	r2, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f9      	bne.n	80015d0 <RCC_Delay+0x1c>
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000000 	.word	0x20000000
 80015ec:	10624dd3 	.word	0x10624dd3

080015f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e041      	b.n	8001686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f839 	bl	800168e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3304      	adds	r3, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f000 f9c2 	bl	80019b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d001      	beq.n	80016b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e044      	b.n	8001742 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2202      	movs	r2, #2
 80016bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1d      	ldr	r2, [pc, #116]	; (800174c <HAL_TIM_Base_Start_IT+0xac>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d018      	beq.n	800170c <HAL_TIM_Base_Start_IT+0x6c>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <HAL_TIM_Base_Start_IT+0xb0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d013      	beq.n	800170c <HAL_TIM_Base_Start_IT+0x6c>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ec:	d00e      	beq.n	800170c <HAL_TIM_Base_Start_IT+0x6c>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a18      	ldr	r2, [pc, #96]	; (8001754 <HAL_TIM_Base_Start_IT+0xb4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d009      	beq.n	800170c <HAL_TIM_Base_Start_IT+0x6c>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a16      	ldr	r2, [pc, #88]	; (8001758 <HAL_TIM_Base_Start_IT+0xb8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d004      	beq.n	800170c <HAL_TIM_Base_Start_IT+0x6c>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <HAL_TIM_Base_Start_IT+0xbc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d111      	bne.n	8001730 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b06      	cmp	r3, #6
 800171c:	d010      	beq.n	8001740 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0201 	orr.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800172e:	e007      	b.n	8001740 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	40012c00 	.word	0x40012c00
 8001750:	40013400 	.word	0x40013400
 8001754:	40000400 	.word	0x40000400
 8001758:	40000800 	.word	0x40000800
 800175c:	40000c00 	.word	0x40000c00

08001760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b02      	cmp	r3, #2
 8001774:	d122      	bne.n	80017bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b02      	cmp	r3, #2
 8001782:	d11b      	bne.n	80017bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f06f 0202 	mvn.w	r2, #2
 800178c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f8ed 	bl	8001982 <HAL_TIM_IC_CaptureCallback>
 80017a8:	e005      	b.n	80017b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f8e0 	bl	8001970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f8ef 	bl	8001994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d122      	bne.n	8001810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d11b      	bne.n	8001810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f06f 0204 	mvn.w	r2, #4
 80017e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2202      	movs	r2, #2
 80017e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f8c3 	bl	8001982 <HAL_TIM_IC_CaptureCallback>
 80017fc:	e005      	b.n	800180a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f8b6 	bl	8001970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f8c5 	bl	8001994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b08      	cmp	r3, #8
 800181c:	d122      	bne.n	8001864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b08      	cmp	r3, #8
 800182a:	d11b      	bne.n	8001864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f06f 0208 	mvn.w	r2, #8
 8001834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2204      	movs	r2, #4
 800183a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f899 	bl	8001982 <HAL_TIM_IC_CaptureCallback>
 8001850:	e005      	b.n	800185e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f88c 	bl	8001970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f89b 	bl	8001994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	2b10      	cmp	r3, #16
 8001870:	d122      	bne.n	80018b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	2b10      	cmp	r3, #16
 800187e:	d11b      	bne.n	80018b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f06f 0210 	mvn.w	r2, #16
 8001888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2208      	movs	r2, #8
 800188e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f86f 	bl	8001982 <HAL_TIM_IC_CaptureCallback>
 80018a4:	e005      	b.n	80018b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f862 	bl	8001970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f871 	bl	8001994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d10e      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d107      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f06f 0201 	mvn.w	r2, #1
 80018dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7fe fe20 	bl	8000524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ee:	2b80      	cmp	r3, #128	; 0x80
 80018f0:	d10e      	bne.n	8001910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fc:	2b80      	cmp	r3, #128	; 0x80
 80018fe:	d107      	bne.n	8001910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f8d7 	bl	8001abe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191a:	2b40      	cmp	r3, #64	; 0x40
 800191c:	d10e      	bne.n	800193c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001928:	2b40      	cmp	r3, #64	; 0x40
 800192a:	d107      	bne.n	800193c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f835 	bl	80019a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f003 0320 	and.w	r3, r3, #32
 8001946:	2b20      	cmp	r3, #32
 8001948:	d10e      	bne.n	8001968 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f003 0320 	and.w	r3, r3, #32
 8001954:	2b20      	cmp	r3, #32
 8001956:	d107      	bne.n	8001968 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f06f 0220 	mvn.w	r2, #32
 8001960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f8a2 	bl	8001aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a33      	ldr	r2, [pc, #204]	; (8001a98 <TIM_Base_SetConfig+0xe0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d013      	beq.n	80019f8 <TIM_Base_SetConfig+0x40>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a32      	ldr	r2, [pc, #200]	; (8001a9c <TIM_Base_SetConfig+0xe4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d00f      	beq.n	80019f8 <TIM_Base_SetConfig+0x40>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019de:	d00b      	beq.n	80019f8 <TIM_Base_SetConfig+0x40>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a2f      	ldr	r2, [pc, #188]	; (8001aa0 <TIM_Base_SetConfig+0xe8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d007      	beq.n	80019f8 <TIM_Base_SetConfig+0x40>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a2e      	ldr	r2, [pc, #184]	; (8001aa4 <TIM_Base_SetConfig+0xec>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d003      	beq.n	80019f8 <TIM_Base_SetConfig+0x40>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a2d      	ldr	r2, [pc, #180]	; (8001aa8 <TIM_Base_SetConfig+0xf0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d108      	bne.n	8001a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a22      	ldr	r2, [pc, #136]	; (8001a98 <TIM_Base_SetConfig+0xe0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <TIM_Base_SetConfig+0x82>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <TIM_Base_SetConfig+0xe4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00f      	beq.n	8001a3a <TIM_Base_SetConfig+0x82>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a20:	d00b      	beq.n	8001a3a <TIM_Base_SetConfig+0x82>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a1e      	ldr	r2, [pc, #120]	; (8001aa0 <TIM_Base_SetConfig+0xe8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <TIM_Base_SetConfig+0x82>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <TIM_Base_SetConfig+0xec>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d003      	beq.n	8001a3a <TIM_Base_SetConfig+0x82>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <TIM_Base_SetConfig+0xf0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d108      	bne.n	8001a4c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <TIM_Base_SetConfig+0xe0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d003      	beq.n	8001a80 <TIM_Base_SetConfig+0xc8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <TIM_Base_SetConfig+0xe4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d103      	bne.n	8001a88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	615a      	str	r2, [r3, #20]
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	40013400 	.word	0x40013400
 8001aa0:	40000400 	.word	0x40000400
 8001aa4:	40000800 	.word	0x40000800
 8001aa8:	40000c00 	.word	0x40000c00

08001aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e03f      	b.n	8001b62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe fd64 	bl	80005c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2224      	movs	r2, #36	; 0x24
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f905 	bl	8001d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2220      	movs	r2, #32
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b08a      	sub	sp, #40	; 0x28
 8001b6e:	af02      	add	r7, sp, #8
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	4613      	mov	r3, r2
 8001b78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	d17c      	bne.n	8001c84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <HAL_UART_Transmit+0x2c>
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e075      	b.n	8001c86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_UART_Transmit+0x3e>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e06e      	b.n	8001c86 <HAL_UART_Transmit+0x11c>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2221      	movs	r2, #33	; 0x21
 8001bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bbe:	f7fe fe4f 	bl	8000860 <HAL_GetTick>
 8001bc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	88fa      	ldrh	r2, [r7, #6]
 8001bc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	88fa      	ldrh	r2, [r7, #6]
 8001bce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd8:	d108      	bne.n	8001bec <HAL_UART_Transmit+0x82>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d104      	bne.n	8001bec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	e003      	b.n	8001bf4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001bfc:	e02a      	b.n	8001c54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f840 	bl	8001c8e <UART_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e036      	b.n	8001c86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10b      	bne.n	8001c36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	3302      	adds	r3, #2
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	e007      	b.n	8001c46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	3301      	adds	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1cf      	bne.n	8001bfe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2200      	movs	r2, #0
 8001c66:	2140      	movs	r1, #64	; 0x40
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 f810 	bl	8001c8e <UART_WaitOnFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e006      	b.n	8001c86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e000      	b.n	8001c86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c84:	2302      	movs	r3, #2
  }
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c9e:	e02c      	b.n	8001cfa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca6:	d028      	beq.n	8001cfa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <UART_WaitOnFlagUntilTimeout+0x30>
 8001cae:	f7fe fdd7 	bl	8000860 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d21d      	bcs.n	8001cfa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ccc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695a      	ldr	r2, [r3, #20]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e00f      	b.n	8001d1a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4013      	ands	r3, r2
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	bf0c      	ite	eq
 8001d0a:	2301      	moveq	r3, #1
 8001d0c:	2300      	movne	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d0c3      	beq.n	8001ca0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d5e:	f023 030c 	bic.w	r3, r3, #12
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	68b9      	ldr	r1, [r7, #8]
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a2c      	ldr	r2, [pc, #176]	; (8001e38 <UART_SetConfig+0x114>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d103      	bne.n	8001d94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d8c:	f7ff fbce 	bl	800152c <HAL_RCC_GetPCLK2Freq>
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	e002      	b.n	8001d9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d94:	f7ff fbb6 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
 8001d98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	009a      	lsls	r2, r3, #2
 8001da4:	441a      	add	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	4a22      	ldr	r2, [pc, #136]	; (8001e3c <UART_SetConfig+0x118>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	0119      	lsls	r1, r3, #4
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009a      	lsls	r2, r3, #2
 8001dc4:	441a      	add	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <UART_SetConfig+0x118>)
 8001dd2:	fba3 0302 	umull	r0, r3, r3, r2
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	2064      	movs	r0, #100	; 0x64
 8001dda:	fb00 f303 	mul.w	r3, r0, r3
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	3332      	adds	r3, #50	; 0x32
 8001de4:	4a15      	ldr	r2, [pc, #84]	; (8001e3c <UART_SetConfig+0x118>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df0:	4419      	add	r1, r3
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	009a      	lsls	r2, r3, #2
 8001dfc:	441a      	add	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <UART_SetConfig+0x118>)
 8001e0a:	fba3 0302 	umull	r0, r3, r3, r2
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2064      	movs	r0, #100	; 0x64
 8001e12:	fb00 f303 	mul.w	r3, r0, r3
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	3332      	adds	r3, #50	; 0x32
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <UART_SetConfig+0x118>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	f003 020f 	and.w	r2, r3, #15
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	440a      	add	r2, r1
 8001e2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40013800 	.word	0x40013800
 8001e3c:	51eb851f 	.word	0x51eb851f

08001e40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b84      	cmp	r3, #132	; 0x84
 8001e54:	d005      	beq.n	8001e62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001e56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3303      	adds	r3, #3
 8001e60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e62:	68fb      	ldr	r3, [r7, #12]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e74:	f3ef 8305 	mrs	r3, IPSR
 8001e78:	607b      	str	r3, [r7, #4]
  return(result);
 8001e7a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e94:	f001 fa86 	bl	80033a4 <vTaskStartScheduler>
  
  return osOK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea0:	b089      	sub	sp, #36	; 0x24
 8001ea2:	af04      	add	r7, sp, #16
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <osThreadCreate+0x54>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01c      	beq.n	8001ef2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685c      	ldr	r4, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681d      	ldr	r5, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691e      	ldr	r6, [r3, #16]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ffb8 	bl	8001e40 <makeFreeRtosPriority>
 8001ed0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eda:	9202      	str	r2, [sp, #8]
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	9100      	str	r1, [sp, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4632      	mov	r2, r6
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f001 f886 	bl	8002ff8 <xTaskCreateStatic>
 8001eec:	4603      	mov	r3, r0
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e01c      	b.n	8001f2c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685c      	ldr	r4, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001efe:	b29e      	uxth	r6, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff9a 	bl	8001e40 <makeFreeRtosPriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f107 030c 	add.w	r3, r7, #12
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	9200      	str	r2, [sp, #0]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	4632      	mov	r2, r6
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f001 f8c7 	bl	80030b0 <xTaskCreate>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d001      	beq.n	8001f2c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e000      	b.n	8001f2e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <osDelay+0x16>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	e000      	b.n	8001f4e <osDelay+0x18>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f001 f9f4 	bl	800333c <vTaskDelay>
  
  return osOK;
 8001f54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	3303      	adds	r3, #3
 8001f6c:	f023 0303 	bic.w	r3, r3, #3
 8001f70:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8001f72:	2014      	movs	r0, #20
 8001f74:	f002 f92a 	bl	80041cc <pvPortMalloc>
 8001f78:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d046      	beq.n	800200e <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f002 f917 	bl	80041cc <pvPortMalloc>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d02b      	beq.n	8002004 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 f908 	bl	80041cc <pvPortMalloc>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d011      	beq.n	8001fee <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	e008      	b.n	8001fe2 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d3f1      	bcc.n	8001fd0 <osPoolCreate+0x72>
 8001fec:	e00f      	b.n	800200e <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 f9ae 	bl	8004354 <vPortFree>
        vPortFree(thePool);
 8001ff8:	6978      	ldr	r0, [r7, #20]
 8001ffa:	f002 f9ab 	bl	8004354 <vPortFree>
        thePool = NULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e004      	b.n	800200e <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8002004:	6978      	ldr	r0, [r7, #20]
 8002006:	f002 f9a5 	bl	8004354 <vPortFree>
      thePool = NULL;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800200e:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8002028:	f7ff ff21 	bl	8001e6e <inHandlerMode>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00e      	beq.n	8002050 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002032:	f3ef 8211 	mrs	r2, BASEPRI
 8002036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203a:	f383 8811 	msr	BASEPRI, r3
 800203e:	f3bf 8f6f 	isb	sy
 8002042:	f3bf 8f4f 	dsb	sy
 8002046:	617a      	str	r2, [r7, #20]
 8002048:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800204a:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
 800204e:	e001      	b.n	8002054 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8002050:	f001 ffbc 	bl	8003fcc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	e029      	b.n	80020ae <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4413      	add	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6892      	ldr	r2, [r2, #8]
 8002066:	fbb3 f1f2 	udiv	r1, r3, r2
 800206a:	fb02 f201 	mul.w	r2, r2, r1
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4413      	add	r3, r2
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d113      	bne.n	80020a8 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	4413      	add	r3, r2
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	440b      	add	r3, r1
 800209e:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	611a      	str	r2, [r3, #16]
      break;
 80020a6:	e007      	b.n	80020b8 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	3301      	adds	r3, #1
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d3d0      	bcc.n	800205a <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80020b8:	f7ff fed9 	bl	8001e6e <inHandlerMode>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80020cc:	e001      	b.n	80020d2 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80020ce:	f001 ffad 	bl	800402c <vPortExitCritical>
  }
  
  return p;
 80020d2:	6a3b      	ldr	r3, [r7, #32]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3728      	adds	r7, #40	; 0x28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <osPoolFree+0x14>
    return osErrorParameter;
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	e030      	b.n	8002152 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <osPoolFree+0x1e>
    return osErrorParameter;
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	e02b      	b.n	8002152 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d201      	bcs.n	8002108 <osPoolFree+0x2c>
    return osErrorParameter;
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	e024      	b.n	8002152 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	fbb3 f1f2 	udiv	r1, r3, r2
 800211c:	fb02 f201 	mul.w	r2, r2, r1
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <osPoolFree+0x4e>
    return osErrorParameter;
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	e013      	b.n	8002152 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d301      	bcc.n	8002144 <osPoolFree+0x68>
    return osErrorParameter;
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	e006      	b.n	8002152 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b085      	sub	sp, #20
 8002160:	af02      	add	r7, sp, #8
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d011      	beq.n	8002192 <osMessageCreate+0x36>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2400      	movs	r4, #0
 8002188:	9400      	str	r4, [sp, #0]
 800218a:	f000 fa5b 	bl	8002644 <xQueueGenericCreateStatic>
 800218e:	4603      	mov	r3, r0
 8002190:	e008      	b.n	80021a4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	4619      	mov	r1, r3
 800219e:	f000 fac8 	bl	8002732 <xQueueGenericCreate>
 80021a2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd90      	pop	{r4, r7, pc}

080021ac <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689c      	ldr	r4, [r3, #8]
 80021ca:	200c      	movs	r0, #12
 80021cc:	f001 fffe 	bl	80041cc <pvPortMalloc>
 80021d0:	4603      	mov	r3, r0
 80021d2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <osMailCreate+0x36>
    return NULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	e038      	b.n	8002254 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	681c      	ldr	r4, [r3, #0]
 80021f6:	2200      	movs	r2, #0
 80021f8:	2104      	movs	r1, #4
 80021fa:	f000 fa9a 	bl	8002732 <xQueueGenericCreate>
 80021fe:	4603      	mov	r3, r0
 8002200:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f002 f89d 	bl	8004354 <vPortFree>
    return NULL;
 800221a:	2300      	movs	r3, #0
 800221c:	e01a      	b.n	8002254 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	681c      	ldr	r4, [r3, #0]
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fe98 	bl	8001f5e <osPoolCreate>
 800222e:	4603      	mov	r3, r0
 8002230:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d107      	bne.n	800224e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f002 f885 	bl	8004354 <vPortFree>
    return NULL;
 800224a:	2300      	movs	r3, #0
 800224c:	e002      	b.n	8002254 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8002254:	4618      	mov	r0, r3
 8002256:	371c      	adds	r7, #28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd90      	pop	{r4, r7, pc}

0800225c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <osMailAlloc+0x14>
    return NULL;
 800226c:	2300      	movs	r3, #0
 800226e:	e006      	b.n	800227e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fecf 	bl	8002018 <osPoolAlloc>
 800227a:	60f8      	str	r0, [r7, #12]
  
  return p;
 800227c:	68fb      	ldr	r3, [r7, #12]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <osMailPut+0x14>
    return osErrorParameter;
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	e02c      	b.n	80022f6 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80022a0:	f7ff fde5 	bl	8001e6e <inHandlerMode>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d018      	beq.n	80022dc <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6858      	ldr	r0, [r3, #4]
 80022ae:	f107 020c 	add.w	r2, r7, #12
 80022b2:	4639      	mov	r1, r7
 80022b4:	2300      	movs	r3, #0
 80022b6:	f000 fb97 	bl	80029e8 <xQueueGenericSendFromISR>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d001      	beq.n	80022c4 <osMailPut+0x3c>
      return osErrorOS;
 80022c0:	23ff      	movs	r3, #255	; 0xff
 80022c2:	e018      	b.n	80022f6 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d014      	beq.n	80022f4 <osMailPut+0x6c>
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <osMailPut+0x78>)
 80022cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	e00b      	b.n	80022f4 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6858      	ldr	r0, [r3, #4]
 80022e0:	4639      	mov	r1, r7
 80022e2:	2300      	movs	r3, #0
 80022e4:	2200      	movs	r2, #0
 80022e6:	f000 fa81 	bl	80027ec <xQueueGenericSend>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d001      	beq.n	80022f4 <osMailPut+0x6c>
      return osErrorOS;
 80022f0:	23ff      	movs	r3, #255	; 0xff
 80022f2:	e000      	b.n	80022f6 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	e000ed04 	.word	0xe000ed04

08002304 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b08b      	sub	sp, #44	; 0x2c
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10a      	bne.n	8002330 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	617b      	str	r3, [r7, #20]
    return event;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	461c      	mov	r4, r3
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800232a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800232e:	e056      	b.n	80023de <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d103      	bne.n	8002348 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8002340:	f04f 33ff 	mov.w	r3, #4294967295
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
 8002346:	e009      	b.n	800235c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d006      	beq.n	800235c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <osMailGet+0x58>
      ticks = 1;
 8002358:	2301      	movs	r3, #1
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800235c:	f7ff fd87 	bl	8001e6e <inHandlerMode>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01d      	beq.n	80023a2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	6858      	ldr	r0, [r3, #4]
 800236a:	f107 0220 	add.w	r2, r7, #32
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	3304      	adds	r3, #4
 8002374:	4619      	mov	r1, r3
 8002376:	f000 fcaf 	bl	8002cd8 <xQueueReceiveFromISR>
 800237a:	4603      	mov	r3, r0
 800237c:	2b01      	cmp	r3, #1
 800237e:	d102      	bne.n	8002386 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8002380:	2320      	movs	r3, #32
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e001      	b.n	800238a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01e      	beq.n	80023ce <osMailGet+0xca>
 8002390:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <osMailGet+0xe4>)
 8002392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	e015      	b.n	80023ce <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6858      	ldr	r0, [r3, #4]
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	3304      	adds	r3, #4
 80023ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ae:	4619      	mov	r1, r3
 80023b0:	f000 fbb2 	bl	8002b18 <xQueueReceive>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d102      	bne.n	80023c0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80023ba:	2320      	movs	r3, #32
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	e006      	b.n	80023ce <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <osMailGet+0xc6>
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <osMailGet+0xc8>
 80023ca:	2340      	movs	r3, #64	; 0x40
 80023cc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	461c      	mov	r4, r3
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	372c      	adds	r7, #44	; 0x2c
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd90      	pop	{r4, r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000ed04 	.word	0xe000ed04

080023ec <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <osMailFree+0x14>
    return osErrorParameter;
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	e006      	b.n	800240e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	6839      	ldr	r1, [r7, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fe68 	bl	80020dc <osPoolFree>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f103 0208 	add.w	r2, r3, #8
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f04f 32ff 	mov.w	r2, #4294967295
 800242e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f103 0208 	add.w	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f103 0208 	add.w	r2, r3, #8
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	601a      	str	r2, [r3, #0]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d103      	bne.n	80024d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	e00c      	b.n	80024ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3308      	adds	r3, #8
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e002      	b.n	80024e0 <vListInsert+0x2e>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d2f6      	bcs.n	80024da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	601a      	str	r2, [r3, #0]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6892      	ldr	r2, [r2, #8]
 8002538:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6852      	ldr	r2, [r2, #4]
 8002542:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	429a      	cmp	r2, r3
 800254c:	d103      	bne.n	8002556 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	1e5a      	subs	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <xQueueGenericReset+0x2a>
	__asm volatile
 8002588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	60bb      	str	r3, [r7, #8]
}
 800259a:	bf00      	nop
 800259c:	e7fe      	b.n	800259c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800259e:	f001 fd15 	bl	8003fcc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	68f9      	ldr	r1, [r7, #12]
 80025ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	441a      	add	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	3b01      	subs	r3, #1
 80025d0:	68f9      	ldr	r1, [r7, #12]
 80025d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	441a      	add	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	22ff      	movs	r2, #255	; 0xff
 80025e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	22ff      	movs	r2, #255	; 0xff
 80025ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d114      	bne.n	800261e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01a      	beq.n	8002632 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3310      	adds	r3, #16
 8002600:	4618      	mov	r0, r3
 8002602:	f001 f927 	bl	8003854 <xTaskRemoveFromEventList>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d012      	beq.n	8002632 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <xQueueGenericReset+0xcc>)
 800260e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	e009      	b.n	8002632 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3310      	adds	r3, #16
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fef7 	bl	8002416 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3324      	adds	r3, #36	; 0x24
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fef2 	bl	8002416 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002632:	f001 fcfb 	bl	800402c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002636:	2301      	movs	r3, #1
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	e000ed04 	.word	0xe000ed04

08002644 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08e      	sub	sp, #56	; 0x38
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800266a:	bf00      	nop
 800266c:	e7fe      	b.n	800266c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <xQueueGenericCreateStatic+0x52>
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <xQueueGenericCreateStatic+0x56>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <xQueueGenericCreateStatic+0x58>
 800269a:	2300      	movs	r3, #0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	623b      	str	r3, [r7, #32]
}
 80026b2:	bf00      	nop
 80026b4:	e7fe      	b.n	80026b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <xQueueGenericCreateStatic+0x7e>
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <xQueueGenericCreateStatic+0x82>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <xQueueGenericCreateStatic+0x84>
 80026c6:	2300      	movs	r3, #0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	61fb      	str	r3, [r7, #28]
}
 80026de:	bf00      	nop
 80026e0:	e7fe      	b.n	80026e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80026e2:	2348      	movs	r3, #72	; 0x48
 80026e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b48      	cmp	r3, #72	; 0x48
 80026ea:	d00a      	beq.n	8002702 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80026ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	61bb      	str	r3, [r7, #24]
}
 80026fe:	bf00      	nop
 8002700:	e7fe      	b.n	8002700 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002714:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f843 	bl	80027ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800272a:	4618      	mov	r0, r3
 800272c:	3730      	adds	r7, #48	; 0x30
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002732:	b580      	push	{r7, lr}
 8002734:	b08a      	sub	sp, #40	; 0x28
 8002736:	af02      	add	r7, sp, #8
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	4613      	mov	r3, r2
 800273e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <xQueueGenericCreate+0x2a>
	__asm volatile
 8002746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	613b      	str	r3, [r7, #16]
}
 8002758:	bf00      	nop
 800275a:	e7fe      	b.n	800275a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	e004      	b.n	8002772 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3348      	adds	r3, #72	; 0x48
 8002776:	4618      	mov	r0, r3
 8002778:	f001 fd28 	bl	80041cc <pvPortMalloc>
 800277c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00f      	beq.n	80027a4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	3348      	adds	r3, #72	; 0x48
 8002788:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002792:	79fa      	ldrb	r2, [r7, #7]
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f805 	bl	80027ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80027a4:	69bb      	ldr	r3, [r7, #24]
	}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3720      	adds	r7, #32
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e002      	b.n	80027d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027dc:	2101      	movs	r1, #1
 80027de:	69b8      	ldr	r0, [r7, #24]
 80027e0:	f7ff fec8 	bl	8002574 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08e      	sub	sp, #56	; 0x38
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027fa:	2300      	movs	r3, #0
 80027fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <xQueueGenericSend+0x32>
	__asm volatile
 8002808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800281a:	bf00      	nop
 800281c:	e7fe      	b.n	800281c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <xQueueGenericSend+0x40>
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <xQueueGenericSend+0x44>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <xQueueGenericSend+0x46>
 8002830:	2300      	movs	r3, #0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10a      	bne.n	800284c <xQueueGenericSend+0x60>
	__asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002848:	bf00      	nop
 800284a:	e7fe      	b.n	800284a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d103      	bne.n	800285a <xQueueGenericSend+0x6e>
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <xQueueGenericSend+0x72>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <xQueueGenericSend+0x74>
 800285e:	2300      	movs	r3, #0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <xQueueGenericSend+0x8e>
	__asm volatile
 8002864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	623b      	str	r3, [r7, #32]
}
 8002876:	bf00      	nop
 8002878:	e7fe      	b.n	8002878 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800287a:	f001 f9af 	bl	8003bdc <xTaskGetSchedulerState>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <xQueueGenericSend+0x9e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <xQueueGenericSend+0xa2>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <xQueueGenericSend+0xa4>
 800288e:	2300      	movs	r3, #0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <xQueueGenericSend+0xbe>
	__asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	61fb      	str	r3, [r7, #28]
}
 80028a6:	bf00      	nop
 80028a8:	e7fe      	b.n	80028a8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028aa:	f001 fb8f 	bl	8003fcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <xQueueGenericSend+0xd4>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d129      	bne.n	8002914 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028c6:	f000 fa87 	bl	8002dd8 <prvCopyDataToQueue>
 80028ca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d010      	beq.n	80028f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	3324      	adds	r3, #36	; 0x24
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 ffbb 	bl	8003854 <xTaskRemoveFromEventList>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028e4:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <xQueueGenericSend+0x1f8>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	e00a      	b.n	800290c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80028fc:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <xQueueGenericSend+0x1f8>)
 80028fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800290c:	f001 fb8e 	bl	800402c <vPortExitCritical>
				return pdPASS;
 8002910:	2301      	movs	r3, #1
 8002912:	e063      	b.n	80029dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d103      	bne.n	8002922 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800291a:	f001 fb87 	bl	800402c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800291e:	2300      	movs	r3, #0
 8002920:	e05c      	b.n	80029dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fff3 	bl	8003918 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002932:	2301      	movs	r3, #1
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002936:	f001 fb79 	bl	800402c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800293a:	f000 fd9d 	bl	8003478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800293e:	f001 fb45 	bl	8003fcc <vPortEnterCritical>
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002948:	b25b      	sxtb	r3, r3
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294e:	d103      	bne.n	8002958 <xQueueGenericSend+0x16c>
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800295e:	b25b      	sxtb	r3, r3
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d103      	bne.n	800296e <xQueueGenericSend+0x182>
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800296e:	f001 fb5d 	bl	800402c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002972:	1d3a      	adds	r2, r7, #4
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f000 ffe2 	bl	8003944 <xTaskCheckForTimeOut>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d124      	bne.n	80029d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002988:	f000 fb1e 	bl	8002fc8 <prvIsQueueFull>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d018      	beq.n	80029c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	3310      	adds	r3, #16
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f000 ff36 	bl	800380c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029a2:	f000 faa9 	bl	8002ef8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029a6:	f000 fd75 	bl	8003494 <xTaskResumeAll>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f47f af7c 	bne.w	80028aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <xQueueGenericSend+0x1f8>)
 80029b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	e772      	b.n	80028aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029c6:	f000 fa97 	bl	8002ef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029ca:	f000 fd63 	bl	8003494 <xTaskResumeAll>
 80029ce:	e76c      	b.n	80028aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029d2:	f000 fa91 	bl	8002ef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029d6:	f000 fd5d 	bl	8003494 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029da:	2300      	movs	r3, #0
		}
	}
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3738      	adds	r7, #56	; 0x38
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	e000ed04 	.word	0xe000ed04

080029e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08e      	sub	sp, #56	; 0x38
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d103      	bne.n	8002a24 <xQueueGenericSendFromISR+0x3c>
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <xQueueGenericSendFromISR+0x40>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <xQueueGenericSendFromISR+0x42>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	623b      	str	r3, [r7, #32]
}
 8002a40:	bf00      	nop
 8002a42:	e7fe      	b.n	8002a42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d103      	bne.n	8002a52 <xQueueGenericSendFromISR+0x6a>
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <xQueueGenericSendFromISR+0x6e>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <xQueueGenericSendFromISR+0x70>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	61fb      	str	r3, [r7, #28]
}
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a72:	f001 fb6d 	bl	8004150 <vPortValidateInterruptPriority>
	__asm volatile
 8002a76:	f3ef 8211 	mrs	r2, BASEPRI
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	61ba      	str	r2, [r7, #24]
 8002a8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002a8e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <xQueueGenericSendFromISR+0xbc>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d12c      	bne.n	8002afe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ab4:	f000 f990 	bl	8002dd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ab8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d112      	bne.n	8002ae8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d016      	beq.n	8002af8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	3324      	adds	r3, #36	; 0x24
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fec0 	bl	8003854 <xTaskRemoveFromEventList>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00e      	beq.n	8002af8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00b      	beq.n	8002af8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e007      	b.n	8002af8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ae8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002aec:	3301      	adds	r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	b25a      	sxtb	r2, r3
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002af8:	2301      	movs	r3, #1
 8002afa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002afc:	e001      	b.n	8002b02 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f383 8811 	msr	BASEPRI, r3
}
 8002b0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3738      	adds	r7, #56	; 0x38
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	; 0x30
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10a      	bne.n	8002b48 <xQueueReceive+0x30>
	__asm volatile
 8002b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	623b      	str	r3, [r7, #32]
}
 8002b44:	bf00      	nop
 8002b46:	e7fe      	b.n	8002b46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d103      	bne.n	8002b56 <xQueueReceive+0x3e>
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <xQueueReceive+0x42>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <xQueueReceive+0x44>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10a      	bne.n	8002b76 <xQueueReceive+0x5e>
	__asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	61fb      	str	r3, [r7, #28]
}
 8002b72:	bf00      	nop
 8002b74:	e7fe      	b.n	8002b74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b76:	f001 f831 	bl	8003bdc <xTaskGetSchedulerState>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <xQueueReceive+0x6e>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <xQueueReceive+0x72>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <xQueueReceive+0x74>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <xQueueReceive+0x8e>
	__asm volatile
 8002b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	61bb      	str	r3, [r7, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	e7fe      	b.n	8002ba4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ba6:	f001 fa11 	bl	8003fcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d01f      	beq.n	8002bf6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bba:	f000 f977 	bl	8002eac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	1e5a      	subs	r2, r3, #1
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00f      	beq.n	8002bee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	3310      	adds	r3, #16
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 fe3e 	bl	8003854 <xTaskRemoveFromEventList>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002bde:	4b3d      	ldr	r3, [pc, #244]	; (8002cd4 <xQueueReceive+0x1bc>)
 8002be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002bee:	f001 fa1d 	bl	800402c <vPortExitCritical>
				return pdPASS;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e069      	b.n	8002cca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d103      	bne.n	8002c04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bfc:	f001 fa16 	bl	800402c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e062      	b.n	8002cca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c0a:	f107 0310 	add.w	r3, r7, #16
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fe82 	bl	8003918 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c14:	2301      	movs	r3, #1
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c18:	f001 fa08 	bl	800402c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c1c:	f000 fc2c 	bl	8003478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c20:	f001 f9d4 	bl	8003fcc <vPortEnterCritical>
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c2a:	b25b      	sxtb	r3, r3
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d103      	bne.n	8002c3a <xQueueReceive+0x122>
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c40:	b25b      	sxtb	r3, r3
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c46:	d103      	bne.n	8002c50 <xQueueReceive+0x138>
 8002c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c50:	f001 f9ec 	bl	800402c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c54:	1d3a      	adds	r2, r7, #4
 8002c56:	f107 0310 	add.w	r3, r7, #16
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fe71 	bl	8003944 <xTaskCheckForTimeOut>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d123      	bne.n	8002cb0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c6a:	f000 f997 	bl	8002f9c <prvIsQueueEmpty>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d017      	beq.n	8002ca4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	3324      	adds	r3, #36	; 0x24
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fdc5 	bl	800380c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c84:	f000 f938 	bl	8002ef8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c88:	f000 fc04 	bl	8003494 <xTaskResumeAll>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d189      	bne.n	8002ba6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <xQueueReceive+0x1bc>)
 8002c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	e780      	b.n	8002ba6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ca6:	f000 f927 	bl	8002ef8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002caa:	f000 fbf3 	bl	8003494 <xTaskResumeAll>
 8002cae:	e77a      	b.n	8002ba6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb2:	f000 f921 	bl	8002ef8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cb6:	f000 fbed 	bl	8003494 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cbc:	f000 f96e 	bl	8002f9c <prvIsQueueEmpty>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f43f af6f 	beq.w	8002ba6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002cc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3730      	adds	r7, #48	; 0x30
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	e000ed04 	.word	0xe000ed04

08002cd8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08e      	sub	sp, #56	; 0x38
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	623b      	str	r3, [r7, #32]
}
 8002d00:	bf00      	nop
 8002d02:	e7fe      	b.n	8002d02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <xQueueReceiveFromISR+0x3a>
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <xQueueReceiveFromISR+0x3e>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <xQueueReceiveFromISR+0x40>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	61fb      	str	r3, [r7, #28]
}
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d32:	f001 fa0d 	bl	8004150 <vPortValidateInterruptPriority>
	__asm volatile
 8002d36:	f3ef 8211 	mrs	r2, BASEPRI
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	61ba      	str	r2, [r7, #24]
 8002d4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002d4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02f      	beq.n	8002dbe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d6c:	f000 f89e 	bl	8002eac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	1e5a      	subs	r2, r3, #1
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002d78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d112      	bne.n	8002da8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d016      	beq.n	8002db8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	3310      	adds	r3, #16
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fd60 	bl	8003854 <xTaskRemoveFromEventList>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00e      	beq.n	8002db8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00b      	beq.n	8002db8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e007      	b.n	8002db8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dac:	3301      	adds	r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	b25a      	sxtb	r2, r3
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002db8:	2301      	movs	r3, #1
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
 8002dbc:	e001      	b.n	8002dc2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f383 8811 	msr	BASEPRI, r3
}
 8002dcc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3738      	adds	r7, #56	; 0x38
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10d      	bne.n	8002e12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d14d      	bne.n	8002e9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 ff08 	bl	8003c18 <xTaskPriorityDisinherit>
 8002e08:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	e043      	b.n	8002e9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d119      	bne.n	8002e4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6898      	ldr	r0, [r3, #8]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	461a      	mov	r2, r3
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	f001 fbd6 	bl	80045d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	441a      	add	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d32b      	bcc.n	8002e9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	e026      	b.n	8002e9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	68d8      	ldr	r0, [r3, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	461a      	mov	r2, r3
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	f001 fbbc 	bl	80045d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	425b      	negs	r3, r3
 8002e66:	441a      	add	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d207      	bcs.n	8002e88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	425b      	negs	r3, r3
 8002e82:	441a      	add	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d105      	bne.n	8002e9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ea2:	697b      	ldr	r3, [r7, #20]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d018      	beq.n	8002ef0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	441a      	add	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d303      	bcc.n	8002ee0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68d9      	ldr	r1, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6838      	ldr	r0, [r7, #0]
 8002eec:	f001 fb72 	bl	80045d4 <memcpy>
	}
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f00:	f001 f864 	bl	8003fcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f0c:	e011      	b.n	8002f32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d012      	beq.n	8002f3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3324      	adds	r3, #36	; 0x24
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fc9a 	bl	8003854 <xTaskRemoveFromEventList>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f26:	f000 fd6f 	bl	8003a08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	dce9      	bgt.n	8002f0e <prvUnlockQueue+0x16>
 8002f3a:	e000      	b.n	8002f3e <prvUnlockQueue+0x46>
					break;
 8002f3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	22ff      	movs	r2, #255	; 0xff
 8002f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f46:	f001 f871 	bl	800402c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f4a:	f001 f83f 	bl	8003fcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f56:	e011      	b.n	8002f7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d012      	beq.n	8002f86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3310      	adds	r3, #16
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fc75 	bl	8003854 <xTaskRemoveFromEventList>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f70:	f000 fd4a 	bl	8003a08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f74:	7bbb      	ldrb	r3, [r7, #14]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	dce9      	bgt.n	8002f58 <prvUnlockQueue+0x60>
 8002f84:	e000      	b.n	8002f88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	22ff      	movs	r2, #255	; 0xff
 8002f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f90:	f001 f84c 	bl	800402c <vPortExitCritical>
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fa4:	f001 f812 	bl	8003fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e001      	b.n	8002fba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fba:	f001 f837 	bl	800402c <vPortExitCritical>

	return xReturn;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fd0:	f000 fffc 	bl	8003fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d102      	bne.n	8002fe6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e001      	b.n	8002fea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fea:	f001 f81f 	bl	800402c <vPortExitCritical>

	return xReturn;
 8002fee:	68fb      	ldr	r3, [r7, #12]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08e      	sub	sp, #56	; 0x38
 8002ffc:	af04      	add	r7, sp, #16
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <xTaskCreateStatic+0x2a>
	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	623b      	str	r3, [r7, #32]
}
 800301e:	bf00      	nop
 8003020:	e7fe      	b.n	8003020 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <xTaskCreateStatic+0x46>
	__asm volatile
 8003028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	61fb      	str	r3, [r7, #28]
}
 800303a:	bf00      	nop
 800303c:	e7fe      	b.n	800303c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800303e:	23b4      	movs	r3, #180	; 0xb4
 8003040:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2bb4      	cmp	r3, #180	; 0xb4
 8003046:	d00a      	beq.n	800305e <xTaskCreateStatic+0x66>
	__asm volatile
 8003048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	61bb      	str	r3, [r7, #24]
}
 800305a:	bf00      	nop
 800305c:	e7fe      	b.n	800305c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01e      	beq.n	80030a2 <xTaskCreateStatic+0xaa>
 8003064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003066:	2b00      	cmp	r3, #0
 8003068:	d01b      	beq.n	80030a2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003072:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	2202      	movs	r2, #2
 8003078:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800307c:	2300      	movs	r3, #0
 800307e:	9303      	str	r3, [sp, #12]
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	9302      	str	r3, [sp, #8]
 8003084:	f107 0314 	add.w	r3, r7, #20
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f851 	bl	800313c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800309a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800309c:	f000 f8e4 	bl	8003268 <prvAddNewTaskToReadyList>
 80030a0:	e001      	b.n	80030a6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030a6:	697b      	ldr	r3, [r7, #20]
	}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3728      	adds	r7, #40	; 0x28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 f881 	bl	80041cc <pvPortMalloc>
 80030ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00e      	beq.n	80030f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80030d2:	20b4      	movs	r0, #180	; 0xb4
 80030d4:	f001 f87a 	bl	80041cc <pvPortMalloc>
 80030d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
 80030e6:	e005      	b.n	80030f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030e8:	6978      	ldr	r0, [r7, #20]
 80030ea:	f001 f933 	bl	8004354 <vPortFree>
 80030ee:	e001      	b.n	80030f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d017      	beq.n	800312a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003102:	88fa      	ldrh	r2, [r7, #6]
 8003104:	2300      	movs	r3, #0
 8003106:	9303      	str	r3, [sp, #12]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	9302      	str	r3, [sp, #8]
 800310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f80f 	bl	800313c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800311e:	69f8      	ldr	r0, [r7, #28]
 8003120:	f000 f8a2 	bl	8003268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003124:	2301      	movs	r3, #1
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	e002      	b.n	8003130 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800312a:	f04f 33ff 	mov.w	r3, #4294967295
 800312e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003130:	69bb      	ldr	r3, [r7, #24]
	}
 8003132:	4618      	mov	r0, r3
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003154:	3b01      	subs	r3, #1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f023 0307 	bic.w	r3, r3, #7
 8003162:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <prvInitialiseNewTask+0x48>
	__asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	617b      	str	r3, [r7, #20]
}
 8003180:	bf00      	nop
 8003182:	e7fe      	b.n	8003182 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003184:	2300      	movs	r3, #0
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	e012      	b.n	80031b0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	4413      	add	r3, r2
 8003190:	7819      	ldrb	r1, [r3, #0]
 8003192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	4413      	add	r3, r2
 8003198:	3334      	adds	r3, #52	; 0x34
 800319a:	460a      	mov	r2, r1
 800319c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	4413      	add	r3, r2
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3301      	adds	r3, #1
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	d9e9      	bls.n	800318a <prvInitialiseNewTask+0x4e>
 80031b6:	e000      	b.n	80031ba <prvInitialiseNewTask+0x7e>
		{
			break;
 80031b8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	2b06      	cmp	r3, #6
 80031c6:	d901      	bls.n	80031cc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031c8:	2306      	movs	r3, #6
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	2200      	movs	r2, #0
 80031dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	3304      	adds	r3, #4
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f936 	bl	8002454 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	3318      	adds	r3, #24
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff f931 	bl	8002454 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	f1c3 0207 	rsb	r2, r3, #7
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003206:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320a:	2200      	movs	r2, #0
 800320c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	2200      	movs	r2, #0
 8003214:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321a:	334c      	adds	r3, #76	; 0x4c
 800321c:	2260      	movs	r2, #96	; 0x60
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f001 f9e5 	bl	80045f0 <memset>
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	4a0c      	ldr	r2, [pc, #48]	; (800325c <prvInitialiseNewTask+0x120>)
 800322a:	651a      	str	r2, [r3, #80]	; 0x50
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	4a0c      	ldr	r2, [pc, #48]	; (8003260 <prvInitialiseNewTask+0x124>)
 8003230:	655a      	str	r2, [r3, #84]	; 0x54
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <prvInitialiseNewTask+0x128>)
 8003236:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	68f9      	ldr	r1, [r7, #12]
 800323c:	69b8      	ldr	r0, [r7, #24]
 800323e:	f000 fdd7 	bl	8003df0 <pxPortInitialiseStack>
 8003242:	4602      	mov	r2, r0
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003252:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003254:	bf00      	nop
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	08005004 	.word	0x08005004
 8003260:	08005024 	.word	0x08005024
 8003264:	08004fe4 	.word	0x08004fe4

08003268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003270:	f000 feac 	bl	8003fcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003274:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <prvAddNewTaskToReadyList+0xb8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	4a29      	ldr	r2, [pc, #164]	; (8003320 <prvAddNewTaskToReadyList+0xb8>)
 800327c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800327e:	4b29      	ldr	r3, [pc, #164]	; (8003324 <prvAddNewTaskToReadyList+0xbc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003286:	4a27      	ldr	r2, [pc, #156]	; (8003324 <prvAddNewTaskToReadyList+0xbc>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800328c:	4b24      	ldr	r3, [pc, #144]	; (8003320 <prvAddNewTaskToReadyList+0xb8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d110      	bne.n	80032b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003294:	f000 fbdc 	bl	8003a50 <prvInitialiseTaskLists>
 8003298:	e00d      	b.n	80032b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800329a:	4b23      	ldr	r3, [pc, #140]	; (8003328 <prvAddNewTaskToReadyList+0xc0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032a2:	4b20      	ldr	r3, [pc, #128]	; (8003324 <prvAddNewTaskToReadyList+0xbc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d802      	bhi.n	80032b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80032b0:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <prvAddNewTaskToReadyList+0xbc>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <prvAddNewTaskToReadyList+0xc4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <prvAddNewTaskToReadyList+0xc4>)
 80032be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	2201      	movs	r2, #1
 80032c6:	409a      	lsls	r2, r3
 80032c8:	4b19      	ldr	r3, [pc, #100]	; (8003330 <prvAddNewTaskToReadyList+0xc8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <prvAddNewTaskToReadyList+0xc8>)
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4a15      	ldr	r2, [pc, #84]	; (8003334 <prvAddNewTaskToReadyList+0xcc>)
 80032e0:	441a      	add	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	4610      	mov	r0, r2
 80032ea:	f7ff f8bf 	bl	800246c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032ee:	f000 fe9d 	bl	800402c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <prvAddNewTaskToReadyList+0xc0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00e      	beq.n	8003318 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <prvAddNewTaskToReadyList+0xbc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	429a      	cmp	r2, r3
 8003306:	d207      	bcs.n	8003318 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <prvAddNewTaskToReadyList+0xd0>)
 800330a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000448 	.word	0x20000448
 8003324:	20000348 	.word	0x20000348
 8003328:	20000454 	.word	0x20000454
 800332c:	20000464 	.word	0x20000464
 8003330:	20000450 	.word	0x20000450
 8003334:	2000034c 	.word	0x2000034c
 8003338:	e000ed04 	.word	0xe000ed04

0800333c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d017      	beq.n	800337e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <vTaskDelay+0x60>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <vTaskDelay+0x30>
	__asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	60bb      	str	r3, [r7, #8]
}
 8003368:	bf00      	nop
 800336a:	e7fe      	b.n	800336a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800336c:	f000 f884 	bl	8003478 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003370:	2100      	movs	r1, #0
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fcd6 	bl	8003d24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003378:	f000 f88c 	bl	8003494 <xTaskResumeAll>
 800337c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d107      	bne.n	8003394 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <vTaskDelay+0x64>)
 8003386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000470 	.word	0x20000470
 80033a0:	e000ed04 	.word	0xe000ed04

080033a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80033b2:	463a      	mov	r2, r7
 80033b4:	1d39      	adds	r1, r7, #4
 80033b6:	f107 0308 	add.w	r3, r7, #8
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fc ff40 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033c0:	6839      	ldr	r1, [r7, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	9202      	str	r2, [sp, #8]
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	2300      	movs	r3, #0
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2300      	movs	r3, #0
 80033d0:	460a      	mov	r2, r1
 80033d2:	4921      	ldr	r1, [pc, #132]	; (8003458 <vTaskStartScheduler+0xb4>)
 80033d4:	4821      	ldr	r0, [pc, #132]	; (800345c <vTaskStartScheduler+0xb8>)
 80033d6:	f7ff fe0f 	bl	8002ff8 <xTaskCreateStatic>
 80033da:	4603      	mov	r3, r0
 80033dc:	4a20      	ldr	r2, [pc, #128]	; (8003460 <vTaskStartScheduler+0xbc>)
 80033de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033e0:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <vTaskStartScheduler+0xbc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033e8:	2301      	movs	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e001      	b.n	80033f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d11b      	bne.n	8003430 <vTaskStartScheduler+0x8c>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	613b      	str	r3, [r7, #16]
}
 800340a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800340c:	4b15      	ldr	r3, [pc, #84]	; (8003464 <vTaskStartScheduler+0xc0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	334c      	adds	r3, #76	; 0x4c
 8003412:	4a15      	ldr	r2, [pc, #84]	; (8003468 <vTaskStartScheduler+0xc4>)
 8003414:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <vTaskStartScheduler+0xc8>)
 8003418:	f04f 32ff 	mov.w	r2, #4294967295
 800341c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800341e:	4b14      	ldr	r3, [pc, #80]	; (8003470 <vTaskStartScheduler+0xcc>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003424:	4b13      	ldr	r3, [pc, #76]	; (8003474 <vTaskStartScheduler+0xd0>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800342a:	f000 fd5d 	bl	8003ee8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800342e:	e00e      	b.n	800344e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d10a      	bne.n	800344e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	60fb      	str	r3, [r7, #12]
}
 800344a:	bf00      	nop
 800344c:	e7fe      	b.n	800344c <vTaskStartScheduler+0xa8>
}
 800344e:	bf00      	nop
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	08004fc4 	.word	0x08004fc4
 800345c:	08003a21 	.word	0x08003a21
 8003460:	2000046c 	.word	0x2000046c
 8003464:	20000348 	.word	0x20000348
 8003468:	20000010 	.word	0x20000010
 800346c:	20000468 	.word	0x20000468
 8003470:	20000454 	.word	0x20000454
 8003474:	2000044c 	.word	0x2000044c

08003478 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800347c:	4b04      	ldr	r3, [pc, #16]	; (8003490 <vTaskSuspendAll+0x18>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	4a03      	ldr	r2, [pc, #12]	; (8003490 <vTaskSuspendAll+0x18>)
 8003484:	6013      	str	r3, [r2, #0]
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000470 	.word	0x20000470

08003494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034a2:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <xTaskResumeAll+0x114>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	603b      	str	r3, [r7, #0]
}
 80034bc:	bf00      	nop
 80034be:	e7fe      	b.n	80034be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034c0:	f000 fd84 	bl	8003fcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034c4:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <xTaskResumeAll+0x114>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	4a37      	ldr	r2, [pc, #220]	; (80035a8 <xTaskResumeAll+0x114>)
 80034cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ce:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <xTaskResumeAll+0x114>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d161      	bne.n	800359a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034d6:	4b35      	ldr	r3, [pc, #212]	; (80035ac <xTaskResumeAll+0x118>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d05d      	beq.n	800359a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034de:	e02e      	b.n	800353e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80034e0:	4b33      	ldr	r3, [pc, #204]	; (80035b0 <xTaskResumeAll+0x11c>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3318      	adds	r3, #24
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff f818 	bl	8002522 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff f813 	bl	8002522 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	2201      	movs	r2, #1
 8003502:	409a      	lsls	r2, r3
 8003504:	4b2b      	ldr	r3, [pc, #172]	; (80035b4 <xTaskResumeAll+0x120>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4313      	orrs	r3, r2
 800350a:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <xTaskResumeAll+0x120>)
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4a27      	ldr	r2, [pc, #156]	; (80035b8 <xTaskResumeAll+0x124>)
 800351c:	441a      	add	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3304      	adds	r3, #4
 8003522:	4619      	mov	r1, r3
 8003524:	4610      	mov	r0, r2
 8003526:	f7fe ffa1 	bl	800246c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	4b23      	ldr	r3, [pc, #140]	; (80035bc <xTaskResumeAll+0x128>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	429a      	cmp	r2, r3
 8003536:	d302      	bcc.n	800353e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <xTaskResumeAll+0x12c>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800353e:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <xTaskResumeAll+0x11c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1cc      	bne.n	80034e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800354c:	f000 fb22 	bl	8003b94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003550:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <xTaskResumeAll+0x130>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d010      	beq.n	800357e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800355c:	f000 f836 	bl	80035cc <xTaskIncrementTick>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003566:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <xTaskResumeAll+0x12c>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3b01      	subs	r3, #1
 8003570:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f1      	bne.n	800355c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <xTaskResumeAll+0x130>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800357e:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <xTaskResumeAll+0x12c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003586:	2301      	movs	r3, #1
 8003588:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <xTaskResumeAll+0x134>)
 800358c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800359a:	f000 fd47 	bl	800402c <vPortExitCritical>

	return xAlreadyYielded;
 800359e:	68bb      	ldr	r3, [r7, #8]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000470 	.word	0x20000470
 80035ac:	20000448 	.word	0x20000448
 80035b0:	20000408 	.word	0x20000408
 80035b4:	20000450 	.word	0x20000450
 80035b8:	2000034c 	.word	0x2000034c
 80035bc:	20000348 	.word	0x20000348
 80035c0:	2000045c 	.word	0x2000045c
 80035c4:	20000458 	.word	0x20000458
 80035c8:	e000ed04 	.word	0xe000ed04

080035cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d6:	4b51      	ldr	r3, [pc, #324]	; (800371c <xTaskIncrementTick+0x150>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 808d 	bne.w	80036fa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035e0:	4b4f      	ldr	r3, [pc, #316]	; (8003720 <xTaskIncrementTick+0x154>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3301      	adds	r3, #1
 80035e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035e8:	4a4d      	ldr	r2, [pc, #308]	; (8003720 <xTaskIncrementTick+0x154>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d120      	bne.n	8003636 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80035f4:	4b4b      	ldr	r3, [pc, #300]	; (8003724 <xTaskIncrementTick+0x158>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <xTaskIncrementTick+0x48>
	__asm volatile
 80035fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003602:	f383 8811 	msr	BASEPRI, r3
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	f3bf 8f4f 	dsb	sy
 800360e:	603b      	str	r3, [r7, #0]
}
 8003610:	bf00      	nop
 8003612:	e7fe      	b.n	8003612 <xTaskIncrementTick+0x46>
 8003614:	4b43      	ldr	r3, [pc, #268]	; (8003724 <xTaskIncrementTick+0x158>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	4b43      	ldr	r3, [pc, #268]	; (8003728 <xTaskIncrementTick+0x15c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a41      	ldr	r2, [pc, #260]	; (8003724 <xTaskIncrementTick+0x158>)
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	4a41      	ldr	r2, [pc, #260]	; (8003728 <xTaskIncrementTick+0x15c>)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b40      	ldr	r3, [pc, #256]	; (800372c <xTaskIncrementTick+0x160>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3301      	adds	r3, #1
 800362e:	4a3f      	ldr	r2, [pc, #252]	; (800372c <xTaskIncrementTick+0x160>)
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	f000 faaf 	bl	8003b94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003636:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <xTaskIncrementTick+0x164>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	429a      	cmp	r2, r3
 800363e:	d34d      	bcc.n	80036dc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003640:	4b38      	ldr	r3, [pc, #224]	; (8003724 <xTaskIncrementTick+0x158>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <xTaskIncrementTick+0x82>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <xTaskIncrementTick+0x84>
 800364e:	2300      	movs	r3, #0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003654:	4b36      	ldr	r3, [pc, #216]	; (8003730 <xTaskIncrementTick+0x164>)
 8003656:	f04f 32ff 	mov.w	r2, #4294967295
 800365a:	601a      	str	r2, [r3, #0]
					break;
 800365c:	e03e      	b.n	80036dc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800365e:	4b31      	ldr	r3, [pc, #196]	; (8003724 <xTaskIncrementTick+0x158>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	429a      	cmp	r2, r3
 8003674:	d203      	bcs.n	800367e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003676:	4a2e      	ldr	r2, [pc, #184]	; (8003730 <xTaskIncrementTick+0x164>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6013      	str	r3, [r2, #0]
						break;
 800367c:	e02e      	b.n	80036dc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	3304      	adds	r3, #4
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe ff4d 	bl	8002522 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	2b00      	cmp	r3, #0
 800368e:	d004      	beq.n	800369a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	3318      	adds	r3, #24
 8003694:	4618      	mov	r0, r3
 8003696:	f7fe ff44 	bl	8002522 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	2201      	movs	r2, #1
 80036a0:	409a      	lsls	r2, r3
 80036a2:	4b24      	ldr	r3, [pc, #144]	; (8003734 <xTaskIncrementTick+0x168>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	4a22      	ldr	r2, [pc, #136]	; (8003734 <xTaskIncrementTick+0x168>)
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <xTaskIncrementTick+0x16c>)
 80036ba:	441a      	add	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	3304      	adds	r3, #4
 80036c0:	4619      	mov	r1, r3
 80036c2:	4610      	mov	r0, r2
 80036c4:	f7fe fed2 	bl	800246c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <xTaskIncrementTick+0x170>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d3b4      	bcc.n	8003640 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80036d6:	2301      	movs	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036da:	e7b1      	b.n	8003640 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036dc:	4b17      	ldr	r3, [pc, #92]	; (800373c <xTaskIncrementTick+0x170>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e2:	4915      	ldr	r1, [pc, #84]	; (8003738 <xTaskIncrementTick+0x16c>)
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d907      	bls.n	8003704 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80036f4:	2301      	movs	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e004      	b.n	8003704 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <xTaskIncrementTick+0x174>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	4a0f      	ldr	r2, [pc, #60]	; (8003740 <xTaskIncrementTick+0x174>)
 8003702:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <xTaskIncrementTick+0x178>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800370c:	2301      	movs	r3, #1
 800370e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003710:	697b      	ldr	r3, [r7, #20]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000470 	.word	0x20000470
 8003720:	2000044c 	.word	0x2000044c
 8003724:	20000400 	.word	0x20000400
 8003728:	20000404 	.word	0x20000404
 800372c:	20000460 	.word	0x20000460
 8003730:	20000468 	.word	0x20000468
 8003734:	20000450 	.word	0x20000450
 8003738:	2000034c 	.word	0x2000034c
 800373c:	20000348 	.word	0x20000348
 8003740:	20000458 	.word	0x20000458
 8003744:	2000045c 	.word	0x2000045c

08003748 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800374e:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <vTaskSwitchContext+0xac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003756:	4b28      	ldr	r3, [pc, #160]	; (80037f8 <vTaskSwitchContext+0xb0>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800375c:	e044      	b.n	80037e8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800375e:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <vTaskSwitchContext+0xb0>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <vTaskSwitchContext+0xb4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003772:	7afb      	ldrb	r3, [r7, #11]
 8003774:	f1c3 031f 	rsb	r3, r3, #31
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	4921      	ldr	r1, [pc, #132]	; (8003800 <vTaskSwitchContext+0xb8>)
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	607b      	str	r3, [r7, #4]
}
 80037a0:	bf00      	nop
 80037a2:	e7fe      	b.n	80037a2 <vTaskSwitchContext+0x5a>
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4a14      	ldr	r2, [pc, #80]	; (8003800 <vTaskSwitchContext+0xb8>)
 80037b0:	4413      	add	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	3308      	adds	r3, #8
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d104      	bne.n	80037d4 <vTaskSwitchContext+0x8c>
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <vTaskSwitchContext+0xbc>)
 80037dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80037de:	4b09      	ldr	r3, [pc, #36]	; (8003804 <vTaskSwitchContext+0xbc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	334c      	adds	r3, #76	; 0x4c
 80037e4:	4a08      	ldr	r2, [pc, #32]	; (8003808 <vTaskSwitchContext+0xc0>)
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000470 	.word	0x20000470
 80037f8:	2000045c 	.word	0x2000045c
 80037fc:	20000450 	.word	0x20000450
 8003800:	2000034c 	.word	0x2000034c
 8003804:	20000348 	.word	0x20000348
 8003808:	20000010 	.word	0x20000010

0800380c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	60fb      	str	r3, [r7, #12]
}
 800382e:	bf00      	nop
 8003830:	e7fe      	b.n	8003830 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <vTaskPlaceOnEventList+0x44>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3318      	adds	r3, #24
 8003838:	4619      	mov	r1, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fe fe39 	bl	80024b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003840:	2101      	movs	r1, #1
 8003842:	6838      	ldr	r0, [r7, #0]
 8003844:	f000 fa6e 	bl	8003d24 <prvAddCurrentTaskToDelayedList>
}
 8003848:	bf00      	nop
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000348 	.word	0x20000348

08003854 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	60fb      	str	r3, [r7, #12]
}
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	3318      	adds	r3, #24
 8003884:	4618      	mov	r0, r3
 8003886:	f7fe fe4c 	bl	8002522 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800388a:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <xTaskRemoveFromEventList+0xac>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d11c      	bne.n	80038cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	3304      	adds	r3, #4
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe fe43 	bl	8002522 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	2201      	movs	r2, #1
 80038a2:	409a      	lsls	r2, r3
 80038a4:	4b17      	ldr	r3, [pc, #92]	; (8003904 <xTaskRemoveFromEventList+0xb0>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	4a16      	ldr	r2, [pc, #88]	; (8003904 <xTaskRemoveFromEventList+0xb0>)
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4a13      	ldr	r2, [pc, #76]	; (8003908 <xTaskRemoveFromEventList+0xb4>)
 80038bc:	441a      	add	r2, r3
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	3304      	adds	r3, #4
 80038c2:	4619      	mov	r1, r3
 80038c4:	4610      	mov	r0, r2
 80038c6:	f7fe fdd1 	bl	800246c <vListInsertEnd>
 80038ca:	e005      	b.n	80038d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	3318      	adds	r3, #24
 80038d0:	4619      	mov	r1, r3
 80038d2:	480e      	ldr	r0, [pc, #56]	; (800390c <xTaskRemoveFromEventList+0xb8>)
 80038d4:	f7fe fdca 	bl	800246c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <xTaskRemoveFromEventList+0xbc>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d905      	bls.n	80038f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038e6:	2301      	movs	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <xTaskRemoveFromEventList+0xc0>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e001      	b.n	80038f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80038f6:	697b      	ldr	r3, [r7, #20]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20000470 	.word	0x20000470
 8003904:	20000450 	.word	0x20000450
 8003908:	2000034c 	.word	0x2000034c
 800390c:	20000408 	.word	0x20000408
 8003910:	20000348 	.word	0x20000348
 8003914:	2000045c 	.word	0x2000045c

08003918 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <vTaskInternalSetTimeOutState+0x24>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <vTaskInternalSetTimeOutState+0x28>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	605a      	str	r2, [r3, #4]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000460 	.word	0x20000460
 8003940:	2000044c 	.word	0x2000044c

08003944 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	613b      	str	r3, [r7, #16]
}
 8003966:	bf00      	nop
 8003968:	e7fe      	b.n	8003968 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	60fb      	str	r3, [r7, #12]
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003986:	f000 fb21 	bl	8003fcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800398a:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <xTaskCheckForTimeOut+0xbc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	d102      	bne.n	80039aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
 80039a8:	e023      	b.n	80039f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <xTaskCheckForTimeOut+0xc0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d007      	beq.n	80039c6 <xTaskCheckForTimeOut+0x82>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d302      	bcc.n	80039c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039c0:	2301      	movs	r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	e015      	b.n	80039f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d20b      	bcs.n	80039e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	1ad2      	subs	r2, r2, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff9b 	bl	8003918 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	e004      	b.n	80039f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039ee:	2301      	movs	r3, #1
 80039f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039f2:	f000 fb1b 	bl	800402c <vPortExitCritical>

	return xReturn;
 80039f6:	69fb      	ldr	r3, [r7, #28]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3720      	adds	r7, #32
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	2000044c 	.word	0x2000044c
 8003a04:	20000460 	.word	0x20000460

08003a08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <vTaskMissedYield+0x14>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
}
 8003a12:	bf00      	nop
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	2000045c 	.word	0x2000045c

08003a20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a28:	f000 f852 	bl	8003ad0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <prvIdleTask+0x28>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d9f9      	bls.n	8003a28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <prvIdleTask+0x2c>)
 8003a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a44:	e7f0      	b.n	8003a28 <prvIdleTask+0x8>
 8003a46:	bf00      	nop
 8003a48:	2000034c 	.word	0x2000034c
 8003a4c:	e000ed04 	.word	0xe000ed04

08003a50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	e00c      	b.n	8003a76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <prvInitialiseTaskLists+0x60>)
 8003a68:	4413      	add	r3, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fcd3 	bl	8002416 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3301      	adds	r3, #1
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b06      	cmp	r3, #6
 8003a7a:	d9ef      	bls.n	8003a5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a7c:	480d      	ldr	r0, [pc, #52]	; (8003ab4 <prvInitialiseTaskLists+0x64>)
 8003a7e:	f7fe fcca 	bl	8002416 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a82:	480d      	ldr	r0, [pc, #52]	; (8003ab8 <prvInitialiseTaskLists+0x68>)
 8003a84:	f7fe fcc7 	bl	8002416 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a88:	480c      	ldr	r0, [pc, #48]	; (8003abc <prvInitialiseTaskLists+0x6c>)
 8003a8a:	f7fe fcc4 	bl	8002416 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a8e:	480c      	ldr	r0, [pc, #48]	; (8003ac0 <prvInitialiseTaskLists+0x70>)
 8003a90:	f7fe fcc1 	bl	8002416 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a94:	480b      	ldr	r0, [pc, #44]	; (8003ac4 <prvInitialiseTaskLists+0x74>)
 8003a96:	f7fe fcbe 	bl	8002416 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <prvInitialiseTaskLists+0x78>)
 8003a9c:	4a05      	ldr	r2, [pc, #20]	; (8003ab4 <prvInitialiseTaskLists+0x64>)
 8003a9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <prvInitialiseTaskLists+0x7c>)
 8003aa2:	4a05      	ldr	r2, [pc, #20]	; (8003ab8 <prvInitialiseTaskLists+0x68>)
 8003aa4:	601a      	str	r2, [r3, #0]
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	2000034c 	.word	0x2000034c
 8003ab4:	200003d8 	.word	0x200003d8
 8003ab8:	200003ec 	.word	0x200003ec
 8003abc:	20000408 	.word	0x20000408
 8003ac0:	2000041c 	.word	0x2000041c
 8003ac4:	20000434 	.word	0x20000434
 8003ac8:	20000400 	.word	0x20000400
 8003acc:	20000404 	.word	0x20000404

08003ad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ad6:	e019      	b.n	8003b0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ad8:	f000 fa78 	bl	8003fcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003adc:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <prvCheckTasksWaitingTermination+0x50>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe fd1a 	bl	8002522 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <prvCheckTasksWaitingTermination+0x54>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	4a0b      	ldr	r2, [pc, #44]	; (8003b24 <prvCheckTasksWaitingTermination+0x54>)
 8003af6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <prvCheckTasksWaitingTermination+0x58>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <prvCheckTasksWaitingTermination+0x58>)
 8003b00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b02:	f000 fa93 	bl	800402c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f810 	bl	8003b2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <prvCheckTasksWaitingTermination+0x58>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e1      	bne.n	8003ad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	2000041c 	.word	0x2000041c
 8003b24:	20000448 	.word	0x20000448
 8003b28:	20000430 	.word	0x20000430

08003b2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	334c      	adds	r3, #76	; 0x4c
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fdc9 	bl	80046d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d108      	bne.n	8003b5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fc01 	bl	8004354 <vPortFree>
				vPortFree( pxTCB );
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fbfe 	bl	8004354 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b58:	e018      	b.n	8003b8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d103      	bne.n	8003b6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fbf5 	bl	8004354 <vPortFree>
	}
 8003b6a:	e00f      	b.n	8003b8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d00a      	beq.n	8003b8c <prvDeleteTCB+0x60>
	__asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	60fb      	str	r3, [r7, #12]
}
 8003b88:	bf00      	nop
 8003b8a:	e7fe      	b.n	8003b8a <prvDeleteTCB+0x5e>
	}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <prvResetNextTaskUnblockTime+0x40>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <prvResetNextTaskUnblockTime+0x14>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <prvResetNextTaskUnblockTime+0x16>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d004      	beq.n	8003bb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <prvResetNextTaskUnblockTime+0x44>)
 8003bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003bb6:	e008      	b.n	8003bca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <prvResetNextTaskUnblockTime+0x40>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4a04      	ldr	r2, [pc, #16]	; (8003bd8 <prvResetNextTaskUnblockTime+0x44>)
 8003bc8:	6013      	str	r3, [r2, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr
 8003bd4:	20000400 	.word	0x20000400
 8003bd8:	20000468 	.word	0x20000468

08003bdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003be2:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <xTaskGetSchedulerState+0x34>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bea:	2301      	movs	r3, #1
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	e008      	b.n	8003c02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bf0:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <xTaskGetSchedulerState+0x38>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	e001      	b.n	8003c02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c02:	687b      	ldr	r3, [r7, #4]
	}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000454 	.word	0x20000454
 8003c14:	20000470 	.word	0x20000470

08003c18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d06e      	beq.n	8003d0c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c2e:	4b3a      	ldr	r3, [pc, #232]	; (8003d18 <xTaskPriorityDisinherit+0x100>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d00a      	beq.n	8003c4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	60fb      	str	r3, [r7, #12]
}
 8003c4a:	bf00      	nop
 8003c4c:	e7fe      	b.n	8003c4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60bb      	str	r3, [r7, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c70:	1e5a      	subs	r2, r3, #1
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d044      	beq.n	8003d0c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d140      	bne.n	8003d0c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fc47 	bl	8002522 <uxListRemove>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d115      	bne.n	8003cc6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9e:	491f      	ldr	r1, [pc, #124]	; (8003d1c <xTaskPriorityDisinherit+0x104>)
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <xTaskPriorityDisinherit+0xae>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43da      	mvns	r2, r3
 8003cbc:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <xTaskPriorityDisinherit+0x108>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <xTaskPriorityDisinherit+0x108>)
 8003cc4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	f1c3 0207 	rsb	r2, r3, #7
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	2201      	movs	r2, #1
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <xTaskPriorityDisinherit+0x108>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	; (8003d20 <xTaskPriorityDisinherit+0x108>)
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <xTaskPriorityDisinherit+0x104>)
 8003cfa:	441a      	add	r2, r3
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	4619      	mov	r1, r3
 8003d02:	4610      	mov	r0, r2
 8003d04:	f7fe fbb2 	bl	800246c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d0c:	697b      	ldr	r3, [r7, #20]
	}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000348 	.word	0x20000348
 8003d1c:	2000034c 	.word	0x2000034c
 8003d20:	20000450 	.word	0x20000450

08003d24 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d2e:	4b29      	ldr	r3, [pc, #164]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d34:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe fbf1 	bl	8002522 <uxListRemove>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d10a      	bne.n	8003d7c <prvAddCurrentTaskToDelayedList+0x58>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3304      	adds	r3, #4
 8003d72:	4619      	mov	r1, r3
 8003d74:	481a      	ldr	r0, [pc, #104]	; (8003de0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d76:	f7fe fb79 	bl	800246c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d7a:	e026      	b.n	8003dca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d84:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d209      	bcs.n	8003da8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d94:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f7fe fb86 	bl	80024b2 <vListInsert>
}
 8003da6:	e010      	b.n	8003dca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003da8:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f7fe fb7c 	bl	80024b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d202      	bcs.n	8003dca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003dc4:	4a09      	ldr	r2, [pc, #36]	; (8003dec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	6013      	str	r3, [r2, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	2000044c 	.word	0x2000044c
 8003dd8:	20000348 	.word	0x20000348
 8003ddc:	20000450 	.word	0x20000450
 8003de0:	20000434 	.word	0x20000434
 8003de4:	20000404 	.word	0x20000404
 8003de8:	20000400 	.word	0x20000400
 8003dec:	20000468 	.word	0x20000468

08003df0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3b04      	subs	r3, #4
 8003e00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3b04      	subs	r3, #4
 8003e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f023 0201 	bic.w	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3b04      	subs	r3, #4
 8003e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e20:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <pxPortInitialiseStack+0x54>)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3b14      	subs	r3, #20
 8003e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3b20      	subs	r3, #32
 8003e36:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e38:	68fb      	ldr	r3, [r7, #12]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	08003e49 	.word	0x08003e49

08003e48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e52:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <prvTaskExitError+0x54>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d00a      	beq.n	8003e72 <prvTaskExitError+0x2a>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	60fb      	str	r3, [r7, #12]
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <prvTaskExitError+0x28>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	60bb      	str	r3, [r7, #8]
}
 8003e84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e86:	bf00      	nop
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0fc      	beq.n	8003e88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	2000000c 	.word	0x2000000c

08003ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <pxCurrentTCBConst2>)
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	6808      	ldr	r0, [r1, #0]
 8003ea6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003eaa:	f380 8809 	msr	PSP, r0
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f380 8811 	msr	BASEPRI, r0
 8003eba:	f04e 0e0d 	orr.w	lr, lr, #13
 8003ebe:	4770      	bx	lr

08003ec0 <pxCurrentTCBConst2>:
 8003ec0:	20000348 	.word	0x20000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop

08003ec8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003ec8:	4806      	ldr	r0, [pc, #24]	; (8003ee4 <prvPortStartFirstTask+0x1c>)
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	6800      	ldr	r0, [r0, #0]
 8003ece:	f380 8808 	msr	MSP, r0
 8003ed2:	b662      	cpsie	i
 8003ed4:	b661      	cpsie	f
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	df00      	svc	0
 8003ee0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003ee2:	bf00      	nop
 8003ee4:	e000ed08 	.word	0xe000ed08

08003ee8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003eee:	4b32      	ldr	r3, [pc, #200]	; (8003fb8 <xPortStartScheduler+0xd0>)
 8003ef0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	22ff      	movs	r2, #255	; 0xff
 8003efe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <xPortStartScheduler+0xd4>)
 8003f14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f16:	4b2a      	ldr	r3, [pc, #168]	; (8003fc0 <xPortStartScheduler+0xd8>)
 8003f18:	2207      	movs	r2, #7
 8003f1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f1c:	e009      	b.n	8003f32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003f1e:	4b28      	ldr	r3, [pc, #160]	; (8003fc0 <xPortStartScheduler+0xd8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <xPortStartScheduler+0xd8>)
 8003f26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3a:	2b80      	cmp	r3, #128	; 0x80
 8003f3c:	d0ef      	beq.n	8003f1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f3e:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <xPortStartScheduler+0xd8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f1c3 0307 	rsb	r3, r3, #7
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d00a      	beq.n	8003f60 <xPortStartScheduler+0x78>
	__asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	60bb      	str	r3, [r7, #8]
}
 8003f5c:	bf00      	nop
 8003f5e:	e7fe      	b.n	8003f5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f60:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <xPortStartScheduler+0xd8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	4a16      	ldr	r2, [pc, #88]	; (8003fc0 <xPortStartScheduler+0xd8>)
 8003f68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <xPortStartScheduler+0xd8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f72:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <xPortStartScheduler+0xd8>)
 8003f74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f7e:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <xPortStartScheduler+0xdc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <xPortStartScheduler+0xdc>)
 8003f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f8a:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <xPortStartScheduler+0xdc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a0d      	ldr	r2, [pc, #52]	; (8003fc4 <xPortStartScheduler+0xdc>)
 8003f90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f96:	f000 f8b9 	bl	800410c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <xPortStartScheduler+0xe0>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003fa0:	f7ff ff92 	bl	8003ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003fa4:	f7ff fbd0 	bl	8003748 <vTaskSwitchContext>
	prvTaskExitError();
 8003fa8:	f7ff ff4e 	bl	8003e48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	e000e400 	.word	0xe000e400
 8003fbc:	20000474 	.word	0x20000474
 8003fc0:	20000478 	.word	0x20000478
 8003fc4:	e000ed20 	.word	0xe000ed20
 8003fc8:	2000000c 	.word	0x2000000c

08003fcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	607b      	str	r3, [r7, #4]
}
 8003fe4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003fe6:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <vPortEnterCritical+0x58>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3301      	adds	r3, #1
 8003fec:	4a0d      	ldr	r2, [pc, #52]	; (8004024 <vPortEnterCritical+0x58>)
 8003fee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <vPortEnterCritical+0x58>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d10f      	bne.n	8004018 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <vPortEnterCritical+0x5c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <vPortEnterCritical+0x4c>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	603b      	str	r3, [r7, #0]
}
 8004014:	bf00      	nop
 8004016:	e7fe      	b.n	8004016 <vPortEnterCritical+0x4a>
	}
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	2000000c 	.word	0x2000000c
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004032:	4b11      	ldr	r3, [pc, #68]	; (8004078 <vPortExitCritical+0x4c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <vPortExitCritical+0x24>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	607b      	str	r3, [r7, #4]
}
 800404c:	bf00      	nop
 800404e:	e7fe      	b.n	800404e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004050:	4b09      	ldr	r3, [pc, #36]	; (8004078 <vPortExitCritical+0x4c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3b01      	subs	r3, #1
 8004056:	4a08      	ldr	r2, [pc, #32]	; (8004078 <vPortExitCritical+0x4c>)
 8004058:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800405a:	4b07      	ldr	r3, [pc, #28]	; (8004078 <vPortExitCritical+0x4c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d105      	bne.n	800406e <vPortExitCritical+0x42>
 8004062:	2300      	movs	r3, #0
 8004064:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f383 8811 	msr	BASEPRI, r3
}
 800406c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr
 8004078:	2000000c 	.word	0x2000000c
 800407c:	00000000 	.word	0x00000000

08004080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004080:	f3ef 8009 	mrs	r0, PSP
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <pxCurrentTCBConst>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004090:	6010      	str	r0, [r2, #0]
 8004092:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004096:	f04f 0050 	mov.w	r0, #80	; 0x50
 800409a:	f380 8811 	msr	BASEPRI, r0
 800409e:	f7ff fb53 	bl	8003748 <vTaskSwitchContext>
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8811 	msr	BASEPRI, r0
 80040aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80040ae:	6819      	ldr	r1, [r3, #0]
 80040b0:	6808      	ldr	r0, [r1, #0]
 80040b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040b6:	f380 8809 	msr	PSP, r0
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	4770      	bx	lr

080040c0 <pxCurrentTCBConst>:
 80040c0:	20000348 	.word	0x20000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop

080040c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	607b      	str	r3, [r7, #4]
}
 80040e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040e2:	f7ff fa73 	bl	80035cc <xTaskIncrementTick>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <SysTick_Handler+0x40>)
 80040ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	2300      	movs	r3, #0
 80040f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f383 8811 	msr	BASEPRI, r3
}
 80040fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004100:	bf00      	nop
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	e000ed04 	.word	0xe000ed04

0800410c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004110:	4b0a      	ldr	r3, [pc, #40]	; (800413c <vPortSetupTimerInterrupt+0x30>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004116:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <vPortSetupTimerInterrupt+0x34>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <vPortSetupTimerInterrupt+0x38>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a09      	ldr	r2, [pc, #36]	; (8004148 <vPortSetupTimerInterrupt+0x3c>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	4a08      	ldr	r2, [pc, #32]	; (800414c <vPortSetupTimerInterrupt+0x40>)
 800412a:	3b01      	subs	r3, #1
 800412c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800412e:	4b03      	ldr	r3, [pc, #12]	; (800413c <vPortSetupTimerInterrupt+0x30>)
 8004130:	2207      	movs	r2, #7
 8004132:	601a      	str	r2, [r3, #0]
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr
 800413c:	e000e010 	.word	0xe000e010
 8004140:	e000e018 	.word	0xe000e018
 8004144:	20000000 	.word	0x20000000
 8004148:	10624dd3 	.word	0x10624dd3
 800414c:	e000e014 	.word	0xe000e014

08004150 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004156:	f3ef 8305 	mrs	r3, IPSR
 800415a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b0f      	cmp	r3, #15
 8004160:	d914      	bls.n	800418c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004162:	4a16      	ldr	r2, [pc, #88]	; (80041bc <vPortValidateInterruptPriority+0x6c>)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800416c:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <vPortValidateInterruptPriority+0x70>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	7afa      	ldrb	r2, [r7, #11]
 8004172:	429a      	cmp	r2, r3
 8004174:	d20a      	bcs.n	800418c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	607b      	str	r3, [r7, #4]
}
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <vPortValidateInterruptPriority+0x74>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <vPortValidateInterruptPriority+0x78>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d90a      	bls.n	80041b2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	603b      	str	r3, [r7, #0]
}
 80041ae:	bf00      	nop
 80041b0:	e7fe      	b.n	80041b0 <vPortValidateInterruptPriority+0x60>
	}
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	e000e3f0 	.word	0xe000e3f0
 80041c0:	20000474 	.word	0x20000474
 80041c4:	e000ed0c 	.word	0xe000ed0c
 80041c8:	20000478 	.word	0x20000478

080041cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08a      	sub	sp, #40	; 0x28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041d8:	f7ff f94e 	bl	8003478 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041dc:	4b58      	ldr	r3, [pc, #352]	; (8004340 <pvPortMalloc+0x174>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041e4:	f000 f910 	bl	8004408 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041e8:	4b56      	ldr	r3, [pc, #344]	; (8004344 <pvPortMalloc+0x178>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f040 808e 	bne.w	8004312 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01d      	beq.n	8004238 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041fc:	2208      	movs	r2, #8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	2b00      	cmp	r3, #0
 800420c:	d014      	beq.n	8004238 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f023 0307 	bic.w	r3, r3, #7
 8004214:	3308      	adds	r3, #8
 8004216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <pvPortMalloc+0x6c>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	617b      	str	r3, [r7, #20]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d069      	beq.n	8004312 <pvPortMalloc+0x146>
 800423e:	4b42      	ldr	r3, [pc, #264]	; (8004348 <pvPortMalloc+0x17c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	d864      	bhi.n	8004312 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004248:	4b40      	ldr	r3, [pc, #256]	; (800434c <pvPortMalloc+0x180>)
 800424a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800424c:	4b3f      	ldr	r3, [pc, #252]	; (800434c <pvPortMalloc+0x180>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004252:	e004      	b.n	800425e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	d903      	bls.n	8004270 <pvPortMalloc+0xa4>
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f1      	bne.n	8004254 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004270:	4b33      	ldr	r3, [pc, #204]	; (8004340 <pvPortMalloc+0x174>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004276:	429a      	cmp	r2, r3
 8004278:	d04b      	beq.n	8004312 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2208      	movs	r2, #8
 8004280:	4413      	add	r3, r2
 8004282:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	1ad2      	subs	r2, r2, r3
 8004294:	2308      	movs	r3, #8
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	429a      	cmp	r2, r3
 800429a:	d91f      	bls.n	80042dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800429c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4413      	add	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <pvPortMalloc+0xf8>
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	613b      	str	r3, [r7, #16]
}
 80042c0:	bf00      	nop
 80042c2:	e7fe      	b.n	80042c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	1ad2      	subs	r2, r2, r3
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042d6:	69b8      	ldr	r0, [r7, #24]
 80042d8:	f000 f8f8 	bl	80044cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042dc:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <pvPortMalloc+0x17c>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	4a18      	ldr	r2, [pc, #96]	; (8004348 <pvPortMalloc+0x17c>)
 80042e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042ea:	4b17      	ldr	r3, [pc, #92]	; (8004348 <pvPortMalloc+0x17c>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b18      	ldr	r3, [pc, #96]	; (8004350 <pvPortMalloc+0x184>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d203      	bcs.n	80042fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042f6:	4b14      	ldr	r3, [pc, #80]	; (8004348 <pvPortMalloc+0x17c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a15      	ldr	r2, [pc, #84]	; (8004350 <pvPortMalloc+0x184>)
 80042fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <pvPortMalloc+0x178>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	431a      	orrs	r2, r3
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004312:	f7ff f8bf 	bl	8003494 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <pvPortMalloc+0x16a>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	60fb      	str	r3, [r7, #12]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <pvPortMalloc+0x168>
	return pvReturn;
 8004336:	69fb      	ldr	r3, [r7, #28]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3728      	adds	r7, #40	; 0x28
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20001084 	.word	0x20001084
 8004344:	20001090 	.word	0x20001090
 8004348:	20001088 	.word	0x20001088
 800434c:	2000107c 	.word	0x2000107c
 8004350:	2000108c 	.word	0x2000108c

08004354 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d048      	beq.n	80043f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004366:	2308      	movs	r3, #8
 8004368:	425b      	negs	r3, r3
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4413      	add	r3, r2
 800436e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	4b21      	ldr	r3, [pc, #132]	; (8004400 <vPortFree+0xac>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4013      	ands	r3, r2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10a      	bne.n	8004398 <vPortFree+0x44>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	60fb      	str	r3, [r7, #12]
}
 8004394:	bf00      	nop
 8004396:	e7fe      	b.n	8004396 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <vPortFree+0x62>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60bb      	str	r3, [r7, #8]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	4b11      	ldr	r3, [pc, #68]	; (8004400 <vPortFree+0xac>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d019      	beq.n	80043f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d115      	bne.n	80043f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <vPortFree+0xac>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	401a      	ands	r2, r3
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043dc:	f7ff f84c 	bl	8003478 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <vPortFree+0xb0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4413      	add	r3, r2
 80043ea:	4a06      	ldr	r2, [pc, #24]	; (8004404 <vPortFree+0xb0>)
 80043ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043ee:	6938      	ldr	r0, [r7, #16]
 80043f0:	f000 f86c 	bl	80044cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80043f4:	f7ff f84e 	bl	8003494 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043f8:	bf00      	nop
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20001090 	.word	0x20001090
 8004404:	20001088 	.word	0x20001088

08004408 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800440e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004412:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004414:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <prvHeapInit+0xac>)
 8004416:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3307      	adds	r3, #7
 8004426:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0307 	bic.w	r3, r3, #7
 800442e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	4a1f      	ldr	r2, [pc, #124]	; (80044b4 <prvHeapInit+0xac>)
 8004438:	4413      	add	r3, r2
 800443a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004440:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <prvHeapInit+0xb0>)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004446:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <prvHeapInit+0xb0>)
 8004448:	2200      	movs	r2, #0
 800444a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	4413      	add	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004454:	2208      	movs	r2, #8
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0307 	bic.w	r3, r3, #7
 8004462:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4a15      	ldr	r2, [pc, #84]	; (80044bc <prvHeapInit+0xb4>)
 8004468:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <prvHeapInit+0xb4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2200      	movs	r2, #0
 8004470:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004472:	4b12      	ldr	r3, [pc, #72]	; (80044bc <prvHeapInit+0xb4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	1ad2      	subs	r2, r2, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <prvHeapInit+0xb4>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <prvHeapInit+0xb8>)
 8004496:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <prvHeapInit+0xbc>)
 800449e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044a0:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <prvHeapInit+0xc0>)
 80044a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044a6:	601a      	str	r2, [r3, #0]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	2000047c 	.word	0x2000047c
 80044b8:	2000107c 	.word	0x2000107c
 80044bc:	20001084 	.word	0x20001084
 80044c0:	2000108c 	.word	0x2000108c
 80044c4:	20001088 	.word	0x20001088
 80044c8:	20001090 	.word	0x20001090

080044cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044d4:	4b27      	ldr	r3, [pc, #156]	; (8004574 <prvInsertBlockIntoFreeList+0xa8>)
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	e002      	b.n	80044e0 <prvInsertBlockIntoFreeList+0x14>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d8f7      	bhi.n	80044da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	4413      	add	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d108      	bne.n	800450e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	441a      	add	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	441a      	add	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d118      	bne.n	8004554 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <prvInsertBlockIntoFreeList+0xac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d00d      	beq.n	800454a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	441a      	add	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	e008      	b.n	800455c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <prvInsertBlockIntoFreeList+0xac>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	e003      	b.n	800455c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	429a      	cmp	r2, r3
 8004562:	d002      	beq.n	800456a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr
 8004574:	2000107c 	.word	0x2000107c
 8004578:	20001084 	.word	0x20001084

0800457c <__errno>:
 800457c:	4b01      	ldr	r3, [pc, #4]	; (8004584 <__errno+0x8>)
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20000010 	.word	0x20000010

08004588 <__libc_init_array>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	2600      	movs	r6, #0
 800458c:	4d0c      	ldr	r5, [pc, #48]	; (80045c0 <__libc_init_array+0x38>)
 800458e:	4c0d      	ldr	r4, [pc, #52]	; (80045c4 <__libc_init_array+0x3c>)
 8004590:	1b64      	subs	r4, r4, r5
 8004592:	10a4      	asrs	r4, r4, #2
 8004594:	42a6      	cmp	r6, r4
 8004596:	d109      	bne.n	80045ac <__libc_init_array+0x24>
 8004598:	f000 fcc6 	bl	8004f28 <_init>
 800459c:	2600      	movs	r6, #0
 800459e:	4d0a      	ldr	r5, [pc, #40]	; (80045c8 <__libc_init_array+0x40>)
 80045a0:	4c0a      	ldr	r4, [pc, #40]	; (80045cc <__libc_init_array+0x44>)
 80045a2:	1b64      	subs	r4, r4, r5
 80045a4:	10a4      	asrs	r4, r4, #2
 80045a6:	42a6      	cmp	r6, r4
 80045a8:	d105      	bne.n	80045b6 <__libc_init_array+0x2e>
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b0:	4798      	blx	r3
 80045b2:	3601      	adds	r6, #1
 80045b4:	e7ee      	b.n	8004594 <__libc_init_array+0xc>
 80045b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ba:	4798      	blx	r3
 80045bc:	3601      	adds	r6, #1
 80045be:	e7f2      	b.n	80045a6 <__libc_init_array+0x1e>
 80045c0:	08005078 	.word	0x08005078
 80045c4:	08005078 	.word	0x08005078
 80045c8:	08005078 	.word	0x08005078
 80045cc:	0800507c 	.word	0x0800507c

080045d0 <__retarget_lock_acquire_recursive>:
 80045d0:	4770      	bx	lr

080045d2 <__retarget_lock_release_recursive>:
 80045d2:	4770      	bx	lr

080045d4 <memcpy>:
 80045d4:	440a      	add	r2, r1
 80045d6:	4291      	cmp	r1, r2
 80045d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045dc:	d100      	bne.n	80045e0 <memcpy+0xc>
 80045de:	4770      	bx	lr
 80045e0:	b510      	push	{r4, lr}
 80045e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045e6:	4291      	cmp	r1, r2
 80045e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045ec:	d1f9      	bne.n	80045e2 <memcpy+0xe>
 80045ee:	bd10      	pop	{r4, pc}

080045f0 <memset>:
 80045f0:	4603      	mov	r3, r0
 80045f2:	4402      	add	r2, r0
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d100      	bne.n	80045fa <memset+0xa>
 80045f8:	4770      	bx	lr
 80045fa:	f803 1b01 	strb.w	r1, [r3], #1
 80045fe:	e7f9      	b.n	80045f4 <memset+0x4>

08004600 <_malloc_r>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	1ccd      	adds	r5, r1, #3
 8004604:	f025 0503 	bic.w	r5, r5, #3
 8004608:	3508      	adds	r5, #8
 800460a:	2d0c      	cmp	r5, #12
 800460c:	bf38      	it	cc
 800460e:	250c      	movcc	r5, #12
 8004610:	2d00      	cmp	r5, #0
 8004612:	4606      	mov	r6, r0
 8004614:	db01      	blt.n	800461a <_malloc_r+0x1a>
 8004616:	42a9      	cmp	r1, r5
 8004618:	d903      	bls.n	8004622 <_malloc_r+0x22>
 800461a:	230c      	movs	r3, #12
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	2000      	movs	r0, #0
 8004620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004622:	f000 f8e1 	bl	80047e8 <__malloc_lock>
 8004626:	4921      	ldr	r1, [pc, #132]	; (80046ac <_malloc_r+0xac>)
 8004628:	680a      	ldr	r2, [r1, #0]
 800462a:	4614      	mov	r4, r2
 800462c:	b99c      	cbnz	r4, 8004656 <_malloc_r+0x56>
 800462e:	4f20      	ldr	r7, [pc, #128]	; (80046b0 <_malloc_r+0xb0>)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	b923      	cbnz	r3, 800463e <_malloc_r+0x3e>
 8004634:	4621      	mov	r1, r4
 8004636:	4630      	mov	r0, r6
 8004638:	f000 f8a6 	bl	8004788 <_sbrk_r>
 800463c:	6038      	str	r0, [r7, #0]
 800463e:	4629      	mov	r1, r5
 8004640:	4630      	mov	r0, r6
 8004642:	f000 f8a1 	bl	8004788 <_sbrk_r>
 8004646:	1c43      	adds	r3, r0, #1
 8004648:	d123      	bne.n	8004692 <_malloc_r+0x92>
 800464a:	230c      	movs	r3, #12
 800464c:	4630      	mov	r0, r6
 800464e:	6033      	str	r3, [r6, #0]
 8004650:	f000 f8d0 	bl	80047f4 <__malloc_unlock>
 8004654:	e7e3      	b.n	800461e <_malloc_r+0x1e>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	1b5b      	subs	r3, r3, r5
 800465a:	d417      	bmi.n	800468c <_malloc_r+0x8c>
 800465c:	2b0b      	cmp	r3, #11
 800465e:	d903      	bls.n	8004668 <_malloc_r+0x68>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	441c      	add	r4, r3
 8004664:	6025      	str	r5, [r4, #0]
 8004666:	e004      	b.n	8004672 <_malloc_r+0x72>
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	42a2      	cmp	r2, r4
 800466c:	bf0c      	ite	eq
 800466e:	600b      	streq	r3, [r1, #0]
 8004670:	6053      	strne	r3, [r2, #4]
 8004672:	4630      	mov	r0, r6
 8004674:	f000 f8be 	bl	80047f4 <__malloc_unlock>
 8004678:	f104 000b 	add.w	r0, r4, #11
 800467c:	1d23      	adds	r3, r4, #4
 800467e:	f020 0007 	bic.w	r0, r0, #7
 8004682:	1ac2      	subs	r2, r0, r3
 8004684:	d0cc      	beq.n	8004620 <_malloc_r+0x20>
 8004686:	1a1b      	subs	r3, r3, r0
 8004688:	50a3      	str	r3, [r4, r2]
 800468a:	e7c9      	b.n	8004620 <_malloc_r+0x20>
 800468c:	4622      	mov	r2, r4
 800468e:	6864      	ldr	r4, [r4, #4]
 8004690:	e7cc      	b.n	800462c <_malloc_r+0x2c>
 8004692:	1cc4      	adds	r4, r0, #3
 8004694:	f024 0403 	bic.w	r4, r4, #3
 8004698:	42a0      	cmp	r0, r4
 800469a:	d0e3      	beq.n	8004664 <_malloc_r+0x64>
 800469c:	1a21      	subs	r1, r4, r0
 800469e:	4630      	mov	r0, r6
 80046a0:	f000 f872 	bl	8004788 <_sbrk_r>
 80046a4:	3001      	adds	r0, #1
 80046a6:	d1dd      	bne.n	8004664 <_malloc_r+0x64>
 80046a8:	e7cf      	b.n	800464a <_malloc_r+0x4a>
 80046aa:	bf00      	nop
 80046ac:	20001094 	.word	0x20001094
 80046b0:	20001098 	.word	0x20001098

080046b4 <cleanup_glue>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	460c      	mov	r4, r1
 80046b8:	6809      	ldr	r1, [r1, #0]
 80046ba:	4605      	mov	r5, r0
 80046bc:	b109      	cbz	r1, 80046c2 <cleanup_glue+0xe>
 80046be:	f7ff fff9 	bl	80046b4 <cleanup_glue>
 80046c2:	4621      	mov	r1, r4
 80046c4:	4628      	mov	r0, r5
 80046c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046ca:	f000 b899 	b.w	8004800 <_free_r>
	...

080046d0 <_reclaim_reent>:
 80046d0:	4b2c      	ldr	r3, [pc, #176]	; (8004784 <_reclaim_reent+0xb4>)
 80046d2:	b570      	push	{r4, r5, r6, lr}
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4604      	mov	r4, r0
 80046d8:	4283      	cmp	r3, r0
 80046da:	d051      	beq.n	8004780 <_reclaim_reent+0xb0>
 80046dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046de:	b143      	cbz	r3, 80046f2 <_reclaim_reent+0x22>
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d14a      	bne.n	800477c <_reclaim_reent+0xac>
 80046e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046e8:	6819      	ldr	r1, [r3, #0]
 80046ea:	b111      	cbz	r1, 80046f2 <_reclaim_reent+0x22>
 80046ec:	4620      	mov	r0, r4
 80046ee:	f000 f887 	bl	8004800 <_free_r>
 80046f2:	6961      	ldr	r1, [r4, #20]
 80046f4:	b111      	cbz	r1, 80046fc <_reclaim_reent+0x2c>
 80046f6:	4620      	mov	r0, r4
 80046f8:	f000 f882 	bl	8004800 <_free_r>
 80046fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80046fe:	b111      	cbz	r1, 8004706 <_reclaim_reent+0x36>
 8004700:	4620      	mov	r0, r4
 8004702:	f000 f87d 	bl	8004800 <_free_r>
 8004706:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004708:	b111      	cbz	r1, 8004710 <_reclaim_reent+0x40>
 800470a:	4620      	mov	r0, r4
 800470c:	f000 f878 	bl	8004800 <_free_r>
 8004710:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004712:	b111      	cbz	r1, 800471a <_reclaim_reent+0x4a>
 8004714:	4620      	mov	r0, r4
 8004716:	f000 f873 	bl	8004800 <_free_r>
 800471a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800471c:	b111      	cbz	r1, 8004724 <_reclaim_reent+0x54>
 800471e:	4620      	mov	r0, r4
 8004720:	f000 f86e 	bl	8004800 <_free_r>
 8004724:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004726:	b111      	cbz	r1, 800472e <_reclaim_reent+0x5e>
 8004728:	4620      	mov	r0, r4
 800472a:	f000 f869 	bl	8004800 <_free_r>
 800472e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004730:	b111      	cbz	r1, 8004738 <_reclaim_reent+0x68>
 8004732:	4620      	mov	r0, r4
 8004734:	f000 f864 	bl	8004800 <_free_r>
 8004738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800473a:	b111      	cbz	r1, 8004742 <_reclaim_reent+0x72>
 800473c:	4620      	mov	r0, r4
 800473e:	f000 f85f 	bl	8004800 <_free_r>
 8004742:	69a3      	ldr	r3, [r4, #24]
 8004744:	b1e3      	cbz	r3, 8004780 <_reclaim_reent+0xb0>
 8004746:	4620      	mov	r0, r4
 8004748:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800474a:	4798      	blx	r3
 800474c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800474e:	b1b9      	cbz	r1, 8004780 <_reclaim_reent+0xb0>
 8004750:	4620      	mov	r0, r4
 8004752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004756:	f7ff bfad 	b.w	80046b4 <cleanup_glue>
 800475a:	5949      	ldr	r1, [r1, r5]
 800475c:	b941      	cbnz	r1, 8004770 <_reclaim_reent+0xa0>
 800475e:	3504      	adds	r5, #4
 8004760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004762:	2d80      	cmp	r5, #128	; 0x80
 8004764:	68d9      	ldr	r1, [r3, #12]
 8004766:	d1f8      	bne.n	800475a <_reclaim_reent+0x8a>
 8004768:	4620      	mov	r0, r4
 800476a:	f000 f849 	bl	8004800 <_free_r>
 800476e:	e7ba      	b.n	80046e6 <_reclaim_reent+0x16>
 8004770:	680e      	ldr	r6, [r1, #0]
 8004772:	4620      	mov	r0, r4
 8004774:	f000 f844 	bl	8004800 <_free_r>
 8004778:	4631      	mov	r1, r6
 800477a:	e7ef      	b.n	800475c <_reclaim_reent+0x8c>
 800477c:	2500      	movs	r5, #0
 800477e:	e7ef      	b.n	8004760 <_reclaim_reent+0x90>
 8004780:	bd70      	pop	{r4, r5, r6, pc}
 8004782:	bf00      	nop
 8004784:	20000010 	.word	0x20000010

08004788 <_sbrk_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	2300      	movs	r3, #0
 800478c:	4d05      	ldr	r5, [pc, #20]	; (80047a4 <_sbrk_r+0x1c>)
 800478e:	4604      	mov	r4, r0
 8004790:	4608      	mov	r0, r1
 8004792:	602b      	str	r3, [r5, #0]
 8004794:	f7fb ffda 	bl	800074c <_sbrk>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d102      	bne.n	80047a2 <_sbrk_r+0x1a>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	b103      	cbz	r3, 80047a2 <_sbrk_r+0x1a>
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	20001148 	.word	0x20001148

080047a8 <siprintf>:
 80047a8:	b40e      	push	{r1, r2, r3}
 80047aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047ae:	b500      	push	{lr}
 80047b0:	b09c      	sub	sp, #112	; 0x70
 80047b2:	ab1d      	add	r3, sp, #116	; 0x74
 80047b4:	9002      	str	r0, [sp, #8]
 80047b6:	9006      	str	r0, [sp, #24]
 80047b8:	9107      	str	r1, [sp, #28]
 80047ba:	9104      	str	r1, [sp, #16]
 80047bc:	4808      	ldr	r0, [pc, #32]	; (80047e0 <siprintf+0x38>)
 80047be:	4909      	ldr	r1, [pc, #36]	; (80047e4 <siprintf+0x3c>)
 80047c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80047c4:	9105      	str	r1, [sp, #20]
 80047c6:	6800      	ldr	r0, [r0, #0]
 80047c8:	a902      	add	r1, sp, #8
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	f000 f8c0 	bl	8004950 <_svfiprintf_r>
 80047d0:	2200      	movs	r2, #0
 80047d2:	9b02      	ldr	r3, [sp, #8]
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	b01c      	add	sp, #112	; 0x70
 80047d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047dc:	b003      	add	sp, #12
 80047de:	4770      	bx	lr
 80047e0:	20000010 	.word	0x20000010
 80047e4:	ffff0208 	.word	0xffff0208

080047e8 <__malloc_lock>:
 80047e8:	4801      	ldr	r0, [pc, #4]	; (80047f0 <__malloc_lock+0x8>)
 80047ea:	f7ff bef1 	b.w	80045d0 <__retarget_lock_acquire_recursive>
 80047ee:	bf00      	nop
 80047f0:	20001140 	.word	0x20001140

080047f4 <__malloc_unlock>:
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <__malloc_unlock+0x8>)
 80047f6:	f7ff beec 	b.w	80045d2 <__retarget_lock_release_recursive>
 80047fa:	bf00      	nop
 80047fc:	20001140 	.word	0x20001140

08004800 <_free_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4605      	mov	r5, r0
 8004804:	2900      	cmp	r1, #0
 8004806:	d043      	beq.n	8004890 <_free_r+0x90>
 8004808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800480c:	1f0c      	subs	r4, r1, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	bfb8      	it	lt
 8004812:	18e4      	addlt	r4, r4, r3
 8004814:	f7ff ffe8 	bl	80047e8 <__malloc_lock>
 8004818:	4a1e      	ldr	r2, [pc, #120]	; (8004894 <_free_r+0x94>)
 800481a:	6813      	ldr	r3, [r2, #0]
 800481c:	4610      	mov	r0, r2
 800481e:	b933      	cbnz	r3, 800482e <_free_r+0x2e>
 8004820:	6063      	str	r3, [r4, #4]
 8004822:	6014      	str	r4, [r2, #0]
 8004824:	4628      	mov	r0, r5
 8004826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800482a:	f7ff bfe3 	b.w	80047f4 <__malloc_unlock>
 800482e:	42a3      	cmp	r3, r4
 8004830:	d90a      	bls.n	8004848 <_free_r+0x48>
 8004832:	6821      	ldr	r1, [r4, #0]
 8004834:	1862      	adds	r2, r4, r1
 8004836:	4293      	cmp	r3, r2
 8004838:	bf01      	itttt	eq
 800483a:	681a      	ldreq	r2, [r3, #0]
 800483c:	685b      	ldreq	r3, [r3, #4]
 800483e:	1852      	addeq	r2, r2, r1
 8004840:	6022      	streq	r2, [r4, #0]
 8004842:	6063      	str	r3, [r4, #4]
 8004844:	6004      	str	r4, [r0, #0]
 8004846:	e7ed      	b.n	8004824 <_free_r+0x24>
 8004848:	461a      	mov	r2, r3
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	b10b      	cbz	r3, 8004852 <_free_r+0x52>
 800484e:	42a3      	cmp	r3, r4
 8004850:	d9fa      	bls.n	8004848 <_free_r+0x48>
 8004852:	6811      	ldr	r1, [r2, #0]
 8004854:	1850      	adds	r0, r2, r1
 8004856:	42a0      	cmp	r0, r4
 8004858:	d10b      	bne.n	8004872 <_free_r+0x72>
 800485a:	6820      	ldr	r0, [r4, #0]
 800485c:	4401      	add	r1, r0
 800485e:	1850      	adds	r0, r2, r1
 8004860:	4283      	cmp	r3, r0
 8004862:	6011      	str	r1, [r2, #0]
 8004864:	d1de      	bne.n	8004824 <_free_r+0x24>
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4401      	add	r1, r0
 800486c:	6011      	str	r1, [r2, #0]
 800486e:	6053      	str	r3, [r2, #4]
 8004870:	e7d8      	b.n	8004824 <_free_r+0x24>
 8004872:	d902      	bls.n	800487a <_free_r+0x7a>
 8004874:	230c      	movs	r3, #12
 8004876:	602b      	str	r3, [r5, #0]
 8004878:	e7d4      	b.n	8004824 <_free_r+0x24>
 800487a:	6820      	ldr	r0, [r4, #0]
 800487c:	1821      	adds	r1, r4, r0
 800487e:	428b      	cmp	r3, r1
 8004880:	bf01      	itttt	eq
 8004882:	6819      	ldreq	r1, [r3, #0]
 8004884:	685b      	ldreq	r3, [r3, #4]
 8004886:	1809      	addeq	r1, r1, r0
 8004888:	6021      	streq	r1, [r4, #0]
 800488a:	6063      	str	r3, [r4, #4]
 800488c:	6054      	str	r4, [r2, #4]
 800488e:	e7c9      	b.n	8004824 <_free_r+0x24>
 8004890:	bd38      	pop	{r3, r4, r5, pc}
 8004892:	bf00      	nop
 8004894:	20001094 	.word	0x20001094

08004898 <__ssputs_r>:
 8004898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800489c:	688e      	ldr	r6, [r1, #8]
 800489e:	4682      	mov	sl, r0
 80048a0:	429e      	cmp	r6, r3
 80048a2:	460c      	mov	r4, r1
 80048a4:	4690      	mov	r8, r2
 80048a6:	461f      	mov	r7, r3
 80048a8:	d838      	bhi.n	800491c <__ssputs_r+0x84>
 80048aa:	898a      	ldrh	r2, [r1, #12]
 80048ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048b0:	d032      	beq.n	8004918 <__ssputs_r+0x80>
 80048b2:	6825      	ldr	r5, [r4, #0]
 80048b4:	6909      	ldr	r1, [r1, #16]
 80048b6:	3301      	adds	r3, #1
 80048b8:	eba5 0901 	sub.w	r9, r5, r1
 80048bc:	6965      	ldr	r5, [r4, #20]
 80048be:	444b      	add	r3, r9
 80048c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048c8:	106d      	asrs	r5, r5, #1
 80048ca:	429d      	cmp	r5, r3
 80048cc:	bf38      	it	cc
 80048ce:	461d      	movcc	r5, r3
 80048d0:	0553      	lsls	r3, r2, #21
 80048d2:	d531      	bpl.n	8004938 <__ssputs_r+0xa0>
 80048d4:	4629      	mov	r1, r5
 80048d6:	f7ff fe93 	bl	8004600 <_malloc_r>
 80048da:	4606      	mov	r6, r0
 80048dc:	b950      	cbnz	r0, 80048f4 <__ssputs_r+0x5c>
 80048de:	230c      	movs	r3, #12
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295
 80048e4:	f8ca 3000 	str.w	r3, [sl]
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ee:	81a3      	strh	r3, [r4, #12]
 80048f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f4:	464a      	mov	r2, r9
 80048f6:	6921      	ldr	r1, [r4, #16]
 80048f8:	f7ff fe6c 	bl	80045d4 <memcpy>
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004906:	81a3      	strh	r3, [r4, #12]
 8004908:	6126      	str	r6, [r4, #16]
 800490a:	444e      	add	r6, r9
 800490c:	6026      	str	r6, [r4, #0]
 800490e:	463e      	mov	r6, r7
 8004910:	6165      	str	r5, [r4, #20]
 8004912:	eba5 0509 	sub.w	r5, r5, r9
 8004916:	60a5      	str	r5, [r4, #8]
 8004918:	42be      	cmp	r6, r7
 800491a:	d900      	bls.n	800491e <__ssputs_r+0x86>
 800491c:	463e      	mov	r6, r7
 800491e:	4632      	mov	r2, r6
 8004920:	4641      	mov	r1, r8
 8004922:	6820      	ldr	r0, [r4, #0]
 8004924:	f000 fab8 	bl	8004e98 <memmove>
 8004928:	68a3      	ldr	r3, [r4, #8]
 800492a:	6822      	ldr	r2, [r4, #0]
 800492c:	1b9b      	subs	r3, r3, r6
 800492e:	4432      	add	r2, r6
 8004930:	2000      	movs	r0, #0
 8004932:	60a3      	str	r3, [r4, #8]
 8004934:	6022      	str	r2, [r4, #0]
 8004936:	e7db      	b.n	80048f0 <__ssputs_r+0x58>
 8004938:	462a      	mov	r2, r5
 800493a:	f000 fac7 	bl	8004ecc <_realloc_r>
 800493e:	4606      	mov	r6, r0
 8004940:	2800      	cmp	r0, #0
 8004942:	d1e1      	bne.n	8004908 <__ssputs_r+0x70>
 8004944:	4650      	mov	r0, sl
 8004946:	6921      	ldr	r1, [r4, #16]
 8004948:	f7ff ff5a 	bl	8004800 <_free_r>
 800494c:	e7c7      	b.n	80048de <__ssputs_r+0x46>
	...

08004950 <_svfiprintf_r>:
 8004950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004954:	4698      	mov	r8, r3
 8004956:	898b      	ldrh	r3, [r1, #12]
 8004958:	4607      	mov	r7, r0
 800495a:	061b      	lsls	r3, r3, #24
 800495c:	460d      	mov	r5, r1
 800495e:	4614      	mov	r4, r2
 8004960:	b09d      	sub	sp, #116	; 0x74
 8004962:	d50e      	bpl.n	8004982 <_svfiprintf_r+0x32>
 8004964:	690b      	ldr	r3, [r1, #16]
 8004966:	b963      	cbnz	r3, 8004982 <_svfiprintf_r+0x32>
 8004968:	2140      	movs	r1, #64	; 0x40
 800496a:	f7ff fe49 	bl	8004600 <_malloc_r>
 800496e:	6028      	str	r0, [r5, #0]
 8004970:	6128      	str	r0, [r5, #16]
 8004972:	b920      	cbnz	r0, 800497e <_svfiprintf_r+0x2e>
 8004974:	230c      	movs	r3, #12
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	f04f 30ff 	mov.w	r0, #4294967295
 800497c:	e0d1      	b.n	8004b22 <_svfiprintf_r+0x1d2>
 800497e:	2340      	movs	r3, #64	; 0x40
 8004980:	616b      	str	r3, [r5, #20]
 8004982:	2300      	movs	r3, #0
 8004984:	9309      	str	r3, [sp, #36]	; 0x24
 8004986:	2320      	movs	r3, #32
 8004988:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800498c:	2330      	movs	r3, #48	; 0x30
 800498e:	f04f 0901 	mov.w	r9, #1
 8004992:	f8cd 800c 	str.w	r8, [sp, #12]
 8004996:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004b3c <_svfiprintf_r+0x1ec>
 800499a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800499e:	4623      	mov	r3, r4
 80049a0:	469a      	mov	sl, r3
 80049a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049a6:	b10a      	cbz	r2, 80049ac <_svfiprintf_r+0x5c>
 80049a8:	2a25      	cmp	r2, #37	; 0x25
 80049aa:	d1f9      	bne.n	80049a0 <_svfiprintf_r+0x50>
 80049ac:	ebba 0b04 	subs.w	fp, sl, r4
 80049b0:	d00b      	beq.n	80049ca <_svfiprintf_r+0x7a>
 80049b2:	465b      	mov	r3, fp
 80049b4:	4622      	mov	r2, r4
 80049b6:	4629      	mov	r1, r5
 80049b8:	4638      	mov	r0, r7
 80049ba:	f7ff ff6d 	bl	8004898 <__ssputs_r>
 80049be:	3001      	adds	r0, #1
 80049c0:	f000 80aa 	beq.w	8004b18 <_svfiprintf_r+0x1c8>
 80049c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049c6:	445a      	add	r2, fp
 80049c8:	9209      	str	r2, [sp, #36]	; 0x24
 80049ca:	f89a 3000 	ldrb.w	r3, [sl]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80a2 	beq.w	8004b18 <_svfiprintf_r+0x1c8>
 80049d4:	2300      	movs	r3, #0
 80049d6:	f04f 32ff 	mov.w	r2, #4294967295
 80049da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049de:	f10a 0a01 	add.w	sl, sl, #1
 80049e2:	9304      	str	r3, [sp, #16]
 80049e4:	9307      	str	r3, [sp, #28]
 80049e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049ea:	931a      	str	r3, [sp, #104]	; 0x68
 80049ec:	4654      	mov	r4, sl
 80049ee:	2205      	movs	r2, #5
 80049f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049f4:	4851      	ldr	r0, [pc, #324]	; (8004b3c <_svfiprintf_r+0x1ec>)
 80049f6:	f000 fa41 	bl	8004e7c <memchr>
 80049fa:	9a04      	ldr	r2, [sp, #16]
 80049fc:	b9d8      	cbnz	r0, 8004a36 <_svfiprintf_r+0xe6>
 80049fe:	06d0      	lsls	r0, r2, #27
 8004a00:	bf44      	itt	mi
 8004a02:	2320      	movmi	r3, #32
 8004a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a08:	0711      	lsls	r1, r2, #28
 8004a0a:	bf44      	itt	mi
 8004a0c:	232b      	movmi	r3, #43	; 0x2b
 8004a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a12:	f89a 3000 	ldrb.w	r3, [sl]
 8004a16:	2b2a      	cmp	r3, #42	; 0x2a
 8004a18:	d015      	beq.n	8004a46 <_svfiprintf_r+0xf6>
 8004a1a:	4654      	mov	r4, sl
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f04f 0c0a 	mov.w	ip, #10
 8004a22:	9a07      	ldr	r2, [sp, #28]
 8004a24:	4621      	mov	r1, r4
 8004a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a2a:	3b30      	subs	r3, #48	; 0x30
 8004a2c:	2b09      	cmp	r3, #9
 8004a2e:	d94e      	bls.n	8004ace <_svfiprintf_r+0x17e>
 8004a30:	b1b0      	cbz	r0, 8004a60 <_svfiprintf_r+0x110>
 8004a32:	9207      	str	r2, [sp, #28]
 8004a34:	e014      	b.n	8004a60 <_svfiprintf_r+0x110>
 8004a36:	eba0 0308 	sub.w	r3, r0, r8
 8004a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	46a2      	mov	sl, r4
 8004a42:	9304      	str	r3, [sp, #16]
 8004a44:	e7d2      	b.n	80049ec <_svfiprintf_r+0x9c>
 8004a46:	9b03      	ldr	r3, [sp, #12]
 8004a48:	1d19      	adds	r1, r3, #4
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	9103      	str	r1, [sp, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bfbb      	ittet	lt
 8004a52:	425b      	neglt	r3, r3
 8004a54:	f042 0202 	orrlt.w	r2, r2, #2
 8004a58:	9307      	strge	r3, [sp, #28]
 8004a5a:	9307      	strlt	r3, [sp, #28]
 8004a5c:	bfb8      	it	lt
 8004a5e:	9204      	strlt	r2, [sp, #16]
 8004a60:	7823      	ldrb	r3, [r4, #0]
 8004a62:	2b2e      	cmp	r3, #46	; 0x2e
 8004a64:	d10c      	bne.n	8004a80 <_svfiprintf_r+0x130>
 8004a66:	7863      	ldrb	r3, [r4, #1]
 8004a68:	2b2a      	cmp	r3, #42	; 0x2a
 8004a6a:	d135      	bne.n	8004ad8 <_svfiprintf_r+0x188>
 8004a6c:	9b03      	ldr	r3, [sp, #12]
 8004a6e:	3402      	adds	r4, #2
 8004a70:	1d1a      	adds	r2, r3, #4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	9203      	str	r2, [sp, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bfb8      	it	lt
 8004a7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a7e:	9305      	str	r3, [sp, #20]
 8004a80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b4c <_svfiprintf_r+0x1fc>
 8004a84:	2203      	movs	r2, #3
 8004a86:	4650      	mov	r0, sl
 8004a88:	7821      	ldrb	r1, [r4, #0]
 8004a8a:	f000 f9f7 	bl	8004e7c <memchr>
 8004a8e:	b140      	cbz	r0, 8004aa2 <_svfiprintf_r+0x152>
 8004a90:	2340      	movs	r3, #64	; 0x40
 8004a92:	eba0 000a 	sub.w	r0, r0, sl
 8004a96:	fa03 f000 	lsl.w	r0, r3, r0
 8004a9a:	9b04      	ldr	r3, [sp, #16]
 8004a9c:	3401      	adds	r4, #1
 8004a9e:	4303      	orrs	r3, r0
 8004aa0:	9304      	str	r3, [sp, #16]
 8004aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa6:	2206      	movs	r2, #6
 8004aa8:	4825      	ldr	r0, [pc, #148]	; (8004b40 <_svfiprintf_r+0x1f0>)
 8004aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004aae:	f000 f9e5 	bl	8004e7c <memchr>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d038      	beq.n	8004b28 <_svfiprintf_r+0x1d8>
 8004ab6:	4b23      	ldr	r3, [pc, #140]	; (8004b44 <_svfiprintf_r+0x1f4>)
 8004ab8:	bb1b      	cbnz	r3, 8004b02 <_svfiprintf_r+0x1b2>
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	3307      	adds	r3, #7
 8004abe:	f023 0307 	bic.w	r3, r3, #7
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	9303      	str	r3, [sp, #12]
 8004ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ac8:	4433      	add	r3, r6
 8004aca:	9309      	str	r3, [sp, #36]	; 0x24
 8004acc:	e767      	b.n	800499e <_svfiprintf_r+0x4e>
 8004ace:	460c      	mov	r4, r1
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ad6:	e7a5      	b.n	8004a24 <_svfiprintf_r+0xd4>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f04f 0c0a 	mov.w	ip, #10
 8004ade:	4619      	mov	r1, r3
 8004ae0:	3401      	adds	r4, #1
 8004ae2:	9305      	str	r3, [sp, #20]
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aea:	3a30      	subs	r2, #48	; 0x30
 8004aec:	2a09      	cmp	r2, #9
 8004aee:	d903      	bls.n	8004af8 <_svfiprintf_r+0x1a8>
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0c5      	beq.n	8004a80 <_svfiprintf_r+0x130>
 8004af4:	9105      	str	r1, [sp, #20]
 8004af6:	e7c3      	b.n	8004a80 <_svfiprintf_r+0x130>
 8004af8:	4604      	mov	r4, r0
 8004afa:	2301      	movs	r3, #1
 8004afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b00:	e7f0      	b.n	8004ae4 <_svfiprintf_r+0x194>
 8004b02:	ab03      	add	r3, sp, #12
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	462a      	mov	r2, r5
 8004b08:	4638      	mov	r0, r7
 8004b0a:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <_svfiprintf_r+0x1f8>)
 8004b0c:	a904      	add	r1, sp, #16
 8004b0e:	f3af 8000 	nop.w
 8004b12:	1c42      	adds	r2, r0, #1
 8004b14:	4606      	mov	r6, r0
 8004b16:	d1d6      	bne.n	8004ac6 <_svfiprintf_r+0x176>
 8004b18:	89ab      	ldrh	r3, [r5, #12]
 8004b1a:	065b      	lsls	r3, r3, #25
 8004b1c:	f53f af2c 	bmi.w	8004978 <_svfiprintf_r+0x28>
 8004b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b22:	b01d      	add	sp, #116	; 0x74
 8004b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b28:	ab03      	add	r3, sp, #12
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	462a      	mov	r2, r5
 8004b2e:	4638      	mov	r0, r7
 8004b30:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <_svfiprintf_r+0x1f8>)
 8004b32:	a904      	add	r1, sp, #16
 8004b34:	f000 f87c 	bl	8004c30 <_printf_i>
 8004b38:	e7eb      	b.n	8004b12 <_svfiprintf_r+0x1c2>
 8004b3a:	bf00      	nop
 8004b3c:	08005044 	.word	0x08005044
 8004b40:	0800504e 	.word	0x0800504e
 8004b44:	00000000 	.word	0x00000000
 8004b48:	08004899 	.word	0x08004899
 8004b4c:	0800504a 	.word	0x0800504a

08004b50 <_printf_common>:
 8004b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b54:	4616      	mov	r6, r2
 8004b56:	4699      	mov	r9, r3
 8004b58:	688a      	ldr	r2, [r1, #8]
 8004b5a:	690b      	ldr	r3, [r1, #16]
 8004b5c:	4607      	mov	r7, r0
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	bfb8      	it	lt
 8004b62:	4613      	movlt	r3, r2
 8004b64:	6033      	str	r3, [r6, #0]
 8004b66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b70:	b10a      	cbz	r2, 8004b76 <_printf_common+0x26>
 8004b72:	3301      	adds	r3, #1
 8004b74:	6033      	str	r3, [r6, #0]
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	0699      	lsls	r1, r3, #26
 8004b7a:	bf42      	ittt	mi
 8004b7c:	6833      	ldrmi	r3, [r6, #0]
 8004b7e:	3302      	addmi	r3, #2
 8004b80:	6033      	strmi	r3, [r6, #0]
 8004b82:	6825      	ldr	r5, [r4, #0]
 8004b84:	f015 0506 	ands.w	r5, r5, #6
 8004b88:	d106      	bne.n	8004b98 <_printf_common+0x48>
 8004b8a:	f104 0a19 	add.w	sl, r4, #25
 8004b8e:	68e3      	ldr	r3, [r4, #12]
 8004b90:	6832      	ldr	r2, [r6, #0]
 8004b92:	1a9b      	subs	r3, r3, r2
 8004b94:	42ab      	cmp	r3, r5
 8004b96:	dc28      	bgt.n	8004bea <_printf_common+0x9a>
 8004b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b9c:	1e13      	subs	r3, r2, #0
 8004b9e:	6822      	ldr	r2, [r4, #0]
 8004ba0:	bf18      	it	ne
 8004ba2:	2301      	movne	r3, #1
 8004ba4:	0692      	lsls	r2, r2, #26
 8004ba6:	d42d      	bmi.n	8004c04 <_printf_common+0xb4>
 8004ba8:	4649      	mov	r1, r9
 8004baa:	4638      	mov	r0, r7
 8004bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bb0:	47c0      	blx	r8
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d020      	beq.n	8004bf8 <_printf_common+0xa8>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	68e5      	ldr	r5, [r4, #12]
 8004bba:	f003 0306 	and.w	r3, r3, #6
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	bf18      	it	ne
 8004bc2:	2500      	movne	r5, #0
 8004bc4:	6832      	ldr	r2, [r6, #0]
 8004bc6:	f04f 0600 	mov.w	r6, #0
 8004bca:	68a3      	ldr	r3, [r4, #8]
 8004bcc:	bf08      	it	eq
 8004bce:	1aad      	subeq	r5, r5, r2
 8004bd0:	6922      	ldr	r2, [r4, #16]
 8004bd2:	bf08      	it	eq
 8004bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	bfc4      	itt	gt
 8004bdc:	1a9b      	subgt	r3, r3, r2
 8004bde:	18ed      	addgt	r5, r5, r3
 8004be0:	341a      	adds	r4, #26
 8004be2:	42b5      	cmp	r5, r6
 8004be4:	d11a      	bne.n	8004c1c <_printf_common+0xcc>
 8004be6:	2000      	movs	r0, #0
 8004be8:	e008      	b.n	8004bfc <_printf_common+0xac>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4652      	mov	r2, sl
 8004bee:	4649      	mov	r1, r9
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	47c0      	blx	r8
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d103      	bne.n	8004c00 <_printf_common+0xb0>
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c00:	3501      	adds	r5, #1
 8004c02:	e7c4      	b.n	8004b8e <_printf_common+0x3e>
 8004c04:	2030      	movs	r0, #48	; 0x30
 8004c06:	18e1      	adds	r1, r4, r3
 8004c08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c12:	4422      	add	r2, r4
 8004c14:	3302      	adds	r3, #2
 8004c16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c1a:	e7c5      	b.n	8004ba8 <_printf_common+0x58>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4622      	mov	r2, r4
 8004c20:	4649      	mov	r1, r9
 8004c22:	4638      	mov	r0, r7
 8004c24:	47c0      	blx	r8
 8004c26:	3001      	adds	r0, #1
 8004c28:	d0e6      	beq.n	8004bf8 <_printf_common+0xa8>
 8004c2a:	3601      	adds	r6, #1
 8004c2c:	e7d9      	b.n	8004be2 <_printf_common+0x92>
	...

08004c30 <_printf_i>:
 8004c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c34:	460c      	mov	r4, r1
 8004c36:	7e27      	ldrb	r7, [r4, #24]
 8004c38:	4691      	mov	r9, r2
 8004c3a:	2f78      	cmp	r7, #120	; 0x78
 8004c3c:	4680      	mov	r8, r0
 8004c3e:	469a      	mov	sl, r3
 8004c40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c46:	d807      	bhi.n	8004c58 <_printf_i+0x28>
 8004c48:	2f62      	cmp	r7, #98	; 0x62
 8004c4a:	d80a      	bhi.n	8004c62 <_printf_i+0x32>
 8004c4c:	2f00      	cmp	r7, #0
 8004c4e:	f000 80d9 	beq.w	8004e04 <_printf_i+0x1d4>
 8004c52:	2f58      	cmp	r7, #88	; 0x58
 8004c54:	f000 80a4 	beq.w	8004da0 <_printf_i+0x170>
 8004c58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c60:	e03a      	b.n	8004cd8 <_printf_i+0xa8>
 8004c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c66:	2b15      	cmp	r3, #21
 8004c68:	d8f6      	bhi.n	8004c58 <_printf_i+0x28>
 8004c6a:	a001      	add	r0, pc, #4	; (adr r0, 8004c70 <_printf_i+0x40>)
 8004c6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c70:	08004cc9 	.word	0x08004cc9
 8004c74:	08004cdd 	.word	0x08004cdd
 8004c78:	08004c59 	.word	0x08004c59
 8004c7c:	08004c59 	.word	0x08004c59
 8004c80:	08004c59 	.word	0x08004c59
 8004c84:	08004c59 	.word	0x08004c59
 8004c88:	08004cdd 	.word	0x08004cdd
 8004c8c:	08004c59 	.word	0x08004c59
 8004c90:	08004c59 	.word	0x08004c59
 8004c94:	08004c59 	.word	0x08004c59
 8004c98:	08004c59 	.word	0x08004c59
 8004c9c:	08004deb 	.word	0x08004deb
 8004ca0:	08004d0d 	.word	0x08004d0d
 8004ca4:	08004dcd 	.word	0x08004dcd
 8004ca8:	08004c59 	.word	0x08004c59
 8004cac:	08004c59 	.word	0x08004c59
 8004cb0:	08004e0d 	.word	0x08004e0d
 8004cb4:	08004c59 	.word	0x08004c59
 8004cb8:	08004d0d 	.word	0x08004d0d
 8004cbc:	08004c59 	.word	0x08004c59
 8004cc0:	08004c59 	.word	0x08004c59
 8004cc4:	08004dd5 	.word	0x08004dd5
 8004cc8:	680b      	ldr	r3, [r1, #0]
 8004cca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cce:	1d1a      	adds	r2, r3, #4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	600a      	str	r2, [r1, #0]
 8004cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0a4      	b.n	8004e26 <_printf_i+0x1f6>
 8004cdc:	6825      	ldr	r5, [r4, #0]
 8004cde:	6808      	ldr	r0, [r1, #0]
 8004ce0:	062e      	lsls	r6, r5, #24
 8004ce2:	f100 0304 	add.w	r3, r0, #4
 8004ce6:	d50a      	bpl.n	8004cfe <_printf_i+0xce>
 8004ce8:	6805      	ldr	r5, [r0, #0]
 8004cea:	600b      	str	r3, [r1, #0]
 8004cec:	2d00      	cmp	r5, #0
 8004cee:	da03      	bge.n	8004cf8 <_printf_i+0xc8>
 8004cf0:	232d      	movs	r3, #45	; 0x2d
 8004cf2:	426d      	negs	r5, r5
 8004cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf8:	230a      	movs	r3, #10
 8004cfa:	485e      	ldr	r0, [pc, #376]	; (8004e74 <_printf_i+0x244>)
 8004cfc:	e019      	b.n	8004d32 <_printf_i+0x102>
 8004cfe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d02:	6805      	ldr	r5, [r0, #0]
 8004d04:	600b      	str	r3, [r1, #0]
 8004d06:	bf18      	it	ne
 8004d08:	b22d      	sxthne	r5, r5
 8004d0a:	e7ef      	b.n	8004cec <_printf_i+0xbc>
 8004d0c:	680b      	ldr	r3, [r1, #0]
 8004d0e:	6825      	ldr	r5, [r4, #0]
 8004d10:	1d18      	adds	r0, r3, #4
 8004d12:	6008      	str	r0, [r1, #0]
 8004d14:	0628      	lsls	r0, r5, #24
 8004d16:	d501      	bpl.n	8004d1c <_printf_i+0xec>
 8004d18:	681d      	ldr	r5, [r3, #0]
 8004d1a:	e002      	b.n	8004d22 <_printf_i+0xf2>
 8004d1c:	0669      	lsls	r1, r5, #25
 8004d1e:	d5fb      	bpl.n	8004d18 <_printf_i+0xe8>
 8004d20:	881d      	ldrh	r5, [r3, #0]
 8004d22:	2f6f      	cmp	r7, #111	; 0x6f
 8004d24:	bf0c      	ite	eq
 8004d26:	2308      	moveq	r3, #8
 8004d28:	230a      	movne	r3, #10
 8004d2a:	4852      	ldr	r0, [pc, #328]	; (8004e74 <_printf_i+0x244>)
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d32:	6866      	ldr	r6, [r4, #4]
 8004d34:	2e00      	cmp	r6, #0
 8004d36:	bfa8      	it	ge
 8004d38:	6821      	ldrge	r1, [r4, #0]
 8004d3a:	60a6      	str	r6, [r4, #8]
 8004d3c:	bfa4      	itt	ge
 8004d3e:	f021 0104 	bicge.w	r1, r1, #4
 8004d42:	6021      	strge	r1, [r4, #0]
 8004d44:	b90d      	cbnz	r5, 8004d4a <_printf_i+0x11a>
 8004d46:	2e00      	cmp	r6, #0
 8004d48:	d04d      	beq.n	8004de6 <_printf_i+0x1b6>
 8004d4a:	4616      	mov	r6, r2
 8004d4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d50:	fb03 5711 	mls	r7, r3, r1, r5
 8004d54:	5dc7      	ldrb	r7, [r0, r7]
 8004d56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d5a:	462f      	mov	r7, r5
 8004d5c:	42bb      	cmp	r3, r7
 8004d5e:	460d      	mov	r5, r1
 8004d60:	d9f4      	bls.n	8004d4c <_printf_i+0x11c>
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d10b      	bne.n	8004d7e <_printf_i+0x14e>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	07df      	lsls	r7, r3, #31
 8004d6a:	d508      	bpl.n	8004d7e <_printf_i+0x14e>
 8004d6c:	6923      	ldr	r3, [r4, #16]
 8004d6e:	6861      	ldr	r1, [r4, #4]
 8004d70:	4299      	cmp	r1, r3
 8004d72:	bfde      	ittt	le
 8004d74:	2330      	movle	r3, #48	; 0x30
 8004d76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d7e:	1b92      	subs	r2, r2, r6
 8004d80:	6122      	str	r2, [r4, #16]
 8004d82:	464b      	mov	r3, r9
 8004d84:	4621      	mov	r1, r4
 8004d86:	4640      	mov	r0, r8
 8004d88:	f8cd a000 	str.w	sl, [sp]
 8004d8c:	aa03      	add	r2, sp, #12
 8004d8e:	f7ff fedf 	bl	8004b50 <_printf_common>
 8004d92:	3001      	adds	r0, #1
 8004d94:	d14c      	bne.n	8004e30 <_printf_i+0x200>
 8004d96:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9a:	b004      	add	sp, #16
 8004d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da0:	4834      	ldr	r0, [pc, #208]	; (8004e74 <_printf_i+0x244>)
 8004da2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004da6:	680e      	ldr	r6, [r1, #0]
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	f856 5b04 	ldr.w	r5, [r6], #4
 8004dae:	061f      	lsls	r7, r3, #24
 8004db0:	600e      	str	r6, [r1, #0]
 8004db2:	d514      	bpl.n	8004dde <_printf_i+0x1ae>
 8004db4:	07d9      	lsls	r1, r3, #31
 8004db6:	bf44      	itt	mi
 8004db8:	f043 0320 	orrmi.w	r3, r3, #32
 8004dbc:	6023      	strmi	r3, [r4, #0]
 8004dbe:	b91d      	cbnz	r5, 8004dc8 <_printf_i+0x198>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	f023 0320 	bic.w	r3, r3, #32
 8004dc6:	6023      	str	r3, [r4, #0]
 8004dc8:	2310      	movs	r3, #16
 8004dca:	e7af      	b.n	8004d2c <_printf_i+0xfc>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	f043 0320 	orr.w	r3, r3, #32
 8004dd2:	6023      	str	r3, [r4, #0]
 8004dd4:	2378      	movs	r3, #120	; 0x78
 8004dd6:	4828      	ldr	r0, [pc, #160]	; (8004e78 <_printf_i+0x248>)
 8004dd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ddc:	e7e3      	b.n	8004da6 <_printf_i+0x176>
 8004dde:	065e      	lsls	r6, r3, #25
 8004de0:	bf48      	it	mi
 8004de2:	b2ad      	uxthmi	r5, r5
 8004de4:	e7e6      	b.n	8004db4 <_printf_i+0x184>
 8004de6:	4616      	mov	r6, r2
 8004de8:	e7bb      	b.n	8004d62 <_printf_i+0x132>
 8004dea:	680b      	ldr	r3, [r1, #0]
 8004dec:	6826      	ldr	r6, [r4, #0]
 8004dee:	1d1d      	adds	r5, r3, #4
 8004df0:	6960      	ldr	r0, [r4, #20]
 8004df2:	600d      	str	r5, [r1, #0]
 8004df4:	0635      	lsls	r5, r6, #24
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	d501      	bpl.n	8004dfe <_printf_i+0x1ce>
 8004dfa:	6018      	str	r0, [r3, #0]
 8004dfc:	e002      	b.n	8004e04 <_printf_i+0x1d4>
 8004dfe:	0671      	lsls	r1, r6, #25
 8004e00:	d5fb      	bpl.n	8004dfa <_printf_i+0x1ca>
 8004e02:	8018      	strh	r0, [r3, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	4616      	mov	r6, r2
 8004e08:	6123      	str	r3, [r4, #16]
 8004e0a:	e7ba      	b.n	8004d82 <_printf_i+0x152>
 8004e0c:	680b      	ldr	r3, [r1, #0]
 8004e0e:	1d1a      	adds	r2, r3, #4
 8004e10:	600a      	str	r2, [r1, #0]
 8004e12:	681e      	ldr	r6, [r3, #0]
 8004e14:	2100      	movs	r1, #0
 8004e16:	4630      	mov	r0, r6
 8004e18:	6862      	ldr	r2, [r4, #4]
 8004e1a:	f000 f82f 	bl	8004e7c <memchr>
 8004e1e:	b108      	cbz	r0, 8004e24 <_printf_i+0x1f4>
 8004e20:	1b80      	subs	r0, r0, r6
 8004e22:	6060      	str	r0, [r4, #4]
 8004e24:	6863      	ldr	r3, [r4, #4]
 8004e26:	6123      	str	r3, [r4, #16]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e2e:	e7a8      	b.n	8004d82 <_printf_i+0x152>
 8004e30:	4632      	mov	r2, r6
 8004e32:	4649      	mov	r1, r9
 8004e34:	4640      	mov	r0, r8
 8004e36:	6923      	ldr	r3, [r4, #16]
 8004e38:	47d0      	blx	sl
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d0ab      	beq.n	8004d96 <_printf_i+0x166>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	079b      	lsls	r3, r3, #30
 8004e42:	d413      	bmi.n	8004e6c <_printf_i+0x23c>
 8004e44:	68e0      	ldr	r0, [r4, #12]
 8004e46:	9b03      	ldr	r3, [sp, #12]
 8004e48:	4298      	cmp	r0, r3
 8004e4a:	bfb8      	it	lt
 8004e4c:	4618      	movlt	r0, r3
 8004e4e:	e7a4      	b.n	8004d9a <_printf_i+0x16a>
 8004e50:	2301      	movs	r3, #1
 8004e52:	4632      	mov	r2, r6
 8004e54:	4649      	mov	r1, r9
 8004e56:	4640      	mov	r0, r8
 8004e58:	47d0      	blx	sl
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d09b      	beq.n	8004d96 <_printf_i+0x166>
 8004e5e:	3501      	adds	r5, #1
 8004e60:	68e3      	ldr	r3, [r4, #12]
 8004e62:	9903      	ldr	r1, [sp, #12]
 8004e64:	1a5b      	subs	r3, r3, r1
 8004e66:	42ab      	cmp	r3, r5
 8004e68:	dcf2      	bgt.n	8004e50 <_printf_i+0x220>
 8004e6a:	e7eb      	b.n	8004e44 <_printf_i+0x214>
 8004e6c:	2500      	movs	r5, #0
 8004e6e:	f104 0619 	add.w	r6, r4, #25
 8004e72:	e7f5      	b.n	8004e60 <_printf_i+0x230>
 8004e74:	08005055 	.word	0x08005055
 8004e78:	08005066 	.word	0x08005066

08004e7c <memchr>:
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	b2c9      	uxtb	r1, r1
 8004e82:	4402      	add	r2, r0
 8004e84:	4293      	cmp	r3, r2
 8004e86:	4618      	mov	r0, r3
 8004e88:	d101      	bne.n	8004e8e <memchr+0x12>
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	e003      	b.n	8004e96 <memchr+0x1a>
 8004e8e:	7804      	ldrb	r4, [r0, #0]
 8004e90:	3301      	adds	r3, #1
 8004e92:	428c      	cmp	r4, r1
 8004e94:	d1f6      	bne.n	8004e84 <memchr+0x8>
 8004e96:	bd10      	pop	{r4, pc}

08004e98 <memmove>:
 8004e98:	4288      	cmp	r0, r1
 8004e9a:	b510      	push	{r4, lr}
 8004e9c:	eb01 0402 	add.w	r4, r1, r2
 8004ea0:	d902      	bls.n	8004ea8 <memmove+0x10>
 8004ea2:	4284      	cmp	r4, r0
 8004ea4:	4623      	mov	r3, r4
 8004ea6:	d807      	bhi.n	8004eb8 <memmove+0x20>
 8004ea8:	1e43      	subs	r3, r0, #1
 8004eaa:	42a1      	cmp	r1, r4
 8004eac:	d008      	beq.n	8004ec0 <memmove+0x28>
 8004eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eb6:	e7f8      	b.n	8004eaa <memmove+0x12>
 8004eb8:	4601      	mov	r1, r0
 8004eba:	4402      	add	r2, r0
 8004ebc:	428a      	cmp	r2, r1
 8004ebe:	d100      	bne.n	8004ec2 <memmove+0x2a>
 8004ec0:	bd10      	pop	{r4, pc}
 8004ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eca:	e7f7      	b.n	8004ebc <memmove+0x24>

08004ecc <_realloc_r>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	4607      	mov	r7, r0
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	460e      	mov	r6, r1
 8004ed4:	b921      	cbnz	r1, 8004ee0 <_realloc_r+0x14>
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004edc:	f7ff bb90 	b.w	8004600 <_malloc_r>
 8004ee0:	b922      	cbnz	r2, 8004eec <_realloc_r+0x20>
 8004ee2:	f7ff fc8d 	bl	8004800 <_free_r>
 8004ee6:	4625      	mov	r5, r4
 8004ee8:	4628      	mov	r0, r5
 8004eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eec:	f000 f814 	bl	8004f18 <_malloc_usable_size_r>
 8004ef0:	42a0      	cmp	r0, r4
 8004ef2:	d20f      	bcs.n	8004f14 <_realloc_r+0x48>
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	f7ff fb82 	bl	8004600 <_malloc_r>
 8004efc:	4605      	mov	r5, r0
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d0f2      	beq.n	8004ee8 <_realloc_r+0x1c>
 8004f02:	4631      	mov	r1, r6
 8004f04:	4622      	mov	r2, r4
 8004f06:	f7ff fb65 	bl	80045d4 <memcpy>
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	f7ff fc77 	bl	8004800 <_free_r>
 8004f12:	e7e9      	b.n	8004ee8 <_realloc_r+0x1c>
 8004f14:	4635      	mov	r5, r6
 8004f16:	e7e7      	b.n	8004ee8 <_realloc_r+0x1c>

08004f18 <_malloc_usable_size_r>:
 8004f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f1c:	1f18      	subs	r0, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bfbc      	itt	lt
 8004f22:	580b      	ldrlt	r3, [r1, r0]
 8004f24:	18c0      	addlt	r0, r0, r3
 8004f26:	4770      	bx	lr

08004f28 <_init>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	bf00      	nop
 8004f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2e:	bc08      	pop	{r3}
 8004f30:	469e      	mov	lr, r3
 8004f32:	4770      	bx	lr

08004f34 <_fini>:
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f36:	bf00      	nop
 8004f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3a:	bc08      	pop	{r3}
 8004f3c:	469e      	mov	lr, r3
 8004f3e:	4770      	bx	lr
